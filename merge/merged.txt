// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/App.tsx
import './index.css'
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { ThemeProvider } from "@/components/theme-provider";
import Index from "./pages/Index";
import NotFound from "./pages/NotFound";
import Privacy from "./pages/Privacy";

const queryClient = new QueryClient();

const App = () => (
  <ThemeProvider defaultTheme="light">
    <QueryClientProvider client={queryClient}>
      <TooltipProvider>
        <Toaster />
        <Sonner />
        <BrowserRouter>
          <Routes>
            <Route path="/" element={<Index />} />
            <Route path="/privacy" element={<Privacy />} />
            <Route path="*" element={<NotFound />} />
          </Routes>
        </BrowserRouter>
      </TooltipProvider>
    </QueryClientProvider>
  </ThemeProvider>
);

export default App;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/AllEffortsDropdown.tsx
import React from 'react';
import { useAppContext } from '@/contexts/AppContext';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { ChevronDown, Activity, Bike, Waves, Dumbbell, Move } from 'lucide-react';

interface AllEffortsDropdownProps {
  onSelectWorkout: (workout: any) => void;
}

const AllEffortsDropdown: React.FC<AllEffortsDropdownProps> = ({ onSelectWorkout }) => {
  const { workouts } = useAppContext();

  const completedWorkouts = workouts.filter(workout =>
    workout.workout_status === 'completed' || workout.completedManually
  );

  const getIcon = (type: string) => {
    switch (type) {
      case 'swim': return <Waves className="h-5 w-5 mr-3" />;
      case 'ride': return <Bike className="h-5 w-5 mr-3" />;
      case 'run': return <Activity className="h-5 w-5 mr-3" />;
      case 'strength': return <Dumbbell className="h-5 w-5 mr-3" />;
      case 'mobility': return <Move className="h-5 w-5 mr-3" />;
      default: return <Activity className="h-5 w-5 mr-3" />;
    }
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          className="flex items-center gap-2 bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 hover:text-gray-900 hover:border-gray-400 transition-all duration-200 shadow-sm hover:shadow-md"
          style={{
            fontFamily: 'Inter, sans-serif',
            fontWeight: 600,
            padding: '14px 12px',
            borderRadius: '8px',
            fontSize: '15px',
            minHeight: '48px',
            flex: 1,
            maxWidth: '140px'
          }}
        >
          Completed ({completedWorkouts.length})
          <ChevronDown className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent
        align="start"
        className="max-h-80 overflow-y-auto bg-white border border-gray-200 shadow-xl"
        style={{borderRadius: '12px', padding: '8px', minWidth: '280px'}}
      >
        {completedWorkouts.length === 0 ? (
          <div className="px-4 py-6 text-sm text-gray-500 text-center">
            No completed efforts yet
          </div>
        ) : (
          completedWorkouts.map((workout) => (
            <DropdownMenuItem
              key={workout.id}
              onClick={() => onSelectWorkout(workout)}
              className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg flex items-start gap-3 cursor-pointer"
              style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '56px'}}
            >
              {getIcon(workout.type)}
              <div className="flex-1 min-w-0">
                <div className="font-semibold text-sm truncate text-gray-900">
                  {workout.name || `${workout.type.charAt(0).toUpperCase() + workout.type.slice(1)}`}
                </div>
                <div className="text-xs text-gray-500 mt-1">
                  {workout.date ? new Date(workout.date + 'T00:00:00').toLocaleDateString('en-US', {
                    month: 'short',
                    day: 'numeric'
                  }) : 'No date'}
                  {workout.duration && ` • ${Math.floor(workout.duration / 60)}:${(workout.duration % 60).toString().padStart(2, '0')}`}
                </div>
              </div>
            </DropdownMenuItem>
          ))
        )}
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default AllEffortsDropdown;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/AllPlansInterface.tsx
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { ArrowLeft, Play, Pause, Edit, Trash2, Calendar, Clock, Target } from 'lucide-react';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';

interface Plan {
  id: string;
  name: string;
  description: string;
  currentWeek?: number;
  status: 'active' | 'completed';
}

interface AllPlansInterfaceProps {
  onClose: () => void;
  onSelectPlan: (plan: Plan) => void;
  onBuildWorkout: (type: string, sourceContext?: string) => void;
  onDeletePlan?: (planId: string) => void;
  currentPlans?: Plan[];
  completedPlans?: Plan[];
  detailedPlans?: any;
}

const AllPlansInterface: React.FC<AllPlansInterfaceProps> = ({ 
  onClose, 
  onSelectPlan, 
  onBuildWorkout,
  onDeletePlan,
  currentPlans = [],
  completedPlans = [],
  detailedPlans = {}
}) => {
  const [currentView, setCurrentView] = useState<'list' | 'detail'>('list');
  const [selectedPlanDetail, setSelectedPlanDetail] = useState<any>(null);
  const [selectedWeek, setSelectedWeek] = useState<number>(1);
  const [planStatus, setPlanStatus] = useState<string>('active');

  const handlePlanClick = (planId: string) => {
    console.log('Opening plan details for:', planId);
    const planDetail = detailedPlans[planId as keyof typeof detailedPlans];
    if (planDetail) {
      setSelectedPlanDetail(planDetail);
      setSelectedWeek(planDetail.currentWeek);
      setPlanStatus(planDetail.status);
      setCurrentView('detail');
    }
  };

  const handleBack = () => {
    setCurrentView('list');
    setSelectedPlanDetail(null);
  };

  const handleDeletePlan = async () => {
    if (!selectedPlanDetail || !onDeletePlan) return;
    
    try {
      await onDeletePlan(selectedPlanDetail.id);
      // Navigate back to list after successful deletion
      handleBack();
    } catch (error) {
      console.error('Error deleting plan:', error);
      // You could add a toast notification here for better UX
    }
  };

  // Plan Detail View Functions
  const getWorkoutIcon = (type: string) => {
    switch (type) {
      case 'run': return '🏃';
      case 'ride': return '🚴';
      case 'swim': return '🏊';
      case 'strength': return '💪';
      case 'rest': return '😴';
      default: return '⚡';
    }
  };
  
  const getIntensityColor = (intensity: string) => {
    switch (intensity) {
      case 'Easy': return 'bg-green-100 text-green-800 border-green-200';
      case 'Moderate': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'Hard': return 'bg-red-100 text-red-800 border-red-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getCompletionBadge = (workout: any) => {
    if (!workout.completed) {
      return (
        <span className="px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-600 border border-gray-200">
          Planned
        </span>
      );
    }
    
    const ratingColors = {
      1: 'bg-red-100 text-red-800 border-red-200',
      2: 'bg-orange-100 text-orange-800 border-orange-200', 
      3: 'bg-yellow-100 text-yellow-800 border-yellow-200',
      4: 'bg-green-100 text-green-800 border-green-200',
      5: 'bg-emerald-100 text-emerald-800 border-emerald-200'
    };
    
    return (
      <span className={`px-2 py-1 rounded-full text-xs font-medium border ${ratingColors[workout.rating as keyof typeof ratingColors] || 'bg-gray-100 text-gray-600 border-gray-200'}`}>
        ✓ {workout.rating}/5
      </span>
    );
  };
  
  const formatDuration = (minutes: number) => {
    if (!minutes) return '';
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;
  };

  const getWeeklyVolume = (week: any) => {
    return week.workouts.reduce((total: number, workout: any) => {
      return total + (workout.duration || 0);
    }, 0);
  };

  // Plan Detail View Render
  if (currentView === 'detail' && selectedPlanDetail) {
    const progress = Math.round((selectedPlanDetail.currentWeek / selectedPlanDetail.duration) * 100);
    const currentWeekData = selectedPlanDetail.weeks.find((w: any) => w.weekNumber === selectedWeek);
    
    const totalVolume = selectedPlanDetail.weeks.reduce((total: number, week: any) => {
      return total + getWeeklyVolume(week);
    }, 0);

    const averageWeeklyVolume = Math.round(totalVolume / selectedPlanDetail.duration);

    return (
      <div className="space-y-6" style={{ fontFamily: 'Inter, sans-serif' }}>
        {/* Header */}
        <div className="flex items-center justify-between">
          <button 
            onClick={handleBack}
            className="flex items-center gap-2 p-0 h-auto text-gray-600 hover:text-black transition-colors"
          >
            <ArrowLeft className="h-4 w-4" />
            Plans
          </button>
          
          <div className="flex items-center gap-2">
            {planStatus === 'active' ? (
              <button 
                onClick={() => setPlanStatus('paused')}
                className="flex items-center gap-2 px-3 py-2 text-gray-600 hover:text-black transition-colors"
              >
                <Pause className="h-4 w-4" />
                Pause
              </button>
            ) : (
              <button 
                onClick={() => setPlanStatus('active')}
                className="flex items-center gap-2 px-3 py-2 text-gray-600 hover:text-black transition-colors"
              >
                <Play className="h-4 w-4" />
                Resume
              </button>
            )}
            
            <button className="flex items-center gap-2 px-3 py-2 text-gray-600 hover:text-black transition-colors">
              <Edit className="h-4 w-4" />
              Modify
            </button>
            
            {/* Fixed Delete Button with Confirmation Dialog */}
            <AlertDialog>
              <AlertDialogTrigger asChild>
                <button className="flex items-center gap-2 px-3 py-2 text-red-600 hover:text-red-800 transition-colors">
                  <Trash2 className="h-4 w-4" />
                  Delete
                </button>
              </AlertDialogTrigger>
              <AlertDialogContent>
                <AlertDialogHeader>
                  <AlertDialogTitle>Delete Plan</AlertDialogTitle>
                  <AlertDialogDescription>
                    Are you sure you want to delete "{selectedPlanDetail.name}"? This will also delete all associated workouts. This action cannot be undone.
                  </AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                  <AlertDialogCancel>Cancel</AlertDialogCancel>
                  <AlertDialogAction
                    onClick={handleDeletePlan}
                    className="bg-red-600 hover:bg-red-700"
                  >
                    Delete Plan
                  </AlertDialogAction>
                </AlertDialogFooter>
              </AlertDialogContent>
            </AlertDialog>
          </div>
        </div>

        {/* Plan Overview */}
        <div className="border border-gray-200 rounded-lg">
          <div className="p-6 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-2xl font-bold">{selectedPlanDetail.name}</h1>
                <p className="text-gray-600 mt-1">{selectedPlanDetail.description}</p>
              </div>
              <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                planStatus === 'active' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
              }`}>
                {planStatus}
              </span>
            </div>
          </div>
          <div className="p-6">
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
              <div className="text-center">
                <div className="text-2xl font-bold">{selectedPlanDetail.duration}</div>
                <div className="text-sm text-gray-600">Weeks</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold">{selectedPlanDetail.totalWorkouts}</div>
                <div className="text-sm text-gray-600">Workouts</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold">{Math.round(totalVolume / 60)}h</div>
                <div className="text-sm text-gray-600">Total Time</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold">{averageWeeklyVolume}m</div>
                <div className="text-sm text-gray-600">Avg/Week</div>
              </div>
            </div>
            
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Progress</span>
                <span>Week {selectedPlanDetail.currentWeek} of {selectedPlanDetail.duration}</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-black rounded-full h-2 transition-all duration-300" 
                  style={{ width: `${progress}%` }}
                ></div>
              </div>
            </div>
          </div>
        </div>

        {/* Week Navigation */}
        <div className="flex items-center gap-2 overflow-x-auto pb-2">
          {selectedPlanDetail.weeks.map((week: any) => (
            <button
              key={week.weekNumber}
              onClick={() => setSelectedWeek(week.weekNumber)}
              className={`whitespace-nowrap px-4 py-2 rounded-lg font-medium transition-colors ${
                selectedWeek === week.weekNumber 
                  ? 'bg-black text-white' 
                  : 'bg-white border border-gray-300 text-gray-700 hover:bg-gray-50'
              } ${
                week.weekNumber === selectedPlanDetail.currentWeek ? 'ring-2 ring-blue-500' : ''
              }`}
            >
              Week {week.weekNumber}
              {week.weekNumber === selectedPlanDetail.currentWeek && (
                <span className="ml-2 px-2 py-0.5 bg-blue-100 text-blue-800 text-xs rounded-full">
                  Current
                </span>
              )}
            </button>
          ))}
        </div>

        {/* Selected Week Details */}
        {currentWeekData && (
          <div className="border border-gray-200 rounded-lg">
            <div className="p-6 border-b border-gray-200">
              <h2 className="text-xl font-bold flex items-center gap-2 mb-2">
                <Calendar className="h-5 w-5" />
                Week {currentWeekData.weekNumber}: {currentWeekData.title}
              </h2>
              <p className="text-gray-600 mb-4">{currentWeekData.focus}</p>
              <div className="flex items-center gap-4 text-sm text-gray-600">
                <div className="flex items-center gap-1">
                  <Clock className="h-4 w-4" />
                  {formatDuration(getWeeklyVolume(currentWeekData))} total
                </div>
                <div className="flex items-center gap-1">
                  <Target className="h-4 w-4" />
                  {currentWeekData.workouts.filter((w: any) => w.type !== 'rest').length} workouts
                </div>
              </div>
            </div>
            <div className="p-6">
              <div className="space-y-3">
                {currentWeekData.workouts.map((workout: any) => (
                  <div
                    key={workout.id}
                    className={`p-4 rounded-lg border transition-colors cursor-pointer ${
                      workout.type === 'rest' ? 'bg-gray-50 border-gray-200' : 'bg-white border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className="text-2xl">{getWorkoutIcon(workout.type)}</div>
                        <div className="flex-1">
                          <div className="font-medium">{workout.name}</div>
                          <div className="text-sm text-gray-600 mt-1">
                            {workout.description}
                          </div>
                          {workout.completed && workout.notes && (
                            <div className="text-xs text-gray-500 mt-1 italic">
                              "{workout.notes}"
                            </div>
                          )}
                          {workout.completed && (
                            <div className="text-xs text-gray-500 mt-1">
                              Completed {workout.completedDate}
                              {workout.actualDuration && workout.duration && (
                                <span className={`ml-2 ${workout.actualDuration > workout.duration ? 'text-orange-600' : workout.actualDuration < workout.duration ? 'text-blue-600' : 'text-green-600'}`}>
                                  {formatDuration(workout.actualDuration)} 
                                  {workout.actualDuration !== workout.duration && (
                                    <span> (planned: {formatDuration(workout.duration)})</span>
                                  )}
                                </span>
                              )}
                              {workout.actualDistance && workout.distance && (
                                <span className={`ml-2 ${workout.actualDistance > workout.distance ? 'text-orange-600' : workout.actualDistance < workout.distance ? 'text-blue-600' : 'text-green-600'}`}>
                                  {workout.actualDistance}km
                                  {workout.actualDistance !== workout.distance && (
                                    <span> (planned: {workout.distance}km)</span>
                                  )}
                                </span>
                              )}
                            </div>
                          )}
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        {getCompletionBadge(workout)}
                        {workout.intensity && (
                          <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getIntensityColor(workout.intensity)}`}>
                            {workout.intensity}
                          </span>
                        )}
                        {!workout.completed && workout.duration && (
                          <span className="px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 border border-gray-200">
                            {formatDuration(workout.duration)}
                          </span>
                        )}
                        {!workout.completed && workout.distance && (
                          <span className="px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 border border-gray-200">
                            {workout.distance}km
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    );
  }

  // Plans List View
  return (
    <div className="space-y-6" style={{fontFamily: 'Inter, sans-serif'}}>
      {/* Current Plans */}
      {currentPlans.length > 0 && (
        <div className="space-y-3">
          <h2 className="text-lg font-medium text-gray-900">Current Plans</h2>
          {currentPlans.map((plan) => (
            <div
              key={plan.id}
              onClick={() => handlePlanClick(plan.id)}
              className="p-4 cursor-pointer hover:bg-gray-50 transition-colors rounded-lg border border-gray-200"
            >
              <div className="font-medium">{plan.name} - Wk {plan.currentWeek}</div>
              <div className="text-sm text-gray-600 mt-1">{plan.description}</div>
            </div>
          ))}
        </div>
      )}

      {/* Completed Plans */}
      {completedPlans.length > 0 && (
        <div className="space-y-3">
          <h2 className="text-lg font-medium text-gray-900">Completed Plans</h2>
          {completedPlans.map((plan) => (
            <div
              key={plan.id}
              onClick={() => handlePlanClick(plan.id)}
              className="p-4 cursor-pointer hover:bg-gray-50 transition-colors rounded-lg border border-gray-200"
            >
              <div className="font-medium">{plan.name}</div>
              <div className="text-sm text-gray-600 mt-1">{plan.description}</div>
              <div className="text-xs text-green-600 mt-1">✓ Completed</div>
            </div>
          ))}
        </div>
      )}

      {/* Empty State */}
      {currentPlans.length === 0 && completedPlans.length === 0 && (
        <div className="text-center py-8">
          <h2 className="text-lg font-medium text-gray-900 mb-2">No Plans Yet</h2>
          <p className="text-gray-600 mb-4">Use "Build me a plan" in the Builder tab to create your first training plan</p>
        </div>
      )}
    </div>
  );
};

export default AllPlansInterface;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/AppLayout.tsx
import React, { useState, useEffect, useRef } from 'react';
import { useAppContext } from '@/contexts/AppContext';
import { Button } from '@/components/ui/button';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { Menu, User, Upload, Settings } from 'lucide-react';
import WorkoutBuilder from './WorkoutBuilder';
import WorkoutCalendar from './WorkoutCalendar';
import WorkoutDetail from './WorkoutDetail';
import GarminAutoSync from './GarminAutoSync';
import TodaysEffort from './TodaysEffort';
import StrengthLogger from './StrengthLogger';
import AllPlansInterface from './AllPlansInterface';
import StrengthPlansView from './StrengthPlansView';
import WorkoutSummary from './WorkoutSummary';
import NewEffortDropdown from './NewEffortDropdown';
import PlansDropdown from './PlansDropdown';
import PlanBuilder from './PlanBuilder';
import FitFileImporter from './FitFileImporter';

interface AppLayoutProps {
  onLogout?: () => void;
}

const AppLayout: React.FC<AppLayoutProps> = ({ onLogout }) => {
  const { 
    workouts, 
    loading, 
    deleteWorkout,
    addWorkout,
    currentPlans,
    completedPlans,
    detailedPlans,
    addPlan,
    deletePlan
  } = useAppContext();
  
  const [showBuilder, setShowBuilder] = useState(false);
  const [showStrengthLogger, setShowStrengthLogger] = useState(false);
  const [showAllPlans, setShowAllPlans] = useState(false);
  const [showStrengthPlans, setShowStrengthPlans] = useState(false);
  const [showPlanBuilder, setShowPlanBuilder] = useState(false);
  const [showImportPage, setShowImportPage] = useState(false);
  const [builderType, setBuilderType] = useState<string>('');
  const [builderSourceContext, setBuilderSourceContext] = useState<string>('');
  const [selectedWorkout, setSelectedWorkout] = useState<any>(null);
  const [activeTab, setActiveTab] = useState<string>('summary');

  const [showSummary, setShowSummary] = useState(false);
  const [selectedDate, setSelectedDate] = useState<string>(new Date().toLocaleDateString('en-CA'));
  const [dateWorkouts, setDateWorkouts] = useState<any[]>([]);
  const [currentWorkoutIndex, setCurrentWorkoutIndex] = useState(0);
  const [workoutBeingEdited, setWorkoutBeingEdited] = useState<any>(null);

  // Ultra-simple transform state
  const [transform, setTransform] = useState(0);
  const [isSwipeDetected, setIsSwipeDetected] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);
  const wrapperRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (selectedWorkout) {
      if (selectedWorkout.type === 'strength') {
        setActiveTab('completed');
      } else if (selectedWorkout.workout_status === 'completed') {
        // 🔧 FIX: Completed workouts (like FIT imports) should show Completed tab
        setActiveTab('completed');
      } else {
        setActiveTab('summary');
      }
    }
  }, [selectedWorkout?.id]);

  // Simple transform sync
  useEffect(() => {
    setTransform(showSummary ? -50 : 0);
  }, [showSummary]);

  // Add modern swipe handlers
  useEffect(() => {
    const container = containerRef.current;
    const wrapper = wrapperRef.current;
    if (!container || !wrapper) return;

    let startX = 0;
    let currentX = 0;
    let isPointerDown = false;
    let hasMovedHorizontally = false;

    const handlePointerDown = (clientX: number) => {
      startX = clientX;
      currentX = clientX;
      isPointerDown = true;
      hasMovedHorizontally = false;
      
      // Disable CSS transition for live tracking
      wrapper.style.transition = 'none';
    };

    const handlePointerMove = (clientX: number, preventDefault: () => void) => {
      if (!isPointerDown) return;
      
      currentX = clientX;
      const deltaX = currentX - startX;
      const deltaY = 0; // We don't track Y for simplicity
      
      // Start horizontal movement immediately on any horizontal motion
      if (Math.abs(deltaX) > 2) {
        if (!hasMovedHorizontally) {
          hasMovedHorizontally = true;
          setIsSwipeDetected(true);
          preventDefault();
        }
        
        // Live transform - content follows finger immediately
        const baseTransform = showSummary ? -50 : 0;
        const dragPercent = (deltaX / window.innerWidth) * 100;
        let newTransform = baseTransform + dragPercent;
        
        // Soft bounds with resistance at edges
        if (newTransform > 0) {
          newTransform = newTransform * 0.3; // Resistance when going past calendar
        } else if (newTransform < -100) {
          newTransform = -100 + (newTransform + 100) * 0.3; // Resistance past summary
        }
        
        wrapper.style.transform = `translateX(${newTransform}%)`;
      }
    };

    const handlePointerUp = () => {
      if (!isPointerDown) return;
      
      // Re-enable CSS transition for snap animation
      wrapper.style.transition = 'transform 0.3s cubic-bezier(0.25, 0.8, 0.25, 1)';
      
      if (hasMovedHorizontally) {
        const deltaX = currentX - startX;
        const velocity = Math.abs(deltaX);
        
        // Smart threshold - smaller swipe needed if fast, larger if slow
        const threshold = velocity > 100 ? 30 : 80;
        
        if (Math.abs(deltaX) > threshold) {
          if (deltaX > 0 && showSummary) {
            // Swipe right: summary → calendar
            setShowSummary(false);
            setDateWorkouts([]);
            setCurrentWorkoutIndex(0);
          } else if (deltaX < 0 && !showSummary) {
            // Swipe left: calendar → summary
            const workoutsForDate = workouts?.filter(w => w.date === selectedDate) || [];
            setDateWorkouts(workoutsForDate);
            setCurrentWorkoutIndex(0);
            setShowSummary(true);
          } else {
            // Snap back to current position
            wrapper.style.transform = `translateX(${showSummary ? -50 : 0}%)`;
          }
        } else {
          // Snap back to current position
          wrapper.style.transform = `translateX(${showSummary ? -50 : 0}%)`;
        }
      }
      
      // Reset everything
      isPointerDown = false;
      hasMovedHorizontally = false;
      setIsSwipeDetected(false);
    };

    // Mouse events
    const handleMouseDown = (e: MouseEvent) => {
      handlePointerDown(e.clientX);
    };

    const handleMouseMove = (e: MouseEvent) => {
      handlePointerMove(e.clientX, () => e.preventDefault());
    };

    const handleMouseUp = (e: MouseEvent) => {
      handlePointerUp();
    };

    // Touch events
    const handleTouchStart = (e: TouchEvent) => {
      const touch = e.touches[0];
      handlePointerDown(touch.clientX);
    };

    const handleTouchMove = (e: TouchEvent) => {
      const touch = e.touches[0];
      handlePointerMove(touch.clientX, () => e.preventDefault());
    };

    const handleTouchEnd = (e: TouchEvent) => {
      handlePointerUp();
    };

    // Add listeners
    container.addEventListener('mousedown', handleMouseDown, { passive: true });
    container.addEventListener('mousemove', handleMouseMove, { passive: false });
    container.addEventListener('mouseup', handleMouseUp, { passive: true });
    container.addEventListener('touchstart', handleTouchStart, { passive: true });
    container.addEventListener('touchmove', handleTouchMove, { passive: false });
    container.addEventListener('touchend', handleTouchEnd, { passive: true });

    return () => {
      container.removeEventListener('mousedown', handleMouseDown);
      container.removeEventListener('mousemove', handleMouseMove);
      container.removeEventListener('mouseup', handleMouseUp);
      container.removeEventListener('touchstart', handleTouchStart);
      container.removeEventListener('touchmove', handleTouchMove);
      container.removeEventListener('touchend', handleTouchEnd);
    };
  }, [showSummary, workouts, selectedDate]);

  const formatHeaderDate = () => {
    const today = new Date();
    return today.toLocaleDateString('en-US', { 
      month: 'long', 
      day: 'numeric', 
      year: 'numeric' 
    });
  };

  const handleWorkoutSelect = (workout: any) => {
    setSelectedWorkout(workout);
  };

  const handleUpdateWorkout = async (workoutId: string, updates: any) => {
    console.log('Updating workout:', workoutId, updates);
  };

  const handleOpenPlanBuilder = () => {
    setShowPlanBuilder(true);
    setShowSummary(false);
    setDateWorkouts([]);
    setCurrentWorkoutIndex(0);
  };

  // NEW: Import handlers
  const handleImportClick = () => {
    setShowImportPage(true);
  };

  // 🔧 ENHANCED: Complete FIT data extraction - pass through ALL fields that FitFileImporter extracts
  const handleWorkoutsImported = (importedWorkouts: any[]) => {
    console.log('📥 handleWorkoutsImported called with:', importedWorkouts);
    
    importedWorkouts.forEach(async (workout) => {
      try {
        console.log('🔧 Processing workout with all fields:', workout.name);
        console.log('🔍 Full workout object:', workout);
        
        const workoutToSave = {
          // CORE WORKOUT DATA
          name: workout.name,
          type: workout.type,
          date: workout.date,
          duration: workout.duration,
          distance: workout.distance,
          description: workout.description || "",
          userComments: "",
          completedManually: false,
          workout_status: 'completed',
          
          // 🆕 NEW TOP-LEVEL FIELDS that CompletedTab expects
          timestamp: workout.timestamp,
          start_position_lat: workout.start_position_lat,
          start_position_long: workout.start_position_long,
          friendly_name: workout.friendly_name,
          moving_time: workout.moving_time,
          elapsed_time: workout.elapsed_time,
          
          // EXISTING FIELDS - ensure proper data types
          avg_heart_rate: workout.metrics?.avg_heart_rate,
          max_heart_rate: workout.metrics?.max_heart_rate,
          avg_power: workout.metrics?.avg_power,
          max_power: workout.metrics?.max_power,
          normalized_power: workout.metrics?.normalized_power,
          avg_speed: workout.metrics?.avg_speed,
          max_speed: workout.metrics?.max_speed,
          avg_cadence: workout.metrics?.avg_cadence,
          max_cadence: workout.metrics?.max_cadence,
          calories: workout.metrics?.calories,
          tss: workout.metrics?.training_stress_score,
          intensity_factor: workout.metrics?.intensity_factor,
          
          // ELEVATION - check both locations for elevation_gain
          elevation_gain: workout.metrics?.elevation_gain ? 
            Math.round(Number(workout.metrics.elevation_gain)) : 
            workout.elevation_gain ? 
              Math.round(Number(workout.elevation_gain)) : 
              null,
          elevation_loss: workout.metrics?.elevation_loss,
          
          // 🆕 NEW FIELDS - Pass through ALL the metrics that FitFileImporter extracts
          avg_temperature: workout.metrics?.avg_temperature,
          max_temperature: workout.metrics?.max_temperature,
          total_timer_time: workout.metrics?.total_timer_time,
          total_elapsed_time: workout.metrics?.total_elapsed_time,
          total_work: workout.metrics?.total_work,
          total_descent: workout.metrics?.total_descent,
          avg_vam: workout.metrics?.avg_vam,
          total_training_effect: workout.metrics?.total_training_effect,
          total_anaerobic_effect: workout.metrics?.total_anaerobic_effect,
          
          // 🆕 ZONES DATA
          functional_threshold_power: workout.metrics?.functional_threshold_power,
          threshold_heart_rate: workout.metrics?.threshold_heart_rate,
          hr_calc_type: workout.metrics?.hr_calc_type,
          pwr_calc_type: workout.metrics?.pwr_calc_type,
          
          // 🆕 USER PROFILE DATA
          age: workout.metrics?.age,
          weight: workout.metrics?.weight,
          height: workout.metrics?.height,
          gender: workout.metrics?.gender,
          default_max_heart_rate: workout.metrics?.default_max_heart_rate,
          resting_heart_rate: workout.metrics?.resting_heart_rate,
          dist_setting: workout.metrics?.dist_setting,
          weight_setting: workout.metrics?.weight_setting,
          
          // 🆕 CYCLING DETAILS DATA
          avg_fractional_cadence: workout.metrics?.avg_fractional_cadence,
          avg_left_pedal_smoothness: workout.metrics?.avg_left_pedal_smoothness,
          avg_left_torque_effectiveness: workout.metrics?.avg_left_torque_effectiveness,
          max_fractional_cadence: workout.metrics?.max_fractional_cadence,
          left_right_balance: workout.metrics?.left_right_balance,
          threshold_power: workout.metrics?.threshold_power,
          total_cycles: workout.metrics?.total_cycles,
          
          // 🆕 DEVICE INFO
          deviceInfo: workout.deviceInfo,
          
          // Keep complete metrics object for CompletedTab compatibility
          metrics: workout.metrics
        };
        
        console.log('✅ Complete workout data being saved:', workoutToSave);
        console.log('🆕 NEW FIELDS being saved:');
        console.log('  Location:', { lat: workoutToSave.start_position_lat, lng: workoutToSave.start_position_long });
        console.log('  Temperature:', workoutToSave.avg_temperature);
        console.log('  Device:', workoutToSave.friendly_name);
        console.log('  Total Work:', workoutToSave.total_work);
        console.log('  VAM:', workoutToSave.avg_vam);
        console.log('  Training Effects:', { 
          aerobic: workoutToSave.total_training_effect, 
          anaerobic: workoutToSave.total_anaerobic_effect 
        });
        console.log('  User Profile:', { 
          age: workoutToSave.age, 
          weight: workoutToSave.weight, 
          height: workoutToSave.height 
        });
        console.log('  Cycling Details:', {
          left_right_balance: workoutToSave.left_right_balance,
          pedal_smoothness: workoutToSave.avg_left_pedal_smoothness,
          torque_effectiveness: workoutToSave.avg_left_torque_effectiveness
        });
        
        await addWorkout(workoutToSave);
        console.log('✅ Successfully imported workout with ALL metrics:', workout.name);
      } catch (error) {
        console.error('❌ Error importing workout:', error);
      }
    });
    
    console.log(`✅ Successfully imported ${importedWorkouts.length} workouts with complete data`);
    setShowImportPage(false);
  };

  const handleBackToDashboard = () => {
    const comingFromPlanBuilder = showPlanBuilder;
    const shouldReturnToSummary = showBuilder && !comingFromPlanBuilder && selectedDate && workoutBeingEdited;
    
    setShowStrengthLogger(false);
    setShowBuilder(false);
    setShowAllPlans(false);
    setShowStrengthPlans(false);
    setShowPlanBuilder(false);
    setShowImportPage(false); // NEW: Reset import page
    setBuilderType('');
    setBuilderSourceContext('');
    setSelectedWorkout(null);
    setWorkoutBeingEdited(null);
    setActiveTab('summary');
    
    if (shouldReturnToSummary) {
      const workoutsForDate = workouts?.filter(w => w.date === selectedDate) || [];
      if (workoutsForDate.length > 0) {
        setDateWorkouts(workoutsForDate);
        setCurrentWorkoutIndex(0);
        setShowSummary(true);
      } else {
        setDateWorkouts([]);
        setCurrentWorkoutIndex(0);
        setShowSummary(true);
      }
    } else {
      setShowSummary(false);
      setDateWorkouts([]);
      setCurrentWorkoutIndex(0);
    }
  };

  const handleDateSelect = (date: string) => {
    setSelectedDate(date);
  };

  const handleEditEffort = (workout: any) => {
    if (workout.workout_status === 'completed') {
      setSelectedWorkout(workout);
    } else {
      setDateWorkouts([workout]);
      setCurrentWorkoutIndex(0);
      setShowSummary(true);
    }
  };

  const handleDeleteWorkout = async (workoutId: string) => {
    try {
      await deleteWorkout(workoutId);
      setShowSummary(false);
      setDateWorkouts([]);
      setCurrentWorkoutIndex(0);
    } catch (error) {
      console.error('Error deleting workout:', error);
      alert('Error deleting workout. Please try again.');
    }
  };

  const handleNavigateToPlans = () => {
    setShowBuilder(false);
    setBuilderType('');
    setBuilderSourceContext('');
    setWorkoutBeingEdited(null);
    setSelectedWorkout(null);
    setShowAllPlans(true);
  };

  const handleAddEffort = (type: string, date?: string) => {
    setBuilderType(type);
    setBuilderSourceContext('');
    setWorkoutBeingEdited(null);
    setSelectedWorkout(null);
    
    if (date) {
      setSelectedDate(date);
    }
    
    const cameFromSummary = showSummary;
    
    if (type === 'strength_logger' || type === 'log-strength') {
      setShowStrengthLogger(true);
    } else {
      setShowBuilder(true);
    }
    
    if (cameFromSummary) {
      setShowSummary(false);
      setDateWorkouts([]);
      setCurrentWorkoutIndex(0);
    }
  };

  const handleSelectEffortType = (type: string) => {
    setBuilderType(type);
    setBuilderSourceContext('');
    setWorkoutBeingEdited(null);
    setSelectedWorkout(null);
    
    if (type === 'strength_logger' || type === 'log-strength') {
      setShowStrengthLogger(true);
    } else {
      setShowBuilder(true);
    }
  };

  const handleViewCompleted = () => {
    console.log('View completed workouts');
  };

  const handleSelectRoutine = (routineId: string) => {
    setSelectedWorkout(null);
    setShowAllPlans(true);
  };

  const handleSelectDiscipline = (discipline: string) => {
    setSelectedWorkout(null);
    
    if (discipline === 'strength') {
      setShowStrengthPlans(true);
    } else {
      setShowAllPlans(true);
    }
  };

  const handlePlanSelect = (plan: any) => {
    setSelectedWorkout(null);
    setShowAllPlans(false);
  };

  const handleBuildWorkout = (type: string, sourceContext?: string) => {
    setBuilderType(type);
    setBuilderSourceContext(sourceContext || '');
    setWorkoutBeingEdited(null);
    setSelectedWorkout(null);
    setShowAllPlans(false);
    setShowStrengthPlans(false);
    setShowBuilder(true);
  };

  const handlePlanGenerated = async (newPlan: any) => {
    try {
      await addPlan(newPlan);
      setShowPlanBuilder(false);
      setShowAllPlans(true);
    } catch (error) {
      console.error('Error saving plan:', error);
      alert('Error saving plan. Please try again.');
    }
  };

  const handlePlanDeleted = async (planId: string) => {
    try {
      const planWorkouts = workouts?.filter(w => {
        const matchesId = w.planId === planId;
        const matchesPattern = w.name && (
          w.name.includes('Week 1') || 
          w.name.includes('Week 2') || 
          w.name.includes('Week 3') || 
          w.name.includes('Week 4')
        );
        return matchesId || matchesPattern;
      }) || [];
      
      for (const workout of planWorkouts) {
        try {
          await deleteWorkout(workout.id);
        } catch (error) {
          console.error('Error deleting workout:', workout.id, error);
        }
      }
      
      await deletePlan(planId);
      setShowAllPlans(true);
      
    } catch (error) {
      console.error('Error deleting plan:', error);
      alert('Error deleting plan. Please try again.');
    }
  };

  // Dead simple swipe detection
  const handleSwipeLeft = () => {
    if (!showSummary) {
      const workoutsForDate = workouts?.filter(w => w.date === selectedDate) || [];
      setDateWorkouts(workoutsForDate);
      setCurrentWorkoutIndex(0);
      setShowSummary(true);
    }
  };

  const handleSwipeRight = () => {
    if (showSummary) {
      setShowSummary(false);
      setDateWorkouts([]);
      setCurrentWorkoutIndex(0);
    }
  };

  // Show import page
  if (showImportPage) {
    return (
      <FitFileImporter 
        onWorkoutsImported={handleWorkoutsImported}
      />
    );
  }

  if (loading) {
    return (
      <div className="mobile-app-container">
        <div className="flex items-center justify-center h-full">
          <div className="text-lg">Loading...</div>
        </div>
      </div>
    );
  }

  const currentWorkout = dateWorkouts[currentWorkoutIndex];

  return (
    <div className="mobile-app-container">
      <header className="mobile-header">
        <div className="w-full">
          <div className="flex items-center justify-between h-16 w-full">
            <div className="flex items-center space-x-1 pl-4">
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="icon" className="p-0.5">
                    <Menu className="h-5 w-5" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="start" className="w-56">
                  <DropdownMenuItem>
                    <User className="mr-2 h-4 w-4" />
                    Profile
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <Settings className="mr-2 h-4 w-4" />
                    Connect Devices
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={handleImportClick}>
                    <Upload className="mr-2 h-4 w-4" />
                    Import
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <Upload className="mr-2 h-4 w-4" />
                    Export Data
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    Help & Support
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={onLogout}>
                    Sign Out
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
              
              <h1 className="text-2xl font-bold text-primary">efforts</h1>
              
              {(selectedWorkout || showStrengthLogger || showBuilder || showAllPlans || showStrengthPlans || showPlanBuilder) && !showSummary && (
                <Button
                  onClick={handleBackToDashboard}
                  variant="ghost"
                  className="text-sm font-medium hover:bg-gray-50"
                  style={{fontFamily: 'Inter, sans-serif'}}
                >
                  Dashboard
                </Button>
              )}
            </div>

            <div className="flex items-center">
            </div>

            <div className="flex items-center pr-4">
              {!(selectedWorkout || showStrengthLogger || showBuilder || showAllPlans || showStrengthPlans || showPlanBuilder || showSummary) && (
                <span className="text-lg font-normal text-muted-foreground" style={{fontFamily: 'Inter, sans-serif'}}>
                  {formatHeaderDate()}
                </span>
              )}
            </div>
          </div>
        </div>
      </header>

      <main className="mobile-main-content">
        <div className="w-full max-w-sm mx-auto px-4 sm:max-w-md md:max-w-4xl md:px-6">
          {showPlanBuilder ? (
            <div className="pt-4">
              <PlanBuilder 
                onClose={handleBackToDashboard}
                onPlanGenerated={handlePlanGenerated}
              />
            </div>
          ) : showStrengthPlans ? (
            <div className="pt-4">
              <StrengthPlansView
                onClose={handleBackToDashboard}
                onBuildWorkout={handleBuildWorkout}
              />
            </div>
          ) : showAllPlans ? (
            <div className="pt-4">
              <AllPlansInterface
                onClose={handleBackToDashboard}
                onSelectPlan={handlePlanSelect}
                onBuildWorkout={handleBuildWorkout}
                currentPlans={currentPlans}
                completedPlans={completedPlans}
                detailedPlans={detailedPlans}
                onDeletePlan={handlePlanDeleted}
              />
            </div>
          ) : showStrengthLogger ? (
            <div className="pt-4">
              <StrengthLogger onClose={handleBackToDashboard} />
            </div>
          ) : showBuilder ? (
            <div className="pt-4">
              <WorkoutBuilder
                onClose={handleBackToDashboard}
                initialType={builderType}
                existingWorkout={workoutBeingEdited}
                initialDate={selectedDate}
                sourceContext={builderSourceContext}
                onNavigateToPlans={handleNavigateToPlans}
              />
            </div>
          ) : selectedWorkout ? (
            <div className="pt-4">
              <WorkoutDetail
                workout={selectedWorkout}
                onUpdateWorkout={handleUpdateWorkout}
                activeTab={activeTab}
                onTabChange={setActiveTab}
                onClose={handleBackToDashboard}
              />
            </div>
          ) : (
            <div 
              ref={containerRef}
              className="relative w-full h-full"
              style={{
                overflow: 'hidden'
              }}
            >
              {/* Swipe capture overlay - only visible during potential swipes */}
              {isSwipeDetected && (
                <div 
                  className="absolute inset-0 z-50"
                  style={{
                    backgroundColor: 'transparent',
                    pointerEvents: 'auto'
                  }}
                />
              )}
              
              <div 
                ref={wrapperRef}
                className="flex h-full"
                style={{
                  width: '200%',
                  transform: `translateX(${transform}%)`,
                  transition: 'transform 0.4s cubic-bezier(0.25, 0.8, 0.25, 1)',
                  willChange: 'transform',
                  backfaceVisibility: 'hidden',
                  WebkitBackfaceVisibility: 'hidden'
                }}
              >
                {/* Calendar Panel */}
                <div className="w-1/2 flex-shrink-0">
                  <div className="space-y-2 pt-4">
                    <TodaysEffort
                      selectedDate={selectedDate}
                      onAddEffort={handleAddEffort}
                      onViewCompleted={handleViewCompleted}
                      onEditEffort={handleEditEffort}
                    />
                    <WorkoutCalendar
                      onAddEffort={handleAddEffort}
                      onSelectType={handleSelectEffortType}
                      onSelectWorkout={handleEditEffort}
                      onViewCompleted={handleViewCompleted}
                      onEditEffort={handleEditEffort}
                      onDateSelect={handleDateSelect}
                      onSelectRoutine={handleSelectRoutine}
                      onSelectDiscipline={handleSelectDiscipline}
                      onOpenPlanBuilder={handleOpenPlanBuilder}
                      isSwipingHorizontally={isSwipeDetected}
                      currentPlans={currentPlans}
                      completedPlans={completedPlans}
                    />
                  </div>
                </div>

                {/* Summary Panel */}
                <div className="w-1/2 flex-shrink-0">
                  <div className="pt-4">
                    {currentWorkout ? (
                      <WorkoutSummary 
                        workout={currentWorkout} 
                        onClose={() => {
                          setShowSummary(false);
                          setDateWorkouts([]);
                          setCurrentWorkoutIndex(0);
                        }}
                        onDelete={handleDeleteWorkout}
                      />
                    ) : showSummary ? (
                      <div className="flex flex-col items-center justify-center py-16 px-4">
                        <h2 className="text-lg font-medium mb-4">No workouts for this date</h2>
                        <p className="text-muted-foreground mb-8 text-center">
                          Add a workout to get started
                        </p>
                        <div className="flex flex-col items-center gap-4">
                          <NewEffortDropdown 
                            onSelectType={(type) => {
                              setShowSummary(false);
                              handleAddEffort(type, selectedDate);
                            }}
                            onOpenPlanBuilder={handleOpenPlanBuilder}
                          />
                          
                          <button
                            onClick={() => {
                              setShowSummary(false);
                              setDateWorkouts([]);
                              setCurrentWorkoutIndex(0);
                            }}
                            className="text-sm text-muted-foreground hover:text-foreground transition-colors"
                          >
                            ← Back to calendar
                          </button>
                        </div>
                      </div>
                    ) : null}
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </main>
    </div>
  );
};

export default AppLayout;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/AuthWrapper.tsx
import React, { useState, useEffect } from 'react';
import { supabase } from '@/lib/supabase';
import LoginForm from './LoginForm';
import RegisterForm from './RegisterForm';
import AppLayout from './AppLayout';

const AuthWrapper: React.FC = () => {
  const [user, setUser] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [showRegister, setShowRegister] = useState(false);

  useEffect(() => {
    // Check if user is already logged in
    const checkUser = async () => {
      try {
        const { data: { user } } = await supabase.auth.getUser();
        setUser(user);
      } catch (error) {
        console.error('Error checking user:', error);
      } finally {
        setLoading(false);
      }
    };

    checkUser();

    // Listen for auth state changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('Auth state changed:', event, session?.user?.email);
        setUser(session?.user ?? null);
        setLoading(false);
      }
    );

    return () => subscription.unsubscribe();
  }, []);

  const handleLogout = async () => {
    try {
      await supabase.auth.signOut();
      setUser(null);
    } catch (error) {
      console.error('Error signing out:', error);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-white">
        <div className="text-lg">Loading...</div>
      </div>
    );
  }

  // If user is logged in, show the main app
  if (user) {
    return <AppLayout onLogout={handleLogout} />;
  }

  // If not logged in, show auth forms
  return (
    <div className="min-h-screen bg-white flex items-center justify-center px-4">
      <div className="w-full max-w-md">
        {showRegister ? (
          <RegisterForm 
            onSuccess={() => setShowRegister(false)}
            onSwitchToLogin={() => setShowRegister(false)}
          />
        ) : (
          <LoginForm 
            onSwitchToRegister={() => setShowRegister(true)}
          />
        )}
      </div>
    </div>
  );
};

export default AuthWrapper;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/BannerUpload.tsx
import React, { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Upload, X } from 'lucide-react';

interface BannerUploadProps {
  onBannerChange?: (imageUrl: string | null) => void;
}

export const BannerUpload: React.FC<BannerUploadProps> = ({ onBannerChange }) => {
  const [bannerImage, setBannerImage] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file && file.type.startsWith('image/')) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const imageUrl = e.target?.result as string;
        setBannerImage(imageUrl);
        onBannerChange?.(imageUrl);
      };
      reader.readAsDataURL(file);
    }
  };

  const removeBanner = () => {
    setBannerImage(null);
    onBannerChange?.(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <Card className="w-full mb-6">
      <CardContent className="p-4">
        {bannerImage ? (
          <div className="relative">
            <img 
              src={bannerImage} 
              alt="Banner" 
              className="w-full h-32 object-cover rounded-lg"
            />
            <Button
              variant="destructive"
              size="sm"
              className="absolute top-2 right-2"
              onClick={removeBanner}
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        ) : (
          <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
            <Upload className="mx-auto h-12 w-12 text-gray-400 mb-4" />
            <p className="text-gray-600 mb-4">Upload a PNG file to create a banner</p>
            <Button onClick={() => fileInputRef.current?.click()}>
              Choose File
            </Button>
          </div>
        )}
        <input
          ref={fileInputRef}
          type="file"
          accept="image/png,image/jpeg,image/jpg,image/gif"
          onChange={handleFileSelect}
          className="hidden"
        />
      </CardContent>
    </Card>
  );
};

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/CalendarHeader.tsx
import React from 'react';
import NewEffortDropdown from './NewEffortDropdown';
import LogEffortDropdown from './LogEffortDropdown';
import RoutinesDropdown from './RoutinesDropdown';
import AllEffortsDropdown from './AllEffortsDropdown';

interface CalendarHeaderProps {
  viewMode: 'month' | 'week';
  onViewModeChange: (mode: 'month' | 'week') => void;
  onAddEffort: () => void;
  onSelectType: (type: string) => void;
  onSelectWorkout: (workout: any) => void;
  onViewCompleted: () => void;
  onEditEffort: (workout: any) => void;
  onSelectRoutine?: (type: string) => void;
}

const CalendarHeader: React.FC<CalendarHeaderProps> = ({
  viewMode,
  onViewModeChange,
  onAddEffort,
  onSelectType,
  onSelectWorkout,
  onViewCompleted,
  onEditEffort,
  onSelectRoutine
}) => {
  console.log('🔧 CalendarHeader received onEditEffort:', !!onEditEffort);

  return (
    <div className="w-full flex justify-start items-center mb-6 md:mb-8 gap-1 flex-nowrap -ml-4">
      {/* 🚨 MORE LEFT: Bigger negative margin to shift further left */}
      <NewEffortDropdown onSelectType={onSelectType} />
      <LogEffortDropdown onSelectType={onSelectType} />
      <RoutinesDropdown onSelectRoutine={onSelectRoutine} />
      <AllEffortsDropdown onSelectWorkout={onSelectWorkout} />
    </div>
  );
};

export default CalendarHeader;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/CompletedTab.tsx
console.log('🚨 COMPLETEDTAB COMPONENT LOADED');
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { useAppContext } from '@/contexts/AppContext';

interface CompletedTabProps {
  workoutType: 'ride' | 'run' | 'swim' | 'strength';
  workoutData: any;
}

const CompletedTab: React.FC<CompletedTabProps> = ({ workoutType, workoutData }) => {
  const { useImperial } = useAppContext();
  const [selectedMetric, setSelectedMetric] = useState('hr');
  const [activeAnalyticsTab, setActiveAnalyticsTab] = useState('zones');

  // 🔍 DEBUG: Log what CompletedTab receives
  console.log('🔍 COMPLETEDTAB DEBUG - workoutData received:', workoutData);
  console.log('🔍 COMPLETEDTAB DEBUG - friendly_name:', workoutData.friendly_name);
  console.log('🔍 COMPLETEDTAB DEBUG - timestamp:', workoutData.timestamp);
  console.log('🔍 COMPLETEDTAB DEBUG - start_position_lat:', workoutData.start_position_lat);
  console.log('🔍 COMPLETEDTAB DEBUG - start_position_long:', workoutData.start_position_long);
  console.log('🔍 COMPLETEDTAB DEBUG - avg_temperature:', workoutData.metrics?.avg_temperature);
  console.log('🔍 COMPLETEDTAB DEBUG - total_timer_time:', workoutData.metrics?.total_timer_time);
  console.log('🔍 COMPLETEDTAB DEBUG - moving_time:', workoutData.moving_time);
  console.log('🔍 COMPLETEDTAB DEBUG - elapsed_time:', workoutData.elapsed_time);

  // Helper functions
  const safeNumber = (value: any): string => {
    if (value === null || value === undefined || isNaN(value)) return 'N/A';
    return String(value);
  };

  const formatDuration = (seconds: any): string => {
    const num = Number(seconds);
    if (num === null || num === undefined || isNaN(num) || num === 0) {
      return formatDuration(workoutData.duration || 0);
    }
    
    const hours = Math.floor(num / 3600);
    const minutes = Math.floor((num % 3600) / 60);
    const secs = num % 60;
    
    if (hours > 0) {
      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
    return `${minutes}:${secs.toString().padStart(2, '0')}`;
  };

  const formatDistance = (km: any): string => {
    const num = Number(km);
    if (!num || isNaN(num)) return '0.0';
    
    if (useImperial) {
      return (num * 0.621371).toFixed(1);
    }
    return num.toFixed(1);
  };

  const formatSpeed = (kmh: any): string => {
    const num = Number(kmh);
    if (!num || isNaN(num)) return '0.0';
    
    if (useImperial) {
      return (num * 0.621371).toFixed(1);
    }
    return num.toFixed(1);
  };

  const formatElevation = (m: any): string => {
    const num = Number(m);
    if (!num || isNaN(num) || num === 0) return '0';
    
    if (useImperial) {
      return Math.round(num * 3.28084).toString();
    }
    return num.toString();
  };

  const formatTemperature = (c: any): string => {
    console.log('🔍 formatTemperature called with:', c, typeof c);
    const num = Number(c);
    if (!num || isNaN(num)) {
      console.log('🔍 formatTemperature returning N/A because num is:', num, 'isNaN:', isNaN(num));
      return 'N/A';
    }
    
    // Always show Fahrenheit for now (settings toggle later)
    const f = Math.round((num * 9/5) + 32);
    console.log('🔍 formatTemperature converting:', num, '°C to', f, '°F');
    return `${f}°F`;
  };

  const formatTime = (timestamp: any): string => {
    console.log('🔍 formatTime called with:', timestamp, typeof timestamp);
    if (!timestamp) return 'N/A';
    const date = new Date(timestamp);
    const result = date.toLocaleTimeString('en-US', { 
      hour: 'numeric', 
      minute: '2-digit',
      hour12: true 
    });
    console.log('🔍 formatTime result:', result);
    return result;
  };

  const formatDate = (dateStr: any): string => {
    if (!dateStr) return 'N/A';
    const date = new Date(dateStr);
    return `${date.getMonth() + 1}/${date.getDate()}`;
  };

  const getCityFromCoordinates = (lat: any, lng: any): string => {
    console.log('🔍 getCityFromCoordinates called with:', lat, lng);
    // Simple coordinate to city lookup for major cities
    const latNum = Number(lat);
    const lngNum = Number(lng);
    
    if (!latNum || !lngNum) {
      console.log('🔍 getCityFromCoordinates returning Unknown - no valid coords');
      return 'Unknown';
    }
    
    // Los Angeles area
    if (latNum >= 33.7 && latNum <= 34.3 && lngNum >= -118.7 && lngNum <= -117.9) {
      console.log('🔍 getCityFromCoordinates returning Los Angeles');
      return 'Los Angeles';
    }
    
    console.log('🔍 getCityFromCoordinates returning Unknown - coords not in LA area');
    return 'Unknown';
  };

  const generateTitle = (): string => {
    const date = formatDate(workoutData.date);
    const city = getCityFromCoordinates(workoutData.start_position_lat, workoutData.start_position_long);
    const title = `${date} ${city} effort`;
    console.log('🔍 generateTitle result:', title);
    return title;
  };

  // 🏠 PRIMARY METRICS - Exactly 8 as shown in screenshot
  const primaryMetrics = [
    {
      label: 'Distance',
      value: formatDistance(workoutData.distance),
      unit: useImperial ? 'mi' : 'mi'
    },
    {
      label: 'Duration', 
      value: formatDuration(workoutData.duration)
    },
    {
      label: 'Heart Rate',
      value: workoutData.metrics?.avg_heart_rate ? safeNumber(workoutData.metrics.avg_heart_rate) : 'N/A',
      unit: 'bpm'
    },
    {
      label: 'Power',
      value: workoutData.metrics?.avg_power ? safeNumber(workoutData.metrics.avg_power) : 'N/A',
      unit: 'W'
    },
    {
      label: 'Speed',
      value: formatSpeed(workoutData.metrics?.avg_speed),
      unit: useImperial ? 'mph' : 'mph'
    },
    {
      label: 'Cadence',
      value: workoutData.metrics?.avg_cadence ? safeNumber(workoutData.metrics.avg_cadence) : 'N/A',
      unit: 'rpm'
    },
    {
      label: 'Elevation',
      value: formatElevation(workoutData.elevation_gain || workoutData.metrics?.elevation_gain),
      unit: useImperial ? 'ft' : 'ft'
    },
    {
      label: 'Calories',
      value: workoutData.metrics?.calories ? safeNumber(workoutData.metrics.calories) : 'N/A',
      unit: 'cal'
    }
  ];

  // 🏠 ADVANCED METRICS - 6 metrics as shown in screenshot
  const advancedMetrics = [
    {
      label: 'Max HR',
      value: workoutData.metrics?.max_heart_rate ? safeNumber(workoutData.metrics.max_heart_rate) : 'N/A',
      unit: 'bpm'
    },
    {
      label: 'Max Power',
      value: workoutData.metrics?.max_power ? safeNumber(workoutData.metrics.max_power) : 'N/A',
      unit: 'W'
    },
    {
      label: 'Max Speed',
      value: workoutData.metrics?.max_speed ? formatSpeed(workoutData.metrics.max_speed) : 'N/A',
      unit: useImperial ? 'mph' : 'mph'
    },
    {
      label: 'Max Cadence',
      value: workoutData.metrics?.max_cadence ? safeNumber(workoutData.metrics.max_cadence) : 'N/A',
      unit: 'rpm'
    },
    {
      label: 'TSS',
      value: workoutData.metrics?.training_stress_score ? safeNumber(Math.round(workoutData.metrics.training_stress_score * 10) / 10) : 'N/A'
    },
    {
      label: 'Intensity Factor',
      value: workoutData.metrics?.intensity_factor ? `${safeNumber(workoutData.metrics.intensity_factor)}%` : 'N/A'
    }
  ];

  // 🏠 TRAINING METRICS - Pull real data from FIT file, remove Weighted Avg Power
  const calculateTotalWork = () => {
    console.log('🔍 calculateTotalWork - total_work:', workoutData.metrics?.total_work);
    // Use total_work from FIT file if available (in Joules), convert to kJ
    if (workoutData.metrics?.total_work) {
      const kj = Math.round(Number(workoutData.metrics.total_work) / 1000);
      console.log('🔍 calculateTotalWork using total_work:', kj, 'kJ');
      return `${kj} kJ`;
    }
    // Fallback calculation if total_work not available
    else if (workoutData.metrics?.avg_power && workoutData.duration) {
      const kj = Math.round((workoutData.metrics.avg_power * workoutData.duration) / 1000);
      console.log('🔍 calculateTotalWork using fallback calc:', kj, 'kJ');
      return `${kj} kJ`;
    }
    console.log('🔍 calculateTotalWork returning N/A');
    return 'N/A';
  };

  const calculateVAM = () => {
    console.log('🔍 calculateVAM - avg_vam:', workoutData.metrics?.avg_vam);
    // Use avg_vam from FIT file if available
    if (workoutData.metrics?.avg_vam) {
      const vam = Math.round(Number(workoutData.metrics.avg_vam) * 1000); // Convert to m/h
      console.log('🔍 calculateVAM using avg_vam:', vam, 'm/h');
      return `${vam} m/h`;
    }
    // Fallback calculation
    else if (workoutData.elevation_gain && workoutData.duration) {
      const elevationM = Number(workoutData.elevation_gain);
      const durationHours = workoutData.duration / 3600;
      const vam = Math.round(elevationM / durationHours);
      console.log('🔍 calculateVAM using fallback calc:', vam, 'm/h');
      return `${vam} m/h`;
    }
    console.log('🔍 calculateVAM returning N/A');
    return 'N/A';
  };

  const formatMovingTime = () => {
    console.log('🔍 formatMovingTime checking:', {
      total_timer_time: workoutData.metrics?.total_timer_time,
      moving_time: workoutData.moving_time,
      elapsed_time: workoutData.elapsed_time
    });
    // Use total_timer_time from FIT file - this is the actual moving time
    if (workoutData.metrics?.total_timer_time) {
      console.log('🔍 formatMovingTime using total_timer_time');
      return formatDuration(workoutData.metrics.total_timer_time);
    } else if (workoutData.moving_time) {
      console.log('🔍 formatMovingTime using moving_time');
      return formatDuration(workoutData.moving_time);
    } else if (workoutData.elapsed_time) {
      console.log('🔍 formatMovingTime using elapsed_time');
      return formatDuration(workoutData.elapsed_time);
    }
    console.log('🔍 formatMovingTime returning N/A');
    return 'N/A';
  };

  const trainingMetrics = [
    {
      label: 'Normalized Power',
      value: workoutData.metrics?.normalized_power ? `${safeNumber(workoutData.metrics.normalized_power)} W` : 'N/A'
    },
    {
      label: 'Training Load',
      value: workoutData.metrics?.training_stress_score ? safeNumber(Math.round(workoutData.metrics.training_stress_score)) : 'N/A'
    },
    {
      label: 'Total Work',
      value: calculateTotalWork()
    },
    {
      label: 'VAM',
      value: calculateVAM()
    },
    {
      label: 'Moving Time',
      value: formatMovingTime()
    }
  ];

  return (
    <div className="space-y-8" style={{fontFamily: 'Inter, sans-serif'}}>
      
      {/* 🏠 TITLE AND WEATHER HEADER */}
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold text-black">
          {generateTitle()}
        </h1>
        <div className="flex items-center gap-4 text-lg">
          <span className="text-black">
            {formatTime(workoutData.date || workoutData.timestamp)}
          </span>
          <span className="text-black">
            {formatTemperature(workoutData.metrics?.avg_temperature)}
          </span>
        </div>
      </div>
      
      {/* 🏠 PRIMARY METRICS - 8 metrics in mobile-responsive grid */}
      <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4">
        {primaryMetrics.map((metric, index) => (
          <div key={index} className="p-4">
            <div className="text-2xl font-semibold text-black mb-1" style={{fontFeatureSettings: '"tnum"'}}>
              {metric.value}
            </div>
            <div className="text-xs text-[#666666] font-normal">
              {metric.unit && <div className="text-xs text-[#666666]">{metric.unit}</div>}
              <div className="font-medium">{metric.label}</div>
            </div>
          </div>
        ))}
      </div>

      {/* 🏠 ADVANCED METRICS SECTION */}
      <div>
        <h3 className="text-lg font-semibold mb-4 text-black">Advanced Metrics</h3>
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
          {advancedMetrics.map((metric, index) => (
            <div key={index} className="p-4">
              <div className="text-lg font-semibold text-black mb-1" style={{fontFeatureSettings: '"tnum"'}}>
                {metric.value}
              </div>
              <div className="text-xs text-[#666666] font-normal">
                {metric.unit && <div className="text-xs text-[#666666]">{metric.unit}</div>}
                <div className="font-medium">{metric.label}</div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* 🏠 TRAINING METRICS SECTION */}
      <div>
        <h3 className="text-lg font-semibold mb-4 text-black">Training Metrics</h3>
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
          {trainingMetrics.map((metric, index) => (
            <div key={index} className="p-4">
              <div className="text-lg font-semibold text-black mb-1" style={{fontFeatureSettings: '"tnum"'}}>
                {metric.value}
              </div>
              <div className="text-xs text-[#666666] font-normal">
                {metric.label}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* 🎛️ CHART TABS AND SHOW CHART BUTTON */}
      <div className="flex items-center justify-between">
        <div className="flex gap-2 flex-wrap">
          {['Heart Rate', 'Speed', 'Power', 'VAM'].map((metric) => (
            <Button
              key={metric.toLowerCase().replace(' ', '')}
              onClick={() => setSelectedMetric(metric.toLowerCase().replace(' ', ''))}
              className={`px-4 py-2 text-sm font-medium ${
                selectedMetric === metric.toLowerCase().replace(' ', '')
                  ? 'bg-black text-white'
                  : 'bg-white text-black hover:bg-gray-100'
              }`}
            >
              {metric}
            </Button>
          ))}
        </div>
        
        <Button className="px-6 py-2 bg-white text-black hover:bg-gray-100 border">
          Show Chart
        </Button>
      </div>

      {/* 🗺️ GPS ROUTE MAP SECTION */}
      <div>
        <h3 className="text-lg font-semibold mb-4 text-black">GPS Route Map</h3>
        <div className="h-80 border border-gray-200 rounded-lg relative overflow-hidden">
          {/* Placeholder for GPS route - would be replaced with actual map component */}
          <div className="absolute inset-0 bg-gray-50 flex items-center justify-center">
            <svg width="100%" height="100%" viewBox="0 0 800 300" className="absolute inset-0">
              {/* Simple route visualization as placeholder */}
              <path
                d="M50,150 Q200,100 300,120 T500,140 Q600,160 750,180"
                stroke="#ef4444"
                strokeWidth="3"
                fill="none"
                strokeLinecap="round"
              />
              <path
                d="M100,200 Q250,180 350,190 T550,200 Q650,210 700,220"
                stroke="#ef4444"
                strokeWidth="3"
                fill="none"
                strokeLinecap="round"
              />
              <circle cx="80" cy="200" r="6" fill="#ef4444" />
            </svg>
          </div>
        </div>
      </div>

      {/* 📊 DETAILED ANALYTICS SECTION */}
      <div className="space-y-8 border-t border-gray-200 pt-8">
        
        {/* ANALYTICS TABS */}
        <div className="flex gap-6 text-sm">
          <button 
            onClick={() => setActiveAnalyticsTab('zones')}
            className={`pb-1 ${activeAnalyticsTab === 'zones' ? 'text-black font-medium border-b-2 border-black' : 'text-[#666666] hover:text-black'}`}
          >
            Zones
          </button>
          <button 
            onClick={() => setActiveAnalyticsTab('powercurve')}
            className={`pb-1 ${activeAnalyticsTab === 'powercurve' ? 'text-black font-medium border-b-2 border-black' : 'text-[#666666] hover:text-black'}`}
          >
            Power Curve
          </button>
          <button 
            onClick={() => setActiveAnalyticsTab('powerdetails')}
            className={`pb-1 ${activeAnalyticsTab === 'powerdetails' ? 'text-black font-medium border-b-2 border-black' : 'text-[#666666] hover:text-black'}`}
          >
            Power Details
          </button>
          <button 
            onClick={() => setActiveAnalyticsTab('userprofile')}
            className={`pb-1 ${activeAnalyticsTab === 'userprofile' ? 'text-black font-medium border-b-2 border-black' : 'text-[#666666] hover:text-black'}`}
          >
            User Profile
          </button>
          <button 
            onClick={() => setActiveAnalyticsTab('norwegian')}
            className={`pb-1 ${activeAnalyticsTab === 'norwegian' ? 'text-black font-medium border-b-2 border-black' : 'text-[#666666] hover:text-black'}`}
          >
            Norwegian
          </button>
        </div>

        {/* TAB CONTENT */}
        {activeAnalyticsTab === 'zones' && (
          <div>
            {/* HEART RATE & POWER ZONES */}
            <div>
              <h3 className="text-lg font-semibold mb-4 text-black">Heart Rate & Power Zones</h3>
              
              <div className="p-6">
                <h4 className="font-medium text-black mb-3">Zone Analysis</h4>
                <p className="text-sm text-[#666666]">Zone analysis will be displayed here...</p>
              </div>
            </div>
          </div>
        )}

        {activeAnalyticsTab === 'powercurve' && (
          <div>
            <h3 className="text-lg font-semibold mb-4 text-black">Power Curve Analysis</h3>
            <div className="p-6">
              <p className="text-sm text-[#666666]">Power curve analysis will be displayed here...</p>
            </div>
          </div>
        )}

        {activeAnalyticsTab === 'userprofile' && (
          <div>
            <h3 className="text-lg font-semibold mb-4 text-black">User Profile</h3>
            <div className="p-6">
              <p className="text-sm text-[#666666]">User profile data will be displayed here...</p>
            </div>
          </div>
        )}

        {activeAnalyticsTab === 'powerdetails' && (
          <div>
            <h3 className="text-lg font-semibold mb-4 text-black">Power Details</h3>
            <div className="p-6">
              <p className="text-sm text-[#666666]">Cycling power details will be displayed here...</p>
            </div>
          </div>
        )}

        {activeAnalyticsTab === 'norwegian' && (
          <div>
            <h3 className="text-lg font-semibold mb-4 text-black">Norwegian Method</h3>
            <div className="p-6">
              <p className="text-sm text-[#666666]">Norwegian method analysis will be displayed here...</p>
            </div>
          </div>
        )}

        {/* OVERVIEW SECTION */}
        <div>
          <h3 className="text-lg font-semibold mb-6 text-black">Overview</h3>
          
          {/* 7-Day Training Load */}
          <div className="p-6 mb-6">
            <h4 className="font-medium text-black mb-3">7-Day Training Load</h4>
            <p className="text-sm text-[#333333] mb-3">
              Cycling: 340 TSS • Running: 185 TSS • Strength: 95 Load • Swimming: 120 TSS
            </p>
            <p className="text-sm text-[#666666]">
              Your Tuesday/Thursday strength sessions correlate with 7% power improvement on weekend rides.
            </p>
          </div>

          {/* 6-Week Progression */}
          <div className="p-6 mb-6">
            <h4 className="font-medium text-black mb-3">6-Week Progression</h4>
            <p className="text-sm text-[#333333] mb-3">
              FTP: +12W (4.9%) • Threshold HR: -3 bpm • VO2 Max: +1.2 ml/kg/min
            </p>
            <p className="text-sm text-[#666666]">
              Strong aerobic development trend. Swimming easy days appear to enhance running recovery, with 15% faster HR 
              recovery after run intervals following swim sessions.
            </p>
          </div>

          {/* Recovery Status */}
          <div className="p-6 mb-6">
            <h4 className="font-medium text-black mb-3">Recovery Status</h4>
            <p className="text-sm text-[#333333] mb-3">
              Current Training Stress Balance: -24 (Optimal: -10 to -30)
            </p>
            <p className="text-sm text-[#666666]">
              Good training adaptation window. Your heavy squat sessions (Tuesday) show 18-hour recovery time before power 
              metrics return to baseline. Schedule easy spins Wednesday.
            </p>
          </div>

          {/* Cross-Training Correlations */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="p-6">
              <h4 className="font-medium text-black mb-3 flex items-center">
                🏃 Run ↔ Bike Correlation
              </h4>
              <p className="text-sm text-[#666666]">
                Your run cadence improvement (+3 rpm avg) coincides with bike power gains. Neuromuscular patterns 
                transferring between disciplines.
              </p>
            </div>
            
            <div className="p-6">
              <h4 className="font-medium text-black mb-3 flex items-center">
                🏊 Swim Recovery Impact
              </h4>
              <p className="text-sm text-[#666666]">
                Easy swim sessions reduce next-day resting HR by avg 4 bpm. Active recovery significantly enhancing 
                adaptation.
              </p>
            </div>
          </div>
        </div>

        {/* WORKOUT DATA */}
        <div className="border-t border-gray-200 pt-6">
          <h3 className="text-lg font-semibold mb-4 text-black">Workout Data</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 text-sm">
            <div>
              <span className="text-[#666666]">Date: </span>
              <span className="text-black">
                {workoutData.date ? new Date(workoutData.date).toLocaleDateString() : 'N/A'}
              </span>
            </div>
            <div>
              <span className="text-[#666666]">Device: </span>
              <span className="text-black capitalize">
                {workoutData.friendly_name || workoutData.deviceInfo?.manufacturer || 'N/A'}
              </span>
            </div>
            <div>
              <span className="text-[#666666]">Activity: </span>
              <span className="text-black capitalize">{workoutData.type || 'Ride'}</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CompletedTab;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/CycleIntervalBuilder.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Plus, Copy, Trash2, GripVertical } from 'lucide-react';

export interface CycleInterval {
  id: string;
  targetWatts?: number;
  targetFTP?: number;
  targetCadence?: number;
  duration: string;
  recoveryWatts?: number;
  recoveryTime: string;
  repeatCount: number;
}

interface CycleIntervalBuilderProps {
  intervals: CycleInterval[];
  onChange: (intervals: CycleInterval[]) => void;
  isMetric: boolean;
}

export default function CycleIntervalBuilder({ intervals, onChange, isMetric }: CycleIntervalBuilderProps) {
  const addInterval = () => {
    const newInterval: CycleInterval = {
      id: Date.now().toString(),
      duration: '',
      recoveryTime: '',
      repeatCount: 1
    };
    onChange([...intervals, newInterval]);
  };

  const updateInterval = (id: string, updates: Partial<CycleInterval>) => {
    onChange(intervals.map(interval => 
      interval.id === id ? { ...interval, ...updates } : interval
    ));
  };

  const duplicateInterval = (id: string) => {
    const interval = intervals.find(i => i.id === id);
    if (interval) {
      const duplicate = { ...interval, id: Date.now().toString() };
      onChange([...intervals, duplicate]);
    }
  };

  const deleteInterval = (id: string) => {
    onChange(intervals.filter(interval => interval.id !== id));
  };

  const formatTime = (timeStr: string): string => {
    if (!timeStr || !timeStr.includes(':')) return timeStr;
    const [min, sec] = timeStr.split(':');
    const totalSec = parseInt(min) * 60 + parseInt(sec);
    return `${Math.floor(totalSec/60)} min`;
  };

  const generatePreview = (interval: CycleInterval) => {
    const target = interval.targetFTP ? `@ ${interval.targetFTP}% FTP` : 
                  interval.targetWatts ? `@ ${interval.targetWatts}W` : '';
    const cadence = interval.targetCadence ? ` @ ${interval.targetCadence} rpm` : '';
    const recovery = interval.recoveryWatts ? `@ ${interval.recoveryWatts}W` : '@ 50% FTP';
    
    const workTime = formatTime(interval.duration) || interval.duration;
    const recTime = formatTime(interval.recoveryTime) || interval.recoveryTime;
    
    return `${interval.repeatCount} x (${workTime} ${target}${cadence} w/ ${recTime} ${recovery} recovery)`;
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          Cycling Intervals
          <Button onClick={addInterval} size="sm">
            <Plus className="h-4 w-4 mr-2" />
            Add Interval
          </Button>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {intervals.map((interval, index) => (
          <Card key={interval.id} className="p-4">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-2">
                <GripVertical className="h-4 w-4 text-muted-foreground" />
                <h4 className="font-medium">Interval {index + 1}</h4>
              </div>
              <div className="flex gap-2">
                <Button onClick={() => duplicateInterval(interval.id)} size="sm" variant="outline">
                  <Copy className="h-4 w-4" />
                </Button>
                <Button onClick={() => deleteInterval(interval.id)} size="sm" variant="outline">
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </div>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
              <div>
                <Label>Target Watts</Label>
                <Input
                  type="number"
                  placeholder="250"
                  value={interval.targetWatts || ''}
                  onChange={(e) => updateInterval(interval.id, { targetWatts: parseInt(e.target.value) || undefined })}
                />
              </div>
              <div>
                <Label>Target % FTP</Label>
                <Input
                  type="number"
                  placeholder="90"
                  value={interval.targetFTP || ''}
                  onChange={(e) => updateInterval(interval.id, { targetFTP: parseInt(e.target.value) || undefined })}
                />
              </div>
              <div>
                <Label>Target Cadence</Label>
                <Input
                  type="number"
                  placeholder="85"
                  value={interval.targetCadence || ''}
                  onChange={(e) => updateInterval(interval.id, { targetCadence: parseInt(e.target.value) || undefined })}
                />
              </div>
              <div>
                <Label>Repeat Count</Label>
                <Input
                  type="number"
                  min="1"
                  value={interval.repeatCount}
                  onChange={(e) => updateInterval(interval.id, { repeatCount: parseInt(e.target.value) || 1 })}
                />
              </div>
            </div>
            
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-4">
              <div>
                <Label>Duration (mm:ss)</Label>
                <Input
                  placeholder="5:00"
                  value={interval.duration}
                  onChange={(e) => updateInterval(interval.id, { duration: e.target.value })}
                />
              </div>
              <div>
                <Label>Recovery Time (mm:ss)</Label>
                <Input
                  placeholder="2:00"
                  value={interval.recoveryTime}
                  onChange={(e) => updateInterval(interval.id, { recoveryTime: e.target.value })}
                />
              </div>
              <div>
                <Label>Recovery Watts</Label>
                <Input
                  type="number"
                  placeholder="125"
                  value={interval.recoveryWatts || ''}
                  onChange={(e) => updateInterval(interval.id, { recoveryWatts: parseInt(e.target.value) || undefined })}
                />
              </div>
            </div>
            
            <div className="bg-muted p-3 rounded text-sm">
              <strong>Preview:</strong> {generatePreview(interval)}
            </div>
          </Card>
        ))}
        
        {intervals.length === 0 && (
          <div className="text-center py-8 text-muted-foreground">
            No intervals added yet. Click "Add Interval" to get started.
          </div>
        )}
      </CardContent>
    </Card>
  );
}

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/FilteredWorkoutList.tsx
import React, { useState, useMemo } from 'react';
import { useAppContext } from '@/contexts/AppContext';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Activity, Dumbbell, Waves, Trash2, Bike } from 'lucide-react';
import WorkoutTypeFilter from './WorkoutTypeFilter';

interface FilteredWorkoutListProps {
  onWorkoutSelect?: (workout: any) => void;
}

const FilteredWorkoutList: React.FC<FilteredWorkoutListProps> = ({ onWorkoutSelect }) => {
  const { workouts, deleteWorkout } = useAppContext();
  const [selectedType, setSelectedType] = useState<'all' | 'run' | 'ride' | 'strength' | 'swim'>('all');

  const filteredWorkouts = useMemo(() => {
    if (selectedType === 'all') return workouts;
    return workouts.filter(workout => workout.type === selectedType);
  }, [workouts, selectedType]);

  const workoutCounts = useMemo(() => {
    return {
      all: workouts.length,
      run: workouts.filter(w => w.type === 'run').length,
      ride: workouts.filter(w => w.type === 'ride').length,
      strength: workouts.filter(w => w.type === 'strength').length,
      swim: workouts.filter(w => w.type === 'swim').length
    };
  }, [workouts]);

  const handleDelete = async (id: string, e: React.MouseEvent) => {
    e.stopPropagation();
    if (confirm('Are you sure you want to delete this workout?')) {
      await deleteWorkout(id);
    }
  };

  const getWorkoutIcon = (type: string) => {
    switch (type) {
      case 'run':
        return <Activity className="h-5 w-5 text-blue-500" />;
      case 'ride':
        return <Bike className="h-5 w-5 text-orange-500" />;
      case 'strength':
        return <Dumbbell className="h-5 w-5 text-green-500" />;
      case 'swim':
        return <Waves className="h-5 w-5 text-cyan-500" />;
      default:
        return <Activity className="h-5 w-5 text-gray-500" />;
    }
  };

  const getTypeDisplayName = (type: string) => {
    switch (type) {
      case 'run':
        return 'Running Sessions';
      case 'ride':
        return 'Cycling Sessions';
      case 'strength':
        return 'Strength Training Sessions';
      case 'swim':
        return 'Swimming Sessions';
      default:
        return 'All Training Sessions';
    }
  };

  return (
    <div className="space-y-6">
      <WorkoutTypeFilter
        selectedType={selectedType}
        onTypeChange={setSelectedType}
        workoutCounts={workoutCounts}
      />
      
      {filteredWorkouts.length === 0 ? (
        <Card>
          <CardContent className="pt-6 text-center text-muted-foreground">
            {selectedType === 'all' ? (
              <p>No workouts yet. Create your first workout!</p>
            ) : (
              <p>No {selectedType} workouts found. Try a different training type.</p>
            )}
          </CardContent>
        </Card>
      ) : (
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold">
              {getTypeDisplayName(selectedType)}
            </h3>
            <Badge variant="outline">{filteredWorkouts.length} sessions</Badge>
          </div>
          
          {filteredWorkouts.map((workout) => (
            <Card 
              key={workout.id} 
              className="cursor-pointer hover:shadow-md transition-shadow"
              onClick={() => onWorkoutSelect?.(workout)}
            >
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2">
                    {getWorkoutIcon(workout.type)}
                    {workout.name}
                  </CardTitle>
                  <div className="flex items-center gap-2">
                    <Badge variant={workout.workout_status === 'completed' ? 'default' : 'secondary'}>
                      {workout.workout_status || 'planned'}
                    </Badge>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={(e) => handleDelete(workout.id, e)}
                      className="text-red-500 hover:text-red-700"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="flex items-center justify-between text-sm text-muted-foreground">
                  <span>{new Date(workout.date).toLocaleDateString()}</span>
                  <span>{workout.duration} minutes</span>
                  {workout.type === 'swim' && workout.swimData?.totalDistance && (
                    <span>{workout.swimData.totalDistance}m</span>
                  )}
                  {(workout.type === 'run' || workout.type === 'ride') && workout.distance && (
                    <span>{workout.distance.toFixed(1)} km</span>
                  )}
                </div>
                {workout.description && (
                  <p className="mt-2 text-sm text-gray-600 line-clamp-2">{workout.description}</p>
                )}
                {workout.type === 'swim' && workout.swimData && (
                  <div className="mt-2 text-sm text-gray-600">
                    <span className="font-medium">{workout.swimData.strokeType}</span>
                    {workout.swimData.targetPacePer100 && (
                      <span className="ml-2">• Target: {workout.swimData.targetPacePer100}/100m</span>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
};

export default FilteredWorkoutList;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/FitFileImporter.tsx
import React, { useState, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Upload, File, CheckCircle, AlertCircle, Info } from 'lucide-react';

interface FitFileImporterProps {
  onWorkoutsImported: (workouts: any[]) => void;
}

interface ImportedWorkout {
  id: string;
  name: string;
  type: string;
  date: string;
  duration: number;
  distance?: number;
  
  // 🆕 NEW TOP-LEVEL FIELDS for CompletedTab
  timestamp?: string;
  start_position_lat?: number;
  start_position_long?: number;
  friendly_name?: string;
  moving_time?: number;
  elapsed_time?: number;
  
  metrics: {
    // EXISTING FIELDS
    avg_heart_rate?: number;
    max_heart_rate?: number;
    avg_power?: number;
    max_power?: number;
    normalized_power?: number;
    calories?: number;
    elevation_gain?: number;
    avg_speed?: number;
    max_speed?: number;
    avg_cadence?: number;
    max_cadence?: number;
    training_stress_score?: number;
    intensity_factor?: number;
    avg_temperature?: number;
    max_temperature?: number;
    
    // 🆕 NEW TIME DATA
    total_timer_time?: number;
    total_elapsed_time?: number;
    
    // 🆕 NEW WORK/ENERGY
    total_work?: number;
    
    // 🆕 NEW ELEVATION
    total_descent?: number;
    
    // 🆕 NEW PERFORMANCE
    avg_vam?: number;
    total_training_effect?: number;
    total_anaerobic_effect?: number;
    
    // 🆕 NEW ZONES DATA
    functional_threshold_power?: number;
    threshold_heart_rate?: number;
    hr_calc_type?: string;
    pwr_calc_type?: string;
    
    // 🆕 NEW USER PROFILE DATA
    age?: number;
    weight?: number;
    height?: number;
    gender?: string;
    default_max_heart_rate?: number;
    resting_heart_rate?: number;
    dist_setting?: string;
    weight_setting?: string;
    
    // 🆕 NEW CYCLING DETAILS DATA
    avg_fractional_cadence?: number;
    avg_left_pedal_smoothness?: number;
    avg_left_torque_effectiveness?: number;
    max_fractional_cadence?: number;
    left_right_balance?: number;
    threshold_power?: number;
    total_cycles?: number;
  };
  
  deviceInfo: {
    manufacturer?: string;
    product?: string;
  };
}

// Load the fit-file-parser library dynamically
const loadFitParser = async () => {
  if (window.FitParser) {
    return window.FitParser;
  }

  return new Promise((resolve, reject) => {
    const script = document.createElement('script');
    script.src = 'https://cdn.skypack.dev/fit-file-parser';
    script.type = 'module';
    script.onload = () => {
      // The library exports as default, but we need to access it properly
      import('https://cdn.skypack.dev/fit-file-parser')
        .then(module => {
          window.FitParser = module.default;
          resolve(module.default);
        })
        .catch(reject);
    };
    script.onerror = () => reject(new Error('Failed to load FIT parser library'));
    document.head.appendChild(script);
  });
};

// Sport type mapping from FIT to our app types
const mapFitSportToAppType = (sport: string): string => {
  if (!sport) return 'ride'; // Default to ride for cycling files
  
  const sportLower = sport.toLowerCase();
  
  if (sportLower.includes('cycling') || sportLower.includes('biking') || sport === 'cycling') {
    return 'ride';
  } else if (sportLower.includes('running') || sport === 'running') {
    return 'run';
  } else if (sportLower.includes('swimming') || sport === 'swimming') {
    return 'swim';
  } else if (sportLower.includes('strength') || sportLower.includes('training') || sportLower.includes('fitness')) {
    return 'strength';
  } else {
    console.log(`Unknown sport "${sport}", defaulting to 'ride'`);
    return 'ride';
  }
};

const FitFileImporter: React.FC<FitFileImporterProps> = ({ onWorkoutsImported }) => {
  const [isDragOver, setIsDragOver] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [processedFiles, setProcessedFiles] = useState<ImportedWorkout[]>([]);
  const [errors, setErrors] = useState<string[]>([]);
  const [parserLoaded, setParserLoaded] = useState(false);

  // Initialize the FIT parser
  React.useEffect(() => {
    loadFitParser()
      .then(() => {
        setParserLoaded(true);
        console.log('FIT parser loaded successfully');
      })
      .catch(error => {
        console.error('Failed to load FIT parser:', error);
        setErrors(['Failed to load FIT file parser. Please refresh the page and try again.']);
      });
  }, []);

  const parseFitFile = async (file: File): Promise<ImportedWorkout> => {
    if (!window.FitParser) {
      throw new Error('FIT parser not loaded');
    }

    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      
      reader.onload = (e) => {
        try {
          const arrayBuffer = e.target?.result as ArrayBuffer;
          
          // Create FitParser instance with optimal settings
          const fitParser = new window.FitParser({
            force: true,
            speedUnit: 'km/h',
            lengthUnit: 'km',
            temperatureUnit: 'celsius',
            pressureUnit: 'bar',
            elapsedRecordField: true,
            mode: 'both', // Use 'both' mode like the examples show
          });

          fitParser.parse(arrayBuffer, (error: any, data: any) => {
            if (error) {
              console.error('FIT parsing error:', error);
              reject(new Error(`Failed to parse FIT file: ${error.message || error}`));
              return;
            }

            try {
              console.log('🔍 FULL RAW FIT DATA:', data);
              
              // 🔧 DEBUG: Check what data structure we actually get
              console.log('DEBUG - data.sessions exists?', !!data.sessions);
              console.log('DEBUG - data.sessions type:', typeof data.sessions);  
              console.log('DEBUG - data.sessions length:', data.sessions?.length);
              console.log('DEBUG - ALL DATA KEYS:', Object.keys(data));
              
              // 🆕 NEW: Debug ALL possible data structures
              console.log('🔍 ZONES DEBUG - data.zones_target:', data.zones_target);
              console.log('🔍 ZONES DEBUG - data.zones:', data.zones);
              console.log('🔍 ZONES DEBUG - data.zone_target:', data.zone_target);
              console.log('🔍 USER DEBUG - data.user_profile:', data.user_profile);
              console.log('🔍 USER DEBUG - data.user:', data.user);
              console.log('🔍 DEVICE DEBUG - data.device_info:', data.device_info);
              console.log('🔍 DEVICE DEBUG - data.device:', data.device);
              console.log('🔍 FILE DEBUG - data.file_id:', data.file_id);
              console.log('🔍 FILE DEBUG - data.file_creator:', data.file_creator);
              
              // 🔍 DEBUG: Log the session object completely
              if (data.sessions && data.sessions[0]) {
                console.log('🔍 FULL SESSION OBJECT:', data.sessions[0]);
                console.log('🔍 SESSION KEYS:', Object.keys(data.sessions[0]));
              }
              
              // 🔧 FIXED: Extract date from the correct location - prioritize local_timestamp
              let workoutDate = new Date().toISOString().split('T')[0]; // fallback to today
              let workoutTimestamp = null;
              
              console.log('🔧 DEBUG: Available timestamps:', {
                local_timestamp: data.local_timestamp,
                timestamp: data.timestamp,
                sessions_start_time: data.sessions?.[0]?.start_time
              });
              
              if (data.local_timestamp) {
                const dateObj = new Date(data.local_timestamp);
                workoutDate = dateObj.getFullYear() + '-' + 
                  String(dateObj.getMonth() + 1).padStart(2, '0') + '-' + 
                  String(dateObj.getDate()).padStart(2, '0');
                workoutTimestamp = data.local_timestamp;
                console.log('✅ Using local_timestamp for date:', workoutDate);
              } else if (data.timestamp) {
                const dateObj = new Date(data.timestamp);
                workoutDate = dateObj.getFullYear() + '-' + 
                  String(dateObj.getMonth() + 1).padStart(2, '0') + '-' + 
                  String(dateObj.getDate()).padStart(2, '0');
                workoutTimestamp = data.timestamp;
                console.log('✅ Using timestamp for date:', workoutDate);
              } else if (data.sessions && data.sessions[0] && data.sessions[0].start_time) {
                const dateObj = new Date(data.sessions[0].start_time);
                workoutDate = dateObj.getFullYear() + '-' + 
                  String(dateObj.getMonth() + 1).padStart(2, '0') + '-' + 
                  String(dateObj.getDate()).padStart(2, '0');
                workoutTimestamp = data.sessions[0].start_time;
                console.log('✅ Using sessions[0].start_time for date:', workoutDate);
              } else {
                console.log('⚠️ No timestamp found, using today:', workoutDate);
              }

              // 🔧 FIXED: Extract session data from the correct location
              let session = null;
              if (data.sessions && Array.isArray(data.sessions) && data.sessions.length > 0) {
                session = data.sessions[0];
                console.log('✅ Found sessions[0]:', session);
              } else {
                console.log('❌ No sessions array found, trying alternatives');
                console.log('DEBUG - Looking for alternative session data...');
                
                // Try alternative paths based on different parser modes
                if (data.activity) {
                  session = data.activity;
                  console.log('✅ Using data.activity as session:', session);
                } else if (data.session) {
                  session = data.session;
                  console.log('✅ Using data.session as session:', session);
                } else {
                  console.log('❌ No session data found in any location');
                  session = {}; // Create empty session to prevent crash
                }
              }

              // 🔧 FIXED: Extract sport from the correct location
              let sport = 'cycling'; // default
              if (data.sports && Array.isArray(data.sports) && data.sports[0] && data.sports[0].sport) {
                sport = data.sports[0].sport;
                console.log('✅ Found sport in sports array:', sport);
              } else if (session.sport) {
                sport = session.sport;
                console.log('✅ Found sport in session:', sport);
              } else {
                console.log('⚠️ No sport found, using default:', sport);
              }
              
              const workoutType = mapFitSportToAppType(sport);
              console.log('✅ Mapped sport to app type:', sport, '→', workoutType);

              // 🔧 FIXED: Extract duration from session and ensure it's a valid number
              const duration = session.total_elapsed_time ? Math.round(Number(session.total_elapsed_time)) : 
                              session.total_timer_time ? Math.round(Number(session.total_timer_time)) : 
                              0;
              console.log('✅ Extracted duration:', duration, 'seconds');

              // 🔧 FIXED: Extract distance from session and ensure it's a valid number or null
              const distance = session.total_distance ? 
                Math.round(Number(session.total_distance) * 100) / 100 : 
                null;
              console.log('✅ Extracted distance:', distance, 'km');

              // 🆕 NEW: Extract location data for title generation
              const startPositionLat = session.start_position_lat ? Number(session.start_position_lat) : null;
              const startPositionLong = session.start_position_long ? Number(session.start_position_long) : null;
              console.log('✅ Extracted location:', { lat: startPositionLat, lng: startPositionLong });

              // 🆕 NEW: Extract device friendly name (from user_profile)
              const friendlyName = data.user_profile?.friendly_name || 
                                 data.device_info?.friendly_name || 
                                 data.file_creator?.friendly_name || 
                                 data.file_id?.friendly_name ||
                                 null;
              console.log('✅ Extracted friendly_name:', friendlyName);

              // 🔧 CRITICAL FIX: Check multiple possible elevation field names
              let elevationGain = null;
              let elevationLoss = null;
              console.log('🔧 DEBUG: Checking all elevation fields in session:');
              console.log('  session.total_ascent:', session.total_ascent);
              console.log('  session.elevation_gain:', session.elevation_gain);
              console.log('  session.ascent:', session.ascent);
              console.log('  session.total_elevation_gain:', session.total_elevation_gain);
              console.log('  session.enhanced_ascent:', session.enhanced_ascent);
              console.log('  session.total_descent:', session.total_descent);
              
              if (session.total_ascent) {
                // 🔧 CRITICAL FIX: total_ascent is in kilometers, convert to meters
                elevationGain = Math.round(Number(session.total_ascent) * 1000);
                console.log('✅ Using total_ascent for elevation:', elevationGain, 'meters (converted from', session.total_ascent, 'km)');
              } else if (session.elevation_gain) {
                elevationGain = Math.round(Number(session.elevation_gain));
                console.log('✅ Using elevation_gain for elevation:', elevationGain);
              } else if (session.ascent) {
                elevationGain = Math.round(Number(session.ascent));
                console.log('✅ Using ascent for elevation:', elevationGain);
              } else if (session.total_elevation_gain) {
                elevationGain = Math.round(Number(session.total_elevation_gain));
                console.log('✅ Using total_elevation_gain for elevation:', elevationGain);
              } else if (session.enhanced_ascent) {
                elevationGain = Math.round(Number(session.enhanced_ascent));
                console.log('✅ Using enhanced_ascent for elevation:', elevationGain);
              } else {
                console.log('❌ No elevation gain field found in session');
              }

              // 🆕 NEW: Extract elevation loss/descent
              if (session.total_descent) {
                elevationLoss = Math.round(Number(session.total_descent));
                console.log('✅ Extracted elevation loss:', elevationLoss, 'meters');
              }

              // 🆕 NEW: Extract zones data
              const zonesData = data.zones_target || {};
              console.log('🆕 DEBUG: Zones data:', zonesData);

              // 🆕 NEW: Extract user profile data
              const userProfile = data.user_profile || {};
              console.log('🆕 DEBUG: User profile data:', userProfile);

              // 🔧 FIXED: Extract all metrics directly from session object and sanitize for database
              const metrics = {
                // EXISTING Heart Rate - ensure numbers or null
                avg_heart_rate: session.avg_heart_rate ? Number(session.avg_heart_rate) : null,
                max_heart_rate: session.max_heart_rate ? Number(session.max_heart_rate) : null,
                
                // EXISTING Power (cycling) - ensure numbers or null
                avg_power: session.avg_power ? Number(session.avg_power) : null,
                max_power: session.max_power ? Number(session.max_power) : null,
                normalized_power: session.normalized_power ? Number(session.normalized_power) : null,
                
                // EXISTING Calories & Energy - ensure numbers or null
                calories: session.total_calories ? Number(session.total_calories) : null,
                
                // 🔧 FIXED: Use the elevation value we found from multiple possible fields
                elevation_gain: elevationGain,
                
                // EXISTING Speed - ensure numbers or null
                avg_speed: session.enhanced_avg_speed ? Number(session.enhanced_avg_speed) : 
                          session.avg_speed ? Number(session.avg_speed) : null,
                max_speed: session.enhanced_max_speed ? Number(session.enhanced_max_speed) : 
                          session.max_speed ? Number(session.max_speed) : null,
                
                // EXISTING Cadence - ensure numbers or null
                avg_cadence: session.avg_cadence ? Number(session.avg_cadence) : null,
                max_cadence: session.max_cadence ? Number(session.max_cadence) : null,
                
                // EXISTING Advanced Training Metrics - ensure numbers or null
                training_stress_score: session.training_stress_score ? Number(session.training_stress_score) : null,
                // 🔧 CRITICAL FIX: Convert intensity_factor from decimal to percentage (0.498 → 50)
                intensity_factor: session.intensity_factor ? Math.round(Number(session.intensity_factor) * 100) : null,
                
                // EXISTING Temperature - ensure numbers or null
                avg_temperature: session.avg_temperature ? Number(session.avg_temperature) : null,
                max_temperature: session.max_temperature ? Number(session.max_temperature) : null,

                // 🆕 NEW TIME DATA
                total_timer_time: session.total_timer_time ? Number(session.total_timer_time) : null,
                total_elapsed_time: session.total_elapsed_time ? Number(session.total_elapsed_time) : null,

                // 🆕 NEW WORK/ENERGY
                total_work: session.total_work ? Number(session.total_work) : null,

                // 🆕 NEW ELEVATION
                total_descent: elevationLoss,

                // 🆕 NEW PERFORMANCE
                avg_vam: session.avg_vam ? Number(session.avg_vam) : null,
                total_training_effect: session.total_training_effect ? Number(session.total_training_effect) : null,
                total_anaerobic_effect: session.total_anaerobic_effect ? Number(session.total_anaerobic_effect) : null,

                // 🆕 NEW ZONES DATA (from zones_target object)
                functional_threshold_power: zonesData.functional_threshold_power ? Number(zonesData.functional_threshold_power) : null,
                threshold_heart_rate: zonesData.threshold_heart_rate ? Number(zonesData.threshold_heart_rate) : null,
                hr_calc_type: zonesData.hr_calc_type || null,
                pwr_calc_type: zonesData.pwr_calc_type || null,

                // 🆕 NEW USER PROFILE DATA (from user_profile object)
                age: userProfile.age ? Number(userProfile.age) : null,
                weight: userProfile.weight ? Number(userProfile.weight) : null,
                height: userProfile.height ? Number(userProfile.height) : null,
                gender: userProfile.gender || null,
                default_max_heart_rate: userProfile.default_max_heart_rate ? Number(userProfile.default_max_heart_rate) : null,
                resting_heart_rate: userProfile.resting_heart_rate ? Number(userProfile.resting_heart_rate) : null,
                dist_setting: userProfile.dist_setting || null,
                weight_setting: userProfile.weight_setting || null,

                // 🆕 NEW CYCLING DETAILS DATA (from session object)
                avg_fractional_cadence: session.avg_fractional_cadence ? Number(session.avg_fractional_cadence) : null,
                avg_left_pedal_smoothness: session.avg_left_pedal_smoothness ? Number(session.avg_left_pedal_smoothness) : null,
                avg_left_torque_effectiveness: session.avg_left_torque_effectiveness ? Number(session.avg_left_torque_effectiveness) : null,
                max_fractional_cadence: session.max_fractional_cadence ? Number(session.max_fractional_cadence) : null,
                left_right_balance: session.left_right_balance ? Number(session.left_right_balance) : null,
                threshold_power: session.threshold_power ? Number(session.threshold_power) : null,
                total_cycles: session.total_cycles ? Number(session.total_cycles) : null,
              };

              console.log('✅ Extracted metrics from session:', metrics);
              console.log('🔧 DEBUG - Individual metric values:');
              console.log('  avg_heart_rate:', typeof metrics.avg_heart_rate, metrics.avg_heart_rate);
              console.log('  avg_power:', typeof metrics.avg_power, metrics.avg_power);
              console.log('  elevation_gain:', typeof metrics.elevation_gain, metrics.elevation_gain, 'meters');
              console.log('  intensity_factor:', typeof metrics.intensity_factor, metrics.intensity_factor, '(converted from decimal to percentage)');
              console.log('  duration:', typeof duration, duration);
              console.log('  distance:', typeof distance, distance);
              console.log('🆕 NEW FIELDS:');
              console.log('  total_work:', metrics.total_work);
              console.log('  avg_vam:', metrics.avg_vam);
              console.log('  total_timer_time:', metrics.total_timer_time);
              console.log('  start_position_lat:', startPositionLat);
              console.log('  start_position_long:', startPositionLong);
              console.log('  friendly_name:', friendlyName);

              // Create the workout object with proper data types for database
              const workout: ImportedWorkout = {
                id: `fit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                name: file.name.replace('.fit', '').replace(/[_-]/g, ' '),
                type: workoutType,
                date: workoutDate,
                duration: duration,
                distance: distance,
                
                // 🆕 NEW TOP-LEVEL FIELDS
                timestamp: workoutTimestamp,
                start_position_lat: startPositionLat,
                start_position_long: startPositionLong,
                friendly_name: friendlyName,
                moving_time: metrics.total_timer_time, // moving time is typically total_timer_time
                elapsed_time: metrics.total_elapsed_time,
                
                // ALL METRICS (existing + new)
                metrics: {
                  // EXISTING FIELDS
                  avg_heart_rate: metrics.avg_heart_rate,
                  max_heart_rate: metrics.max_heart_rate,
                  avg_power: metrics.avg_power,
                  max_power: metrics.max_power,
                  normalized_power: metrics.normalized_power,
                  calories: metrics.calories,
                  elevation_gain: metrics.elevation_gain,
                  avg_speed: metrics.avg_speed,
                  max_speed: metrics.max_speed,
                  avg_cadence: metrics.avg_cadence,
                  max_cadence: metrics.max_cadence,
                  training_stress_score: metrics.training_stress_score,
                  intensity_factor: metrics.intensity_factor,
                  avg_temperature: metrics.avg_temperature,
                  max_temperature: metrics.max_temperature,
                  
                  // 🆕 NEW FIELDS
                  total_timer_time: metrics.total_timer_time,
                  total_elapsed_time: metrics.total_elapsed_time,
                  total_work: metrics.total_work,
                  total_descent: metrics.total_descent,
                  avg_vam: metrics.avg_vam,
                  total_training_effect: metrics.total_training_effect,
                  total_anaerobic_effect: metrics.total_anaerobic_effect,
                  functional_threshold_power: metrics.functional_threshold_power,
                  threshold_heart_rate: metrics.threshold_heart_rate,
                  hr_calc_type: metrics.hr_calc_type,
                  pwr_calc_type: metrics.pwr_calc_type,
                  age: metrics.age,
                  weight: metrics.weight,
                  height: metrics.height,
                  gender: metrics.gender,
                  default_max_heart_rate: metrics.default_max_heart_rate,
                  resting_heart_rate: metrics.resting_heart_rate,
                  dist_setting: metrics.dist_setting,
                  weight_setting: metrics.weight_setting,
                  avg_fractional_cadence: metrics.avg_fractional_cadence,
                  avg_left_pedal_smoothness: metrics.avg_left_pedal_smoothness,
                  avg_left_torque_effectiveness: metrics.avg_left_torque_effectiveness,
                  max_fractional_cadence: metrics.max_fractional_cadence,
                  left_right_balance: metrics.left_right_balance,
                  threshold_power: metrics.threshold_power,
                  total_cycles: metrics.total_cycles,
                },
                deviceInfo: {
                  manufacturer: data.file_id?.manufacturer || data.file_creator?.software_version || 'Unknown',
                  product: data.file_id?.product || 'FIT Device'
                }
              };

              console.log('✅ Created workout from FIT data:', workout);
              console.log('📊 Final extracted metrics:', workout.metrics);
              console.log('🆕 NEW FIELDS Summary:', {
                timestamp: workout.timestamp,
                location: { lat: workout.start_position_lat, lng: workout.start_position_long },
                friendly_name: workout.friendly_name,
                total_work: workout.metrics.total_work,
                avg_vam: workout.metrics.avg_vam,
                total_timer_time: workout.metrics.total_timer_time
              });
              resolve(workout);
              
            } catch (processingError) {
              console.error('Error processing FIT data:', processingError);
              reject(new Error(`Error processing workout data: ${processingError.message}`));
            }
          });
          
        } catch (parseError) {
          console.error('Error reading FIT file:', parseError);
          reject(new Error(`Error reading file: ${parseError.message}`));
        }
      };
      
      reader.onerror = () => {
        reject(new Error('Failed to read file'));
      };
      
      reader.readAsArrayBuffer(file);
    });
  };

  const handleDrop = useCallback(async (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
    
    if (!parserLoaded) {
      setErrors(['FIT parser is still loading. Please wait a moment and try again.']);
      return;
    }
    
    const files = Array.from(e.dataTransfer.files);
    const fitFiles = files.filter(file => 
      file.name.toLowerCase().endsWith('.fit')
    );
    
    if (fitFiles.length === 0) {
      setErrors(['Please drop only .fit files']);
      return;
    }
    
    setIsProcessing(true);
    setErrors([]);
    const processedWorkouts: ImportedWorkout[] = [];
    const processingErrors: string[] = [];
    
    for (const file of fitFiles) {
      try {
        console.log(`Processing FIT file: ${file.name}`);
        const workout = await parseFitFile(file);
        processedWorkouts.push(workout);
        console.log(`Successfully processed: ${file.name}`);
      } catch (error) {
        console.error(`Error processing ${file.name}:`, error);
        processingErrors.push(`${file.name}: ${error instanceof Error ? error.message : 'Unknown error'}`);
      }
    }
    
    setProcessedFiles(processedWorkouts);
    setErrors(processingErrors);
    setIsProcessing(false);
    
    if (processedWorkouts.length > 0) {
      onWorkoutsImported(processedWorkouts);
    }
  }, [onWorkoutsImported, parserLoaded]);

  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(true);
  }, []);

  const handleDragLeave = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
  }, []);

  const handleFileInput = useCallback(async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!parserLoaded) {
      setErrors(['FIT parser is still loading. Please wait a moment and try again.']);
      return;
    }
    
    const files = Array.from(e.target.files || []);
    const fitFiles = files.filter(file => 
      file.name.toLowerCase().endsWith('.fit')
    );
    
    if (fitFiles.length === 0) {
      setErrors(['Please select only .fit files']);
      return;
    }
    
    setIsProcessing(true);
    setErrors([]);
    const processedWorkouts: ImportedWorkout[] = [];
    const processingErrors: string[] = [];
    
    for (const file of fitFiles) {
      try {
        console.log(`Processing FIT file: ${file.name}`);
        const workout = await parseFitFile(file);
        processedWorkouts.push(workout);
        console.log(`Successfully processed: ${file.name}`);
      } catch (error) {
        console.error(`Error processing ${file.name}:`, error);
        processingErrors.push(`${file.name}: ${error instanceof Error ? error.message : 'Unknown error'}`);
      }
    }
    
    setProcessedFiles(processedWorkouts);
    setErrors(processingErrors);
    setIsProcessing(false);
    
    if (processedWorkouts.length > 0) {
      onWorkoutsImported(processedWorkouts);
    }
  }, [onWorkoutsImported, parserLoaded]);

  return (
    <div className="w-full max-w-2xl mx-auto p-6">
      <div className="mb-6">
        <h2 className="text-2xl font-bold mb-2">Import FIT Files</h2>
        <p className="text-gray-600">
          Upload your .fit files from Garmin, Wahoo, or other devices. 
          All metrics including power, heart rate, elevation, location, zones, and user profile data will be extracted automatically.
        </p>
      </div>

      {/* Parser Status */}
      {!parserLoaded && (
        <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg flex items-center">
          <Info className="h-5 w-5 text-blue-500 mr-2 flex-shrink-0" />
          <span className="text-blue-700">Loading FIT file parser...</span>
        </div>
      )}

      {/* Drop Zone */}
      <div
        className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
          isDragOver 
            ? 'border-blue-500 bg-blue-50' 
            : parserLoaded 
              ? 'border-gray-300 hover:border-gray-400'
              : 'border-gray-200 bg-gray-50'
        }`}
        onDrop={handleDrop}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
      >
        <Upload className={`mx-auto h-12 w-12 mb-4 ${
          isDragOver 
            ? 'text-blue-500' 
            : parserLoaded 
              ? 'text-gray-400'
              : 'text-gray-300'
        }`} />
        
        {isProcessing ? (
          <div>
            <p className="text-lg font-medium mb-2">Processing FIT files...</p>
            <div className="animate-spin mx-auto h-6 w-6 border-2 border-blue-500 border-t-transparent rounded-full"></div>
          </div>
        ) : (
          <div>
            <p className="text-lg font-medium mb-2">
              {parserLoaded 
                ? 'Drop .fit files here or click to select' 
                : 'Loading FIT parser...'}
            </p>
            <p className="text-sm text-gray-500 mb-4">
              Automatically extracts sport type, power, heart rate, elevation, location, zones, user profile, and all training metrics
            </p>
            <input
              type="file"
              accept=".fit"
              multiple
              onChange={handleFileInput}
              className="hidden"
              id="file-input"
              disabled={!parserLoaded}
            />
            <label htmlFor="file-input">
              <Button className="cursor-pointer" disabled={!parserLoaded}>
                <File className="h-4 w-4 mr-2" />
                Select FIT Files
              </Button>
            </label>
          </div>
        )}
      </div>

      {/* Supported Metrics Info */}
      {parserLoaded && (
        <div className="mt-4 p-4 bg-gray-50 rounded-lg">
          <h4 className="font-medium mb-2">Automatically Extracted Metrics:</h4>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-2 text-sm text-gray-600">
            <div>• Activity Type & Location</div>
            <div>• Distance & Duration</div>
            <div>• Heart Rate (avg/max)</div>
            <div>• Power (avg/max/NP)</div>
            <div>• Speed & Pace</div>
            <div>• Cadence & Cycling Details</div>
            <div>• Elevation Gain/Loss</div>
            <div>• Calories & Total Work</div>
            <div>• Training Stress Score</div>
            <div>• Temperature & VAM</div>
            <div>• Intensity Factor</div>
            <div>• Device & User Profile</div>
            <div>• Training Zones Data</div>
            <div>• Power Curve Details</div>
          </div>
        </div>
      )}

      {/* Results */}
      {processedFiles.length > 0 && (
        <div className="mt-6">
          <h3 className="text-lg font-semibold mb-3 flex items-center">
            <CheckCircle className="h-5 w-5 text-green-500 mr-2" />
            Successfully Imported ({processedFiles.length})
          </h3>
          <div className="space-y-3">
            {processedFiles.map((workout, index) => (
              <div key={index} className="p-4 bg-green-50 border border-green-200 rounded-lg">
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <p className="font-medium">{workout.name}</p>
                    <p className="text-sm text-gray-600 mt-1">
                      <span className="font-medium">{workout.type.charAt(0).toUpperCase() + workout.type.slice(1)}</span>
                      {' • '}{workout.date}
                      {workout.duration > 0 && ` • ${Math.floor(workout.duration / 3600)}:${Math.floor((workout.duration % 3600) / 60).toString().padStart(2, '0')}:${(workout.duration % 60).toString().padStart(2, '0')}`}
                      {workout.distance && ` • ${workout.distance} km`}
                      {workout.start_position_lat && workout.start_position_long && ` • GPS`}
                    </p>
                    {/* Show key metrics */}
                    <div className="text-xs text-gray-500 mt-2 flex flex-wrap gap-3">
                      {workout.metrics.avg_heart_rate && (
                        <span>HR: {workout.metrics.avg_heart_rate} bpm</span>
                      )}
                      {workout.metrics.avg_power && (
                        <span>Power: {workout.metrics.avg_power}W</span>
                      )}
                      {workout.metrics.calories && (
                        <span>Calories: {workout.metrics.calories}</span>
                      )}
                      {workout.metrics.elevation_gain && (
                        <span>Elevation: {workout.metrics.elevation_gain}m</span>
                      )}
                      {workout.metrics.training_stress_score && (
                        <span>TSS: {workout.metrics.training_stress_score}</span>
                      )}
                      {workout.metrics.intensity_factor && (
                        <span>IF: {workout.metrics.intensity_factor}%</span>
                      )}
                      {workout.metrics.total_work && (
                        <span>Work: {Math.round(workout.metrics.total_work / 1000)}kJ</span>
                      )}
                      {workout.friendly_name && (
                        <span>Device: {workout.friendly_name}</span>
                      )}
                    </div>
                  </div>
                  <CheckCircle className="h-5 w-5 text-green-500 flex-shrink-0" />
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Errors */}
      {errors.length > 0 && (
        <div className="mt-6">
          <h3 className="text-lg font-semibold mb-3 flex items-center">
            <AlertCircle className="h-5 w-5 text-red-500 mr-2" />
            Errors ({errors.length})
          </h3>
          <div className="space-y-2">
            {errors.map((error, index) => (
              <div key={index} className="p-3 bg-red-50 border border-red-200 rounded-lg">
                <p className="text-sm text-red-700">{error}</p>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

// Extend window object for TypeScript
declare global {
  interface Window {
    FitParser: any;
  }
}

export default FitFileImporter;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/GarminAutoSync.tsx
import React, { useState, useEffect } from 'react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { RefreshCw, CheckCircle, Zap, Settings, WifiOff } from 'lucide-react';
import { supabase } from '@/lib/supabase';

interface GarminAutoSyncProps {
  onWorkoutImported?: (workout: any) => void;
}

const GarminAutoSync: React.FC<GarminAutoSyncProps> = ({ onWorkoutImported }) => {
  const [isListening, setIsListening] = useState(false);
  const [lastSync, setLastSync] = useState<Date | null>(null);
  const [status, setStatus] = useState<'idle' | 'active' | 'error'>('idle');

  useEffect(() => {
    checkAutoSyncStatus();
  }, []);

  const checkAutoSyncStatus = async () => {
    try {
      const { data } = await supabase
        .from('user_connections')
        .select('*')
        .eq('provider', 'garmin')
        .single();
      
      if (data?.connection_data?.seamless_settings?.auto_sync) {
        setIsListening(true);
        setStatus('active');
        setLastSync(data.connection_data.seamless_settings.last_auto_sync ? 
          new Date(data.connection_data.seamless_settings.last_auto_sync) : null);
      }
    } catch (error) {
      setStatus('idle');
    }
  };

  const getStatusIcon = () => {
    switch (status) {
      case 'active':
        return <CheckCircle className="h-4 w-4 text-green-600" />;
      case 'error':
        return <WifiOff className="h-4 w-4 text-red-600" />;
      default:
        return <Zap className="h-4 w-4 text-gray-400" />;
    }
  };

  const getTooltipContent = () => {
    switch (status) {
      case 'active':
        return (
          <div className="text-sm">
            <p className="font-medium text-green-600">Auto-sync Active</p>
            <p>Listening for Garmin workouts</p>
            {lastSync && (
              <p className="text-xs text-gray-500 mt-1">
                Last sync: {lastSync.toLocaleString()}
              </p>
            )}
          </div>
        );
      case 'error':
        return (
          <div className="text-sm">
            <p className="font-medium text-red-600">Sync Error</p>
            <p>Connection issue detected</p>
          </div>
        );
      default:
        return (
          <div className="text-sm">
            <p className="font-medium text-gray-600">Auto-sync Inactive</p>
            <p>Enable in Garmin setup to activate</p>
          </div>
        );
    }
  };

  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <div className="flex items-center gap-1">
            {getStatusIcon()}
            <Badge 
              variant={status === 'active' ? 'default' : 'secondary'}
              className="text-xs px-1 py-0"
            >
              {status === 'active' ? 'Sync' : 'Off'}
            </Badge>
          </div>
        </TooltipTrigger>
        <TooltipContent side="bottom" className="max-w-xs">
          {getTooltipContent()}
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
};

export default GarminAutoSync;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/GarminConnect.tsx
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Watch, CheckCircle, AlertCircle, RefreshCw } from 'lucide-react';
import { supabase } from '@/lib/supabase';

interface GarminConnectProps {
  onWorkoutsImported?: (workouts: any[]) => void;
}

const GarminConnect: React.FC<GarminConnectProps> = ({ onWorkoutsImported }) => {
  const [connectionStatus, setConnectionStatus] = useState<'disconnected' | 'connecting' | 'connected' | 'error'>('disconnected');
  const [lastSync, setLastSync] = useState<Date | null>(null);
  const [syncStatus, setSyncStatus] = useState<'idle' | 'syncing' | 'success' | 'error'>('idle');
  const [garminData, setGarminData] = useState<any>(null);

  useEffect(() => {
    checkConnectionStatus();
  }, []);

  const checkConnectionStatus = async () => {
    try {
      // Check if user has Garmin connection stored
      const { data, error } = await supabase
        .from('user_connections')
        .select('*')
        .eq('provider', 'garmin')
        .single();
      
      if (data && !error) {
        setConnectionStatus('connected');
        setLastSync(new Date(data.last_sync));
        setGarminData(data.connection_data);
      }
    } catch (error) {
      console.log('No existing Garmin connection found');
    }
  };

  const initiateGarminAuth = async () => {
    setConnectionStatus('connecting');
    
    try {
      // In a real implementation, this would redirect to Garmin OAuth
      // For demo purposes, we'll simulate the connection
      const authUrl = 'https://connect.garmin.com/oauth/authorize';
      const clientId = 'your-garmin-client-id';
      const redirectUri = window.location.origin + '/garmin-callback';
      const scope = 'read:activities,read:profile';
      
      const fullAuthUrl = `${authUrl}?client_id=${clientId}&redirect_uri=${redirectUri}&response_type=code&scope=${scope}`;
      
      // Open popup for OAuth
      const popup = window.open(fullAuthUrl, 'garmin-auth', 'width=600,height=600');
      
      // Listen for popup close or message
      const checkClosed = setInterval(() => {
        if (popup?.closed) {
          clearInterval(checkClosed);
          // Simulate successful connection for demo
          setTimeout(() => {
            setConnectionStatus('connected');
            setLastSync(new Date());
            saveConnectionData();
          }, 1000);
        }
      }, 1000);
      
    } catch (error) {
      setConnectionStatus('error');
      console.error('Garmin auth error:', error);
    }
  };

  const saveConnectionData = async () => {
    try {
      const connectionData = {
        provider: 'garmin',
        access_token: 'demo-token',
        refresh_token: 'demo-refresh',
        expires_at: new Date(Date.now() + 3600000).toISOString(),
        last_sync: new Date().toISOString(),
        connection_data: {
          user_id: 'garmin-user-123',
          display_name: 'Garmin User'
        }
      };
      
      await supabase
        .from('user_connections')
        .upsert(connectionData);
        
    } catch (error) {
      console.error('Error saving connection:', error);
    }
  };

  const syncWorkouts = async () => {
    setSyncStatus('syncing');
    
    try {
      // Simulate fetching workouts from Garmin
      const mockWorkouts = [
        {
          name: 'Morning Run',
          type: 'endurance',
          date: new Date().toISOString(),
          duration: 45,
          distance: 8.5,
          avg_heart_rate: 155,
          max_heart_rate: 172,
          calories: 420,
          avg_pace: 330, // seconds per km
          elevation_gain: 120
        },
        {
          name: 'Bike Ride',
          type: 'endurance', 
          date: new Date(Date.now() - 86400000).toISOString(),
          duration: 90,
          distance: 35.2,
          avg_heart_rate: 142,
          max_heart_rate: 165,
          avg_power: 185,
          max_power: 245,
          calories: 650,
          elevation_gain: 450
        }
      ];
      
      // Save to database
      for (const workout of mockWorkouts) {
        await supabase
          .from('workouts')
          .insert({
            ...workout,
            source: 'garmin',
            created_at: new Date().toISOString()
          });
      }
      
      setSyncStatus('success');
      setLastSync(new Date());
      onWorkoutsImported?.(mockWorkouts);
      
      setTimeout(() => setSyncStatus('idle'), 3000);
      
    } catch (error) {
      setSyncStatus('error');
      console.error('Sync error:', error);
      setTimeout(() => setSyncStatus('idle'), 3000);
    }
  };

  const disconnectGarmin = async () => {
    try {
      await supabase
        .from('user_connections')
        .delete()
        .eq('provider', 'garmin');
        
      setConnectionStatus('disconnected');
      setLastSync(null);
      setGarminData(null);
    } catch (error) {
      console.error('Disconnect error:', error);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Watch className="h-5 w-5" />
          Garmin Connect
          <Badge variant={connectionStatus === 'connected' ? 'default' : 'secondary'}>
            {connectionStatus === 'connected' ? 'Connected' : 'Disconnected'}
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {connectionStatus === 'disconnected' && (
          <div className="space-y-3">
            <p className="text-sm text-gray-600">
              Connect your Garmin account to automatically import your endurance workouts
            </p>
            <Button 
              onClick={initiateGarminAuth}
              disabled={connectionStatus === 'connecting'}
              className="w-full"
            >
              {connectionStatus === 'connecting' ? (
                <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
              ) : (
                <Watch className="h-4 w-4 mr-2" />
              )}
              {connectionStatus === 'connecting' ? 'Connecting...' : 'Connect Garmin Account'}
            </Button>
          </div>
        )}
        
        {connectionStatus === 'connected' && (
          <div className="space-y-3">
            <div className="flex items-center gap-2 text-sm text-green-600">
              <CheckCircle className="h-4 w-4" />
              Connected to Garmin Connect
            </div>
            
            {lastSync && (
              <p className="text-sm text-gray-600">
                Last sync: {lastSync.toLocaleString()}
              </p>
            )}
            
            <div className="flex gap-2">
              <Button 
                onClick={syncWorkouts}
                disabled={syncStatus === 'syncing'}
                className="flex-1"
              >
                {syncStatus === 'syncing' ? (
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <RefreshCw className="h-4 w-4 mr-2" />
                )}
                {syncStatus === 'syncing' ? 'Syncing...' : 'Sync Workouts'}
              </Button>
              
              <Button 
                variant="outline"
                onClick={disconnectGarmin}
                className="flex-1"
              >
                Disconnect
              </Button>
            </div>
            
            {syncStatus === 'success' && (
              <Alert>
                <CheckCircle className="h-4 w-4" />
                <AlertDescription className="text-green-600">
                  Workouts synced successfully!
                </AlertDescription>
              </Alert>
            )}
            
            {syncStatus === 'error' && (
              <Alert>
                <AlertCircle className="h-4 w-4" />
                <AlertDescription className="text-red-600">
                  Sync failed. Please try again.
                </AlertDescription>
              </Alert>
            )}
          </div>
        )}
        
        {connectionStatus === 'error' && (
          <Alert>
            <AlertCircle className="h-4 w-4" />
            <AlertDescription className="text-red-600">
              Failed to connect to Garmin. Please try again.
            </AlertDescription>
          </Alert>
        )}
        
        <div className="text-xs text-gray-500 space-y-1">
          <p><strong>What gets imported:</strong></p>
          <ul className="list-disc list-inside space-y-1">
            <li>Running, cycling, and other endurance activities</li>
            <li>Heart rate, power, pace, and distance data</li>
            <li>Elevation, calories, and training metrics</li>
            <li>Automatic workout categorization</li>
          </ul>
        </div>
      </CardContent>
    </Card>
  );
};

export default GarminConnect;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/GarminExport.tsx
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Download, Watch, Smartphone } from 'lucide-react';
import { WorkoutInterval } from './WorkoutIntervals';

interface GarminExportProps {
  workoutName: string;
  intervals: WorkoutInterval[];
}

const GarminExport: React.FC<GarminExportProps> = ({ workoutName, intervals }) => {
  const [exportStatus, setExportStatus] = useState<'idle' | 'exporting' | 'success' | 'error'>('idle');

  const generateFITFile = () => {
    // Generate FIT file content (simplified structure)
    const fitData = {
      workout: {
        name: workoutName,
        sport: 'cycling', // or 'running'
        steps: intervals.map((interval, index) => ({
          step_name: interval.name,
          duration_type: interval.durationType === 'time' ? 'time' : 'distance',
          duration_value: interval.durationType === 'time' ? interval.duration * 60 : interval.duration * 1000, // seconds or meters
          target_type: getGarminTargetType(interval.intensityType),
          target_value_low: interval.intensityMin,
          target_value_high: interval.intensityMax,
          intensity: getGarminIntensity(interval.intensityType, interval.intensityMin, interval.intensityMax)
        }))
      }
    };
    
    return fitData;
  };

  const getGarminTargetType = (intensityType: string) => {
    switch (intensityType) {
      case 'heartRate': return 'heart_rate';
      case 'power': return 'power';
      case 'pace': return 'speed';
      case 'rpe': return 'heart_rate'; // RPE maps to HR zones
      default: return 'heart_rate';
    }
  };

  const getGarminIntensity = (type: string, min: number, max: number) => {
    // Map intensity to Garmin zones (1-5)
    if (type === 'rpe') {
      return Math.min(5, Math.max(1, Math.round((min + max) / 2)));
    }
    return 3; // Default to moderate intensity
  };

  const exportToGarmin = async () => {
    setExportStatus('exporting');
    
    try {
      const fitData = generateFITFile();
      
      // Create downloadable file
      const blob = new Blob([JSON.stringify(fitData, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${workoutName.replace(/\s+/g, '_')}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      setExportStatus('success');
      setTimeout(() => setExportStatus('idle'), 3000);
    } catch (error) {
      setExportStatus('error');
      setTimeout(() => setExportStatus('idle'), 3000);
    }
  };

  const connectToGarmin = () => {
    // In a real implementation, this would use Garmin Connect IQ SDK
    alert('Garmin Connect integration would require Garmin Connect IQ SDK setup');
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Watch className="h-5 w-5" />
          Garmin Export
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="text-sm text-gray-600">
          Export your structured workout to Garmin devices
        </div>
        
        {intervals.length === 0 && (
          <Alert>
            <AlertDescription>
              Add workout intervals to enable Garmin export
            </AlertDescription>
          </Alert>
        )}
        
        {intervals.length > 0 && (
          <div className="space-y-3">
            <div className="text-sm">
              <strong>Workout Summary:</strong>
              <ul className="mt-1 space-y-1">
                {intervals.map((interval, index) => (
                  <li key={interval.id} className="text-gray-600">
                    {index + 1}. {interval.name} - {interval.duration}
                    {interval.durationType === 'time' ? 'min' : 'km'} @ 
                    {interval.intensityMin}-{interval.intensityMax}
                    {interval.intensityType === 'heartRate' ? 'bpm' : 
                     interval.intensityType === 'power' ? 'W' :
                     interval.intensityType === 'pace' ? 'min/km' : 'RPE'}
                  </li>
                ))}
              </ul>
            </div>
            
            <div className="flex gap-2">
              <Button 
                onClick={exportToGarmin}
                disabled={exportStatus === 'exporting'}
                className="flex-1"
              >
                <Download className="h-4 w-4 mr-2" />
                {exportStatus === 'exporting' ? 'Exporting...' : 'Download Workout File'}
              </Button>
              
              <Button 
                variant="outline"
                onClick={connectToGarmin}
                className="flex-1"
              >
                <Smartphone className="h-4 w-4 mr-2" />
                Connect to Garmin
              </Button>
            </div>
            
            {exportStatus === 'success' && (
              <Alert>
                <AlertDescription className="text-green-600">
                  Workout file downloaded! Transfer to your Garmin device via Garmin Connect.
                </AlertDescription>
              </Alert>
            )}
            
            {exportStatus === 'error' && (
              <Alert>
                <AlertDescription className="text-red-600">
                  Export failed. Please try again.
                </AlertDescription>
              </Alert>
            )}
            
            <div className="text-xs text-gray-500">
              <strong>Instructions:</strong>
              <ol className="mt-1 space-y-1">
                <li>1. Download the workout file</li>
                <li>2. Open Garmin Connect on your phone/computer</li>
                <li>3. Import the workout to your training calendar</li>
                <li>4. Sync with your Garmin device</li>
              </ol>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default GarminExport;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/GarminSeamless.tsx
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { Zap, Watch, CheckCircle, Settings, Upload } from 'lucide-react';
import { supabase } from '@/lib/supabase';

interface GarminSeamlessProps {
  onAutoSyncChange?: (enabled: boolean) => void;
}

const GarminSeamless: React.FC<GarminSeamlessProps> = ({ onAutoSyncChange }) => {
  const [autoSync, setAutoSync] = useState(false);
  const [autoExport, setAutoExport] = useState(false);
  const [webhookEnabled, setWebhookEnabled] = useState(false);
  const [lastAutoSync, setLastAutoSync] = useState<Date | null>(null);
  const [status, setStatus] = useState<'idle' | 'setting-up' | 'active'>('idle');

  useEffect(() => {
    loadSeamlessSettings();
  }, []);

  const loadSeamlessSettings = async () => {
    try {
      const { data } = await supabase
        .from('user_connections')
        .select('*')
        .eq('provider', 'garmin')
        .single();
      
      if (data?.connection_data?.seamless_settings) {
        const settings = data.connection_data.seamless_settings;
        setAutoSync(settings.auto_sync || false);
        setAutoExport(settings.auto_export || false);
        setWebhookEnabled(settings.webhook_enabled || false);
        setLastAutoSync(settings.last_auto_sync ? new Date(settings.last_auto_sync) : null);
        setStatus(settings.webhook_enabled ? 'active' : 'idle');
      }
    } catch (error) {
      console.log('No seamless settings found');
    }
  };

  const setupSeamlessIntegration = async () => {
    setStatus('setting-up');
    
    try {
      // Setup webhook endpoint for real-time sync
      const response = await fetch('https://yyriamwvtvzlkumqrvpm.supabase.co/functions/v1/752a4e71-8616-490f-8006-8f310471e2c7', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'setup_webhook',
          webhook_url: `${window.location.origin}/api/garmin-webhook`,
          events: ['activity_created', 'workout_completed']
        })
      });
      
      if (response.ok) {
        setWebhookEnabled(true);
        setStatus('active');
        await saveSeamlessSettings();
      }
    } catch (error) {
      console.error('Webhook setup failed:', error);
      setStatus('idle');
    }
  };

  const saveSeamlessSettings = async () => {
    try {
      const settings = {
        auto_sync: autoSync,
        auto_export: autoExport,
        webhook_enabled: webhookEnabled,
        last_auto_sync: lastAutoSync?.toISOString()
      };
      
      await supabase
        .from('user_connections')
        .update({
          connection_data: {
            seamless_settings: settings
          }
        })
        .eq('provider', 'garmin');
    } catch (error) {
      console.error('Failed to save settings:', error);
    }
  };

  const toggleAutoSync = async (enabled: boolean) => {
    setAutoSync(enabled);
    onAutoSyncChange?.(enabled);
    await saveSeamlessSettings();
  };

  const toggleAutoExport = async (enabled: boolean) => {
    setAutoExport(enabled);
    await saveSeamlessSettings();
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Zap className="h-5 w-5" />
          Seamless Garmin Integration
          <Badge variant={status === 'active' ? 'default' : 'secondary'}>
            {status === 'active' ? 'Active' : 'Inactive'}
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="text-sm text-gray-600">
          Enable automatic, real-time sync between your Garmin device and this app
        </div>
        
        {status === 'idle' && (
          <div className="space-y-3">
            <Alert>
              <Settings className="h-4 w-4" />
              <AlertDescription>
                Set up seamless integration to automatically sync workouts and export training plans
              </AlertDescription>
            </Alert>
            
            <Button 
              onClick={setupSeamlessIntegration}
              disabled={status === 'setting-up'}
              className="w-full"
            >
              <Zap className="h-4 w-4 mr-2" />
              {status === 'setting-up' ? 'Setting up...' : 'Enable Seamless Integration'}
            </Button>
          </div>
        )}
        
        {status === 'active' && (
          <div className="space-y-4">
            <div className="flex items-center gap-2 text-sm text-green-600">
              <CheckCircle className="h-4 w-4" />
              Seamless integration is active
            </div>
            
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <div>
                  <Label htmlFor="auto-sync">Auto-sync workouts</Label>
                  <p className="text-xs text-gray-500">Automatically import completed workouts</p>
                </div>
                <Switch
                  id="auto-sync"
                  checked={autoSync}
                  onCheckedChange={toggleAutoSync}
                />
              </div>
              
              <div className="flex items-center justify-between">
                <div>
                  <Label htmlFor="auto-export">Auto-export training plans</Label>
                  <p className="text-xs text-gray-500">Automatically send new workouts to Garmin</p>
                </div>
                <Switch
                  id="auto-export"
                  checked={autoExport}
                  onCheckedChange={toggleAutoExport}
                />
              </div>
            </div>
            
            {lastAutoSync && (
              <p className="text-xs text-gray-500">
                Last auto-sync: {lastAutoSync.toLocaleString()}
              </p>
            )}
            
            <div className="text-xs text-gray-500 space-y-1">
              <p><strong>How it works:</strong></p>
              <ul className="list-disc list-inside space-y-1">
                <li>Workouts sync automatically when completed on your Garmin</li>
                <li>New training plans export directly to Garmin Connect</li>
                <li>Real-time updates via webhook notifications</li>
                <li>No manual sync required</li>
              </ul>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default GarminSeamless;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/GarminSetup.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Watch, Smartphone, Download, Upload, CheckCircle } from 'lucide-react';
import GarminConnect from './GarminConnect';
import GarminSeamless from './GarminSeamless';

const GarminSetup: React.FC = () => {
  const handleWorkoutsImported = (workouts: any[]) => {
    console.log('Imported workouts:', workouts);
    // Refresh the workout list or show success message
  };

  const handleAutoSyncChange = (enabled: boolean) => {
    console.log('Auto-sync', enabled ? 'enabled' : 'disabled');
  };

  return (
    <div className="space-y-6">
      <div className="text-center space-y-2">
        <h2 className="text-2xl font-bold">Connect Your Garmin Account</h2>
        <p className="text-gray-600">
          Automatically import your endurance workouts and seamlessly sync with your device
        </p>
      </div>

      <div className="grid md:grid-cols-2 gap-6">
        {/* Connection Component */}
        <GarminConnect onWorkoutsImported={handleWorkoutsImported} />

        {/* Seamless Integration */}
        <GarminSeamless onAutoSyncChange={handleAutoSyncChange} />
      </div>

      {/* Setup Instructions */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Smartphone className="h-5 w-5" />
            Setup Instructions
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-3">
            <div className="flex items-start gap-3">
              <Badge variant="outline" className="mt-1">1</Badge>
              <div>
                <p className="font-medium">Connect Account</p>
                <p className="text-sm text-gray-600">
                  Click "Connect Garmin Account" to authorize access to your Garmin Connect data
                </p>
              </div>
            </div>
            
            <div className="flex items-start gap-3">
              <Badge variant="outline" className="mt-1">2</Badge>
              <div>
                <p className="font-medium">Enable Seamless Integration</p>
                <p className="text-sm text-gray-600">
                  Turn on auto-sync for real-time workout imports and automatic training plan exports
                </p>
              </div>
            </div>
            
            <div className="flex items-start gap-3">
              <Badge variant="outline" className="mt-1">3</Badge>
              <div>
                <p className="font-medium">Train & Track</p>
                <p className="text-sm text-gray-600">
                  Your workouts will automatically appear here after completion on your Garmin device
                </p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Data Types */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Upload className="h-5 w-5" />
            Seamless Data Flow
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-3 gap-4">
            <div className="space-y-2">
              <h4 className="font-medium text-sm">Auto Import</h4>
              <ul className="text-xs text-gray-600 space-y-1">
                <li>• Real-time workout sync</li>
                <li>• Complete activity data</li>
                <li>• Heart rate & power zones</li>
                <li>• Training metrics</li>
              </ul>
            </div>
            
            <div className="space-y-2">
              <h4 className="font-medium text-sm">Auto Export</h4>
              <ul className="text-xs text-gray-600 space-y-1">
                <li>• Training plans to device</li>
                <li>• Structured workouts</li>
                <li>• Target zones & intervals</li>
                <li>• Workout guidance</li>
              </ul>
            </div>
            
            <div className="space-y-2">
              <h4 className="font-medium text-sm">Smart Sync</h4>
              <ul className="text-xs text-gray-600 space-y-1">
                <li>• Webhook notifications</li>
                <li>• Instant updates</li>
                <li>• No manual intervention</li>
                <li>• Background processing</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Privacy Notice */}
      <Alert>
        <CheckCircle className="h-4 w-4" />
        <AlertDescription>
          <strong>Privacy & Security:</strong> Your Garmin data is securely stored and only used to enhance your training experience. 
          Seamless integration uses encrypted webhooks and can be disabled at any time.
        </AlertDescription>
      </Alert>
    </div>
  );
};

export default GarminSetup;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/LogEffortDropdown.tsx
import React from 'react';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { ChevronDown, Waves, Bike, Activity, Dumbbell, Move } from 'lucide-react';

interface LogEffortDropdownProps {
  onSelectType: (type: string) => void;
}

const LogEffortDropdown: React.FC<LogEffortDropdownProps> = ({ onSelectType }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          className="flex items-center gap-2 bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 hover:text-gray-900 hover:border-gray-400 transition-all duration-200 shadow-sm hover:shadow-md"
          style={{
            fontFamily: 'Inter, sans-serif',
            fontWeight: 600,
            padding: '14px 16px',
            borderRadius: '8px',
            fontSize: '15px',
            minHeight: '48px',
            flex: 1,
            maxWidth: '90px'
          }}
        >
          Log
          <ChevronDown className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent
        align="start"
        className="bg-white border border-gray-200 shadow-xl"
        style={{borderRadius: '12px', padding: '8px', minWidth: '180px'}}
      >
        <DropdownMenuItem
          onClick={() => onSelectType('log-strength')}
          className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <Dumbbell className="h-5 w-5 mr-3" />
          Log Strength
        </DropdownMenuItem>
        
        <DropdownMenuItem
          onClick={() => onSelectType('log-run')}
          className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <Activity className="h-5 w-5 mr-3" />
          Log Run
        </DropdownMenuItem>
        <DropdownMenuItem
          onClick={() => onSelectType('log-ride')}
          className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <Bike className="h-5 w-5 mr-3" />
          Log Ride
        </DropdownMenuItem>
        <DropdownMenuItem
          onClick={() => onSelectType('log-swim')}
          className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <Waves className="h-5 w-5 mr-3" />
          Log Swim
        </DropdownMenuItem>
        <DropdownMenuItem
          onClick={() => onSelectType('log-mobility')}
          className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <Move className="h-5 w-5 mr-3" />
          Log Mobility
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default LogEffortDropdown;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/LoginForm.tsx
import React, { useState } from 'react';
import { supabase } from '@/lib/supabase';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';

interface LoginFormProps {
  onSwitchToRegister: () => void;
}

const LoginForm: React.FC<LoginFormProps> = ({ onSwitchToRegister }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email: email.trim(),
        password: password,
      });

      if (error) {
        setError(error.message);
      }
      // AuthWrapper will handle the redirect via onAuthStateChange
    } catch (error) {
      setError('An unexpected error occurred');
      console.error('Login error:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="text-center">
        <h1 className="text-3xl font-bold text-gray-900">efforts</h1>
        <p className="mt-2 text-gray-600">Sign in to your account</p>
      </div>

      {/* Login Form */}
      <form onSubmit={handleLogin} className="space-y-4">
        {error && (
          <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
            <p className="text-red-600 text-sm">{error}</p>
          </div>
        )}

        <div>
          <Label htmlFor="email">Email</Label>
          <Input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            placeholder="Enter your email"
            required
            className="mt-1"
          />
        </div>

        <div>
          <Label htmlFor="password">Password</Label>
          <Input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            placeholder="Enter your password"
            required
            className="mt-1"
          />
        </div>

        <Button
          type="submit"
          disabled={loading}
          className="w-full bg-black text-white hover:bg-gray-800"
        >
          {loading ? 'Signing in...' : 'Sign In'}
        </Button>
      </form>

      {/* Switch to Register */}
      <div className="text-center">
        <p className="text-gray-600">
          Don't have an account?{' '}
          <button
            onClick={onSwitchToRegister}
            className="text-black font-medium hover:underline"
          >
            Create one
          </button>
        </p>
      </div>
    </div>
  );
};

export default LoginForm;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/NewEffortDropdown.tsx
import React from 'react';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { ChevronDown, Waves, Bike, Activity, Dumbbell, Move, Kanban } from 'lucide-react';

interface NewEffortDropdownProps {
  onSelectType: (type: string) => void;
  onOpenPlanBuilder?: () => void;
}

const NewEffortDropdown: React.FC<NewEffortDropdownProps> = ({ onSelectType, onOpenPlanBuilder }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          className="flex items-center gap-2 text-black hover:text-gray-600 transition-colors"
          style={{
            fontFamily: 'Inter, sans-serif',
            fontWeight: 600,
            padding: '14px 16px',
            fontSize: '15px',
            minHeight: '48px',
            flex: 1,
            maxWidth: '90px',
            background: 'transparent',
            border: 'none',
            boxShadow: 'none'
          }}
        >
          Build
          <ChevronDown className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent
        align="start"
        className="bg-white border border-gray-200 shadow-xl"
        style={{borderRadius: '12px', padding: '8px', minWidth: '160px'}}
      >
        <DropdownMenuItem
          onClick={() => {
            console.log('🔥 Build me a plan clicked!', onOpenPlanBuilder);
            onOpenPlanBuilder?.();
          }}
          className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <Kanban className="h-5 w-5 mr-3" />
          Build me a plan
        </DropdownMenuItem>
        
        <DropdownMenuSeparator className="my-2" />
        
        <DropdownMenuItem
          onClick={() => onSelectType('run')}
          className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <Activity className="h-5 w-5 mr-3" />
          Run
        </DropdownMenuItem>
        <DropdownMenuItem
          onClick={() => onSelectType('ride')}
          className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <Bike className="h-5 w-5 mr-3" />
          Ride
        </DropdownMenuItem>
        <DropdownMenuItem
          onClick={() => onSelectType('swim')}
          className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <Waves className="h-5 w-5 mr-3" />
          Swim
        </DropdownMenuItem>
        <DropdownMenuItem
          onClick={() => onSelectType('strength')}
          className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <Dumbbell className="h-5 w-5 mr-3" />
          Strength
        </DropdownMenuItem>
        <DropdownMenuItem
          onClick={() => onSelectType('mobility')}
          className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <Move className="h-5 w-5 mr-3" />
          Mobility
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default NewEffortDropdown;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/PlanBuilder.tsx
// src/components/PlanBuilder.tsx
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { ArrowLeft, Kanban } from 'lucide-react';
import { useAppContext } from '@/contexts/AppContext';

interface PlanBuilderProps {
  onClose: () => void;
  onPlanGenerated?: (plan: any) => void; // NEW: Callback for plan creation
}

export default function PlanBuilder({ onClose, onPlanGenerated }: PlanBuilderProps) {
  const { addWorkout } = useAppContext();
  const [planPrompt, setPlanPrompt] = useState('');
  const [generatingPlan, setGeneratingPlan] = useState(false);

  // Quick plan suggestions
  const quickPlans = [
    "Build me a 30-minute easy run",
    "Create a 5K training workout", 
    "I want a 45-minute bike ride with intervals",
    "Design a full-body strength workout",
    "Give me a swim workout for endurance",
    "Build me a 4-week marathon training plan",
    "Create a triathlon program",
    "I need a strength plan for runners"
  ];

  const generatePlan = async () => {
    if (!planPrompt.trim()) return;
    
    setGeneratingPlan(true);
    try {
      // Mock response for now - replace with real AI later
      await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate API delay
      
      // Generate a month of progressive workouts
      const generateMonthOfWorkouts = (goal: string) => {
        const workouts = [];
        const startDate = new Date();
        
        // Example: 5K training plan over 4 weeks
        for (let week = 0; week < 4; week++) {
          for (let day = 0; day < 7; day++) {
            const currentDate = new Date(startDate);
            currentDate.setDate(startDate.getDate() + (week * 7) + day);
            const dateStr = currentDate.toISOString().split('T')[0];
            
            // Skip some days (rest days)
            if (day === 1 || day === 3 || day === 6) continue;
            
            let workout = null;
            
            if (day === 0) { // Monday - Long run
              workout = {
                date: dateStr,
                type: 'run',
                name: `Week ${week + 1} - Long Run`,
                intervals: [
                  {
                    id: '1',
                    time: '10:00',
                    effortLabel: 'Easy Warmup',
                    rpeTarget: '4',
                    duration: 600,
                    repeatCount: 1
                  },
                  {
                    id: '2',
                    time: `${30 + (week * 5)}:00`,
                    effortLabel: 'Steady Pace',
                    rpeTarget: '6',
                    duration: (30 + (week * 5)) * 60,
                    repeatCount: 1
                  },
                  {
                    id: '3',
                    time: '10:00',
                    effortLabel: 'Easy Cool Down',
                    rpeTarget: '3',
                    duration: 600,
                    repeatCount: 1
                  }
                ]
              };
            } else if (day === 2) { // Wednesday - Intervals
              workout = {
                date: dateStr,
                type: 'run',
                name: `Week ${week + 1} - Speed Work`,
                intervals: [
                  {
                    id: '1',
                    time: '15:00',
                    effortLabel: 'Warmup',
                    rpeTarget: '4',
                    duration: 900,
                    repeatCount: 1
                  },
                  {
                    id: '2',
                    time: `${4 + week}x(2:00 Hard/1:00 Easy)`,
                    effortLabel: 'Intervals',
                    rpeTarget: '8',
                    duration: (4 + week) * 180,
                    repeatCount: 1,
                    isRepeatBlock: true
                  },
                  {
                    id: '3',
                    time: '10:00',
                    effortLabel: 'Cool Down',
                    rpeTarget: '3',
                    duration: 600,
                    repeatCount: 1
                  }
                ]
              };
            } else if (day === 4) { // Friday - Recovery
              workout = {
                date: dateStr,
                type: 'run',
                name: `Week ${week + 1} - Recovery Run`,
                intervals: [
                  {
                    id: '1',
                    time: '25:00',
                    effortLabel: 'Easy Recovery',
                    rpeTarget: '4',
                    duration: 1500,
                    repeatCount: 1
                  }
                ]
              };
            } else if (day === 5) { // Saturday - Strength
              workout = {
                date: dateStr,
                type: 'strength',
                name: `Week ${week + 1} - Strength Training`,
                strength_exercises: [  // 🔥 FIXED: Changed from 'exercises' to 'strength_exercises'
                  {
                    id: '1',
                    name: 'Squats',
                    sets: 3,
                    reps: 12,
                    weight: 135,
                    weightMode: 'same'
                  },
                  {
                    id: '2',
                    name: 'Lunges',
                    sets: 3,
                    reps: 10,
                    weight: 0,
                    weightMode: 'same'
                  },
                  {
                    id: '3',
                    name: 'Calf Raises',
                    sets: 3,
                    reps: 15,
                    weight: 0,
                    weightMode: 'same'
                  }
                ]
              };
            }
            
            if (workout) {
              workouts.push(workout);
            }
          }
        }
        
        return workouts;
      };
      
      // Generate the month of workouts
      const monthWorkouts = generateMonthOfWorkouts(planPrompt);
      
      // NEW: Create plan metadata for Plans dropdown
      const planId = `plan-${Date.now()}`;
      const planData = {
        id: planId,
        name: planPrompt.length > 30 ? `${planPrompt.substring(0, 30)}...` : planPrompt,
        description: planPrompt,
        type: 'run', // Could be determined by AI
        duration: 4, // 4 weeks
        level: 'intermediate',
        goal: planPrompt,
        status: 'active',
        currentWeek: 1,
        createdDate: new Date().toISOString().split('T')[0],
        totalWorkouts: monthWorkouts.length,
        weeks: [] // Could be populated with detailed week structure for plan detail view
      };
      
      console.log('🚀 Generated plan data:', planData);
      
      // Save all workouts to your app
      for (const workout of monthWorkouts) {
        const workoutData = {
          name: workout.name,
          type: workout.type,
          date: workout.date,
          description: workout.intervals ? 
            workout.intervals.map(i => i.effortLabel || i.time).join(' + ') :
            workout.strength_exercises?.map(e => `${e.name} ${e.sets}x${e.reps}`).join(' + ') || '',
          duration: workout.intervals ? 
            workout.intervals.reduce((sum, i) => sum + (i.duration || 0), 0) : 
            2400, // 40 min default for strength
          workout_status: 'planned',
          intervals: workout.intervals || undefined,
          strength_exercises: workout.strength_exercises || undefined,
          userComments: '',  // 🔥 FIXED: Added missing required fields
          completedManually: false,  // 🔥 FIXED: Added missing required fields
          planId: planId  // Link workouts to plan
        };
        
        try {
          await addWorkout(workoutData);
        } catch (error) {
          console.error('Error saving workout:', error);
        }
      }
      
      // NEW: Call the plan generation callback
      if (onPlanGenerated) {
        console.log('🚀 Calling onPlanGenerated with:', planData);
        onPlanGenerated(planData);
      }
      
      setPlanPrompt('');
      
      // Show success message
      alert(`Generated ${monthWorkouts.length} workouts for your training plan!`);
      
      // Don't close automatically - let AppLayout handle it
      // onClose();
      
    } catch (error) {
      console.error('Error generating plan:', error);
      alert('Error generating plan. Please try again.');
    } finally {
      setGeneratingPlan(false);
    }
  };

  return (
    <div className="min-h-screen bg-white">
      <main className="max-w-7xl mx-auto px-3 py-2">
        {/* Header */}
        <div className="flex justify-between items-center mb-6">
          <Button
            onClick={onClose}
            variant="ghost"
            className="flex items-center gap-2 p-0 h-auto text-muted-foreground hover:text-black"
          >
            <ArrowLeft className="h-4 w-4" />
            Dashboard
          </Button>
        </div>

        {/* Main Content */}
        <div className="max-w-2xl mx-auto">
          <div className="text-center mb-8">
            <div className="flex justify-center mb-4">
              <div className="p-4 bg-gray-50 rounded-full">
                <Kanban className="h-8 w-8 text-gray-600" />
              </div>
            </div>
            <h1 className="text-2xl font-semibold mb-2">Build me a plan</h1>
            <p className="text-gray-600">
              Describe what you want to train for and I'll create a personalized plan
            </p>
          </div>

          <div className="space-y-6">
            <div>
              <Textarea
                value={planPrompt}
                onChange={(e) => setPlanPrompt(e.target.value)}
                placeholder="I want to train for a 5K race in 8 weeks..."
                rows={4}
                className="w-full min-h-[100px] border-gray-300"
                style={{fontFamily: 'Inter, sans-serif'}}
              />
            </div>
            
            <div className="space-y-3">
              <p className="text-sm text-gray-600 font-medium">Quick suggestions:</p>
              <div className="grid grid-cols-1 gap-2">
                {quickPlans.map((suggestion, index) => (
                  <button
                    key={index}
                    onClick={() => setPlanPrompt(suggestion)}
                    className="text-left p-3 text-sm bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors"
                    style={{fontFamily: 'Inter, sans-serif'}}
                  >
                    {suggestion}
                  </button>
                ))}
              </div>
            </div>
            
            <div className="pt-4">
              <Button
                onClick={generatePlan}
                disabled={!planPrompt.trim() || generatingPlan}
                className="w-full h-12 bg-black text-white hover:bg-gray-800"
                style={{
                  fontFamily: 'Inter, sans-serif',
                  fontWeight: 600
                }}
              >
                {generatingPlan ? 'Generating plan...' : 'Generate Plan'}
              </Button>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/PlansDropdown.tsx
import React from 'react';
import { Button } from '@/components/ui/button';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from '@/components/ui/dropdown-menu';
import { ChevronDown, ArrowRight } from 'lucide-react';

interface Plan {
  id: string;
  name: string;
  currentWeek?: number;
  status: 'active' | 'completed';
  description?: string;
}

interface PlansDropdownProps {
  onSelectRoutine?: (planId: string) => void;
  currentPlans?: Plan[];
  completedPlans?: Plan[];
}

const PlansDropdown: React.FC<PlansDropdownProps> = ({
  onSelectRoutine,
  currentPlans = [],
  completedPlans = []
}) => {
  const handlePlanSelect = (e: React.MouseEvent, planId: string) => {
    e.preventDefault();
    e.stopPropagation();
    console.log('Selected plan:', planId);
    if (onSelectRoutine) {
      onSelectRoutine(planId);
    }
  };

  const handleAllPlans = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    console.log('Opening All Plans interface');
    if (onSelectRoutine) {
      onSelectRoutine('all-plans');
    }
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          className="flex items-center gap-2 bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 hover:text-gray-900 hover:border-gray-400 transition-all duration-200 shadow-sm hover:shadow-md"
          style={{
            fontFamily: 'Inter, sans-serif',
            fontWeight: 600,
            padding: '14px 12px',
            borderRadius: '8px',
            fontSize: '15px',
            minHeight: '48px',
            flex: 1,
            maxWidth: '110px'
          }}
        >
          Plans
          <ChevronDown className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent
        align="start"
        className="bg-white border border-gray-200 shadow-xl"
        style={{borderRadius: '12px', padding: '8px', minWidth: '200px'}}
      >
        {/* Current Plans */}
        {currentPlans.length > 0 && (
          <>
            {currentPlans.map((plan) => (
              <DropdownMenuItem
                key={plan.id}
                onClick={(e) => handlePlanSelect(e, plan.id)}
                className="flex flex-col items-start hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
                style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '50px'}}
              >
                <span className="text-xs text-gray-500 mb-1">Current:</span>
                <span className="font-medium">{plan.name} - Wk {plan.currentWeek}</span>
              </DropdownMenuItem>
            ))}
            
            {completedPlans.length > 0 && (
              <DropdownMenuSeparator className="my-2" />
            )}
          </>
        )}

        {/* Completed Plans */}
        {completedPlans.length > 0 && (
          <>
            {completedPlans.slice(0, 3).map((plan) => (
              <DropdownMenuItem
                key={plan.id}
                onClick={(e) => handlePlanSelect(e, plan.id)}
                className="flex flex-col items-start hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
                style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '50px'}}
              >
                <span className="text-xs text-gray-500 mb-1">Completed:</span>
                <span className="font-medium">{plan.name}</span>
              </DropdownMenuItem>
            ))}
          </>
        )}

        {/* Show All Plans if there are any plans or as fallback */}
        {(currentPlans.length > 0 || completedPlans.length > 0) && (
          <DropdownMenuSeparator className="my-2" />
        )}
        
        <DropdownMenuItem
          onClick={handleAllPlans}
          className="flex items-center justify-between hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <span>{currentPlans.length === 0 && completedPlans.length === 0 ? 'All Plans' : 'View All Plans'}</span>
          <ArrowRight className="h-4 w-4" />
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default PlansDropdown;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/RegisterForm.tsx
import React, { useState } from 'react';
import { supabase } from '@/lib/supabase';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';

interface RegisterFormProps {
  onSuccess: () => void;
  onSwitchToLogin: () => void;
}

const RegisterForm: React.FC<RegisterFormProps> = ({ onSuccess, onSwitchToLogin }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    if (password !== confirmPassword) {
      setError('Passwords do not match');
      setLoading(false);
      return;
    }

    if (password.length < 6) {
      setError('Password must be at least 6 characters');
      setLoading(false);
      return;
    }

    try {
      const { data, error } = await supabase.auth.signUp({
        email: email.trim(),
        password: password,
      });

      if (error) {
        setError(error.message);
      } else {
        onSuccess();
      }
    } catch (error) {
      setError('An unexpected error occurred');
      console.error('Registration error:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h1 className="text-3xl font-bold text-gray-900">efforts</h1>
        <p className="mt-2 text-gray-600">Create your account</p>
      </div>

      <form onSubmit={handleRegister} className="space-y-4">
        {error && (
          <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
            <p className="text-red-600 text-sm">{error}</p>
          </div>
        )}

        <div>
          <Label htmlFor="email">Email</Label>
          <Input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            placeholder="Enter your email"
            required
            className="mt-1"
          />
        </div>

        <div>
          <Label htmlFor="password">Password</Label>
          <Input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            placeholder="Create a password (min 6 characters)"
            required
            className="mt-1"
          />
        </div>

        <div>
          <Label htmlFor="confirmPassword">Confirm Password</Label>
          <Input
            id="confirmPassword"
            type="password"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            placeholder="Confirm your password"
            required
            className="mt-1"
          />
        </div>

        <Button
          type="submit"
          disabled={loading}
          className="w-full bg-black text-white hover:bg-gray-800"
        >
          {loading ? 'Creating account...' : 'Create Account'}
        </Button>
      </form>

      <div className="text-center">
        <p className="text-gray-600">
          Already have an account?{' '}
          <button
            onClick={onSwitchToLogin}
            className="text-black font-medium hover:underline"
          >
            Sign in
          </button>
        </p>
      </div>
    </div>
  );
};

export default RegisterForm;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/RideIntervalBuilder.tsx
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Copy, Trash2, GripVertical, Repeat, Edit, Bike } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

export interface RideInterval {
  id: string;
  time?: string;
  distance?: string;
  speedTarget?: string;
  powerTarget?: string;
  bpmTarget?: string;
  rpeTarget?: string;
  cadenceTarget?: string;
  effortLabel?: string;
  repeat?: boolean;
  repeatCount?: number;
  duration?: number;
  selected?: boolean;
  isRepeatBlock?: boolean;
  originalSegments?: RideInterval[];
}

interface RideIntervalBuilderProps {
  intervals: RideInterval[];
  onChange: (intervals: RideInterval[]) => void;
  isMetric: boolean;
}

// Fixed time input handler - no auto-conversion during typing
const handleTimeInput = (value: string, onChange: (timeStr: string, duration: number) => void) => {
  if (value === '') {
    onChange('', 0);
    return;
  }
  
  // Allow direct input without auto-conversion
  const timeStr = value;
  
  // Calculate duration for any valid time format
  if (timeStr.includes(':')) {
    const parts = timeStr.split(':');
    const min = parseInt(parts[0]) || 0;
    const sec = parseInt(parts[1]) || 0;
    
    // Validate seconds
    if (sec >= 60) return;
    
    const duration = min * 60 + sec;
    onChange(timeStr, duration);
  } else {
    // For inputs without colon, treat as minutes and calculate duration
    const min = parseInt(timeStr) || 0;
    const duration = min * 60;
    onChange(timeStr, duration);
  }
};

// Smart time formatting on blur
const handleTimeBlur = (value: string, onChange: (timeStr: string, duration: number) => void) => {
  if (!value) return;
  
  let timeStr = value;
  
  // Auto-format only on blur: "4" -> "4:00", "45" -> "45:00"
  if (!timeStr.includes(':') && timeStr.length <= 2) {
    timeStr = `${timeStr}:00`;
    
    const min = parseInt(timeStr.split(':')[0]) || 0;
    const duration = min * 60;
    onChange(timeStr, duration);
    return;
  }
  
  // Handle existing formatted time
  const parts = timeStr.split(':');
  const min = parseInt(parts[0]) || 0;
  const sec = parseInt(parts[1]) || 0;
  
  // Validate and format
  if (sec >= 60) return;
  
  const duration = min * 60 + sec;
  onChange(timeStr, duration);
};

// Mobile Safari numeric input fix
const handleNumericInput = (value: string, onChange: (num: number) => void) => {
  if (value === '') {
    onChange(0);
    return;
  }
  
  const numericValue = value.replace(/\D/g, '');
  const parsed = parseInt(numericValue, 10);
  const finalValue = isNaN(parsed) || parsed < 1 ? 1 : parsed;
  
  onChange(finalValue);
};

export default function RideIntervalBuilder({ intervals, onChange, isMetric }: RideIntervalBuilderProps) {
  const [selectedIntervals, setSelectedIntervals] = useState<string[]>([]);
  const [blockRepeatCount, setBlockRepeatCount] = useState(1);

  // Auto-add first interval when component mounts and intervals array is empty
  useEffect(() => {
    if (intervals.length === 0) {
      const starterInterval: RideInterval = {
        id: Date.now().toString(),
        time: '',
        distance: '',
        duration: 0
      };
      onChange([starterInterval]);
    }
  }, [intervals.length, onChange]);

  const addInterval = (e?: React.MouseEvent) => {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    const newInterval: RideInterval = {
      id: Date.now().toString(),
      time: '',
      distance: '',
      duration: 0
    };
    onChange([...intervals, newInterval]);
  };

  const updateInterval = (id: string, updates: Partial<RideInterval>) => {
    onChange(intervals.map(interval =>
      interval.id === id ? { ...interval, ...updates } : interval
    ));
  };

  const duplicateInterval = (id: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    const interval = intervals.find(i => i.id === id);
    if (interval) {
      const duplicate = { ...interval, id: Date.now().toString() };
      onChange([...intervals, duplicate]);
    }
  };

  const deleteInterval = (id: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    onChange(intervals.filter(interval => interval.id !== id));
  };

  const toggleIntervalSelection = (id: string) => {
    setSelectedIntervals(prev =>
      prev.includes(id) ? prev.filter(i => i !== id) : [...prev, id]
    );
  };

  const createBlock = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (selectedIntervals.length === 0) return;

    const selectedIntervalsData = intervals.filter(i =>
      selectedIntervals.includes(i.id));

    const blockSummary = selectedIntervalsData.map(i => {
      let segmentDesc = '';
      if (i.time) {
        segmentDesc += i.time;
      }
      if (i.effortLabel) {
        segmentDesc += ` @ ${i.effortLabel}`;
      } else if (i.powerTarget) {
        segmentDesc += ` @ ${i.powerTarget}`;
      } else if (i.speedTarget) {
        segmentDesc += ` @ ${i.speedTarget}`;
      } else if (i.bpmTarget) {
        segmentDesc += ` @ ${i.bpmTarget}`;
      } else if (i.rpeTarget) {
        segmentDesc += ` @ RPE ${i.rpeTarget}`;
      }
      return segmentDesc.trim();
    }).filter(desc => desc.length > 0).join(' + ');

    const totalDuration = selectedIntervalsData.reduce((sum, i) => sum + (i.duration || 0), 0);

    const blockInterval: RideInterval = {
      id: Date.now().toString(),
      time: `${blockRepeatCount}x(${blockSummary})`,
      isRepeatBlock: true,
      repeatCount: blockRepeatCount,
      duration: totalDuration * blockRepeatCount,
      originalSegments: selectedIntervalsData.map(seg => ({
        ...seg,
        originalSegments: undefined
      }))
    };

    const remainingIntervals = intervals.filter(i =>
      !selectedIntervals.includes(i.id));
    onChange([...remainingIntervals, blockInterval]);
    setSelectedIntervals([]);
  };

  const unblockInterval = (id: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    const blockInterval = intervals.find(i => i.id === id);
    if (!blockInterval || !blockInterval.isRepeatBlock || !blockInterval.originalSegments) return;

    const restoredSegments = blockInterval.originalSegments.map(seg => ({
      ...seg,
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9)
    }));

    const updatedIntervals = intervals.filter(i => i.id !== id);
    onChange([...updatedIntervals, ...restoredSegments]);
  };

  const renderInterval = (interval: RideInterval, index: number) => {
    if (interval.isRepeatBlock) {
      return (
        <div key={interval.id} className="p-3">
          <div className="flex items-center gap-3 mb-3">
            <GripVertical className="h-4 w-4 text-muted-foreground" />
            <h4 className="font-medium flex-1 text-sm">
              <Repeat className="h-4 w-4 inline mr-2" />
              Repeat Block {intervals.filter(i => i.isRepeatBlock).findIndex(i => i.id === interval.id) + 1}
            </h4>
            <div className="flex gap-2">
              <Button
                type="button"
                onClick={(e) => unblockInterval(interval.id, e)}
                size="sm"
                variant="ghost"
                className="h-8 w-8 p-0"
                title="Break apart block"
              >
                <Edit className="h-3 w-3" />
              </Button>
              <Button
                type="button"
                onClick={(e) => duplicateInterval(interval.id, e)}
                size="sm"
                variant="ghost"
                className="h-8 w-8 p-0"
              >
                <Copy className="h-3 w-3" />
              </Button>
              <Button
                type="button"
                onClick={(e) => deleteInterval(interval.id, e)}
                size="sm"
                variant="ghost"
                className="h-8 w-8 p-0"
              >
                <Trash2 className="h-3 w-3" />
              </Button>
            </div>
          </div>

          <div className="p-3 border border-gray-200">
            <div className="text-xs font-medium mb-1">
              Repeat Structure:
            </div>
            <div className="text-sm font-mono">
              {interval.time}
            </div>
            <div className="text-xs text-muted-foreground mt-1">
              Total: {Math.floor((interval.duration || 0) / 60)}:{((interval.duration || 0) % 60).toString().padStart(2, '0')}
            </div>
          </div>
        </div>
      );
    }

    return (
      <div key={interval.id} className="p-3">
        <div className="flex items-center gap-3 mb-3">
          <Checkbox
            checked={selectedIntervals.includes(interval.id)}
            onCheckedChange={() => toggleIntervalSelection(interval.id)}
          />
          <GripVertical className="h-4 w-4 text-muted-foreground" />
          <div className="flex-1">
            <Select
              value={interval.effortLabel || `Segment ${index + 1}`}
              onValueChange={(value) => {
                updateInterval(interval.id, { effortLabel: value });
              }}
            >
              <SelectTrigger className="bg-transparent p-0 h-auto font-medium text-sm border-gray-200">
                <div className="flex items-center">
                  <Bike className="h-4 w-4 mr-2" />
                  <SelectValue />
                </div>
              </SelectTrigger>
              <SelectContent className="bg-white border border-gray-200 shadow-xl">
                <SelectItem value={`Segment ${index + 1}`}>Segment {index + 1}</SelectItem>
                <SelectItem value="Warm up">Warm up</SelectItem>
                <SelectItem value="Easy">Easy</SelectItem>
                <SelectItem value="Tempo">Tempo</SelectItem>
                <SelectItem value="Threshold">Threshold</SelectItem>
                <SelectItem value="Hard">Hard</SelectItem>
                <SelectItem value="Recovery">Recovery</SelectItem>
                <SelectItem value="Cool down">Cool down</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="flex gap-2">
            <Button 
              type="button" 
              onClick={(e) => duplicateInterval(interval.id, e)} 
              size="sm" 
              variant="ghost" 
              className="h-8 w-8 p-0"
            >
              <Copy className="h-3 w-3" />
            </Button>
            <Button 
              type="button" 
              onClick={(e) => deleteInterval(interval.id, e)} 
              size="sm" 
              variant="ghost" 
              className="h-8 w-8 p-0"
            >
              <Trash2 className="h-3 w-3" />
            </Button>
          </div>
        </div>

        {/* Compact responsive grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 mb-3">
          <div>
            <Label className="text-xs text-muted-foreground">Time</Label>
            <Input
              placeholder="5:00"
              value={interval.time || ''}
              onChange={(e) => {
                handleTimeInput(e.target.value, (timeStr, duration) => {
                  updateInterval(interval.id, { time: timeStr, duration });
                });
              }}
              onBlur={(e) => {
                const value = e.target.value;
                if (value && !value.includes(':') && value.length <= 2) {
                  const formattedTime = `${value}:00`;
                  const duration = (parseInt(value) || 0) * 60;
                  updateInterval(interval.id, { time: formattedTime, duration });
                }
              }}
              className="h-9 text-sm border-gray-300"
            />
          </div>
          <div>
            <Label className="text-xs text-muted-foreground">Distance ({isMetric ? 'km' : 'mi'})</Label>
            <Input
              placeholder="10.0"
              value={interval.distance || ''}
              onChange={(e) => updateInterval(interval.id, { distance: e.target.value })}
              className="h-9 text-sm border-gray-300"
            />
          </div>
          <div>
            <Label className="text-xs text-muted-foreground">Speed ({isMetric ? 'km/h' : 'mph'})</Label>
            <Input
              placeholder={isMetric ? "25-30" : "18-20"}
              value={interval.speedTarget || ''}
              onChange={(e) => updateInterval(interval.id, { speedTarget: e.target.value })}
              className="h-9 text-sm border-gray-300"
            />
          </div>
          <div>
            <Label className="text-xs text-muted-foreground">Power (watts or %FTP)</Label>
            <Input
              placeholder="250W or 85%"
              value={interval.powerTarget || ''}
              onChange={(e) => updateInterval(interval.id, { powerTarget: e.target.value })}
              className="h-9 text-sm border-gray-300"
            />
          </div>
          <div>
            <Label className="text-xs text-muted-foreground">BPM</Label>
            <Input
              placeholder="150-160"
              value={interval.bpmTarget || ''}
              onChange={(e) => updateInterval(interval.id, { bpmTarget: e.target.value })}
              className="h-9 text-sm border-gray-300"
            />
          </div>
          <div>
            <Label className="text-xs text-muted-foreground">RPE</Label>
            <Input
              placeholder="6-7"
              value={interval.rpeTarget || ''}
              onChange={(e) => updateInterval(interval.id, { rpeTarget: e.target.value })}
              className="h-9 text-sm border-gray-300"
            />
          </div>
          <div>
            <Label className="text-xs text-muted-foreground">Cadence (rpm)</Label>
            <Input
              placeholder="85-95"
              value={interval.cadenceTarget || ''}
              onChange={(e) => updateInterval(interval.id, { cadenceTarget: e.target.value })}
              className="h-9 text-sm border-gray-300"
            />
          </div>
        </div>

        {/* Compact repeat section */}
        <div className="flex items-center gap-3">
          <div className="flex items-center space-x-2">
            <Checkbox
              id={`repeat-${interval.id}`}
              checked={interval.repeat || false}
              onCheckedChange={(checked) => updateInterval(interval.id, { repeat: !!checked })}
            />
            <Label htmlFor={`repeat-${interval.id}`} className="text-xs">Repeat?</Label>
          </div>
          {interval.repeat && (
            <Input
              type="text"
              className="w-14 h-8 text-center text-sm border-gray-300"
              placeholder="2"
              value={interval.repeatCount === undefined ? '' : interval.repeatCount.toString()}
              onChange={(e) => {
                const value = e.target.value;
                if (value === '') {
                  updateInterval(interval.id, { repeatCount: undefined });
                } else {
                  handleNumericInput(value, (num) => {
                    updateInterval(interval.id, { repeatCount: num });
                  });
                }
              }}
              onFocus={(e) => e.target.select()}
            />
          )}
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-3">
      {/* Segments */}
      <div className="space-y-3">
        {intervals.map((interval, index) => renderInterval(interval, index))}

        {intervals.length === 0 && (
          <div className="text-center py-6 text-muted-foreground">
            <p className="text-sm">No segments yet</p>
            <p className="text-xs mt-1">Click "Add Segment" to get started</p>
          </div>
        )}

        {/* Bottom Add Segment button when segments exist */}
        {intervals.length > 0 && (
          <div className="text-center pt-4">
            <button 
              type="button" 
              onClick={addInterval} 
              className="px-4 py-2 text-black text-sm"
            >
              <Bike className="h-4 w-4 mr-2 inline" />
              Add Segment
            </button>
          </div>
        )}
      </div>

      {/* Floating repeat menu */}
      {selectedIntervals.length > 0 && (
        <div className="fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-white border border-gray-300 shadow-xl p-3 flex flex-col items-center gap-2 z-[60] max-w-xs w-full mx-4">
          <span className="text-xs font-medium text-gray-700">
            {selectedIntervals.length} segment{selectedIntervals.length > 1 ? 's' : ''} selected
          </span>
          <div className="flex items-center gap-2">
            <span className="text-xs text-gray-600">Repeat</span>
            <Input
              type="text"
              className="w-12 h-8 text-center text-sm font-semibold border-gray-300"
              value={blockRepeatCount.toString()}
              onChange={(e) => {
                handleNumericInput(e.target.value, setBlockRepeatCount);
              }}
              onFocus={(e) => e.target.select()}
              placeholder="1"
            />
            <span className="text-xs text-gray-600">times</span>
          </div>
          <div className="flex gap-2 w-full">
            <Button
              type="button"
              onClick={() => setSelectedIntervals([])}
              size="sm"
              variant="outline"
              className="flex-1 h-8 text-xs"
            >
              Cancel
            </Button>
            <Button
              type="button"
              onClick={createBlock}
              size="sm"
              className="bg-gray-500 hover:bg-gray-600 flex-1 h-8 text-xs"
            >
              <Repeat className="h-3 w-3 mr-1" />
              Create
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/RoutinesDropdown.tsx
import React from 'react';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { ChevronDown, Waves, Bike, Activity, Dumbbell, Move } from 'lucide-react';

interface RoutinesDropdownProps {
  onSelectRoutine?: (type: string) => void;
}

const RoutinesDropdown: React.FC<RoutinesDropdownProps> = ({ onSelectRoutine }) => {
  const routineTypes = [
    { type: 'run', label: 'Run', icon: Activity },
    { type: 'ride', label: 'Ride', icon: Bike },
    { type: 'swim', label: 'Swim', icon: Waves },
    { type: 'strength', label: 'Strength', icon: Dumbbell },
    { type: 'mobility', label: 'Mobility', icon: Move }
  ];

  const handleSelect = (type: string) => {
    console.log('Routine selected:', type);
    if (onSelectRoutine) {
      onSelectRoutine(type);
    }
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          className="flex items-center gap-2 bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 hover:text-gray-900 hover:border-gray-400 transition-all duration-200 shadow-sm hover:shadow-md"
          style={{
            fontFamily: 'Inter, sans-serif',
            fontWeight: 600,
            padding: '14px 12px',
            borderRadius: '8px',
            fontSize: '15px',
            minHeight: '48px',
            flex: 1,
            maxWidth: '110px'
          }}
        >
          Routines
          <ChevronDown className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent
        align="start"
        className="bg-white border border-gray-200 shadow-xl"
        style={{borderRadius: '12px', padding: '8px', minWidth: '160px'}}
      >
        {routineTypes.map((routine) => {
          const IconComponent = routine.icon;
          return (
            <DropdownMenuItem
              key={routine.type}
              onClick={() => handleSelect(routine.type)}
              className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
              style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
            >
              <IconComponent className="h-5 w-5 mr-3" />
              <span>{routine.label}</span>
            </DropdownMenuItem>
          );
        })}
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default RoutinesDropdown;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/RunIntervalBuilder.tsx
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Copy, Trash2, GripVertical, Repeat, Edit, Activity } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

export interface RunInterval {
  id: string;
  time?: string;
  distance?: string;
  paceTarget?: string;
  effortLabel?: string;
  bpmTarget?: string;
  rpeTarget?: string;
  repeat?: boolean;
  repeatCount?: number;
  duration?: number;
  selected?: boolean;
  isRepeatBlock?: boolean;
  originalSegments?: RunInterval[];
}

interface RunIntervalBuilderProps {
  intervals: RunInterval[];
  onChange: (intervals: RunInterval[]) => void;
  isMetric: boolean;
}

// Fixed time input handler - no auto-conversion during typing
const handleTimeInput = (value: string, onChange: (timeStr: string, duration: number) => void) => {
  if (value === '') {
    onChange('', 0);
    return;
  }
  
  // Allow direct input without auto-conversion
  const timeStr = value;
  
  // Calculate duration for any valid time format
  if (timeStr.includes(':')) {
    const parts = timeStr.split(':');
    const min = parseInt(parts[0]) || 0;
    const sec = parseInt(parts[1]) || 0;
    
    // Validate seconds
    if (sec >= 60) return;
    
    const duration = min * 60 + sec;
    onChange(timeStr, duration);
  } else {
    // For inputs without colon, treat as minutes and calculate duration
    const min = parseInt(timeStr) || 0;
    const duration = min * 60;
    onChange(timeStr, duration);
  }
};

// Smart time formatting on blur
const handleTimeBlur = (value: string, onChange: (timeStr: string, duration: number) => void) => {
  if (!value) return;
  
  let timeStr = value;
  
  // Auto-format only on blur: "4" -> "4:00", "45" -> "45:00"
  if (!timeStr.includes(':') && timeStr.length <= 2) {
    timeStr = `${timeStr}:00`;
    
    const min = parseInt(timeStr.split(':')[0]) || 0;
    const duration = min * 60;
    onChange(timeStr, duration);
    return;
  }
  
  // Handle existing formatted time
  const parts = timeStr.split(':');
  const min = parseInt(parts[0]) || 0;
  const sec = parseInt(parts[1]) || 0;
  
  // Validate and format
  if (sec >= 60) return;
  
  const duration = min * 60 + sec;
  onChange(timeStr, duration);
};

// Mobile Safari numeric input fix
const handleNumericInput = (value: string, onChange: (num: number) => void) => {
  if (value === '') {
    onChange(0);
    return;
  }
  
  const numericValue = value.replace(/\D/g, '');
  const parsed = parseInt(numericValue, 10);
  const finalValue = isNaN(parsed) || parsed < 1 ? 1 : parsed;
  
  onChange(finalValue);
};

export default function RunIntervalBuilder({ intervals, onChange, isMetric }: RunIntervalBuilderProps) {
  const [selectedIntervals, setSelectedIntervals] = useState<string[]>([]);
  const [blockRepeatCount, setBlockRepeatCount] = useState(1);

  // Auto-add first interval when component mounts and intervals array is empty
  useEffect(() => {
    if (intervals.length === 0) {
      const starterInterval: RunInterval = {
        id: Date.now().toString(),
        time: '',
        distance: '',
        duration: 0
      };
      onChange([starterInterval]);
    }
  }, [intervals.length, onChange]);

  const addInterval = (e?: React.MouseEvent) => {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    const newInterval: RunInterval = {
      id: Date.now().toString(),
      time: '',
      distance: '',
      duration: 0
    };
    onChange([...intervals, newInterval]);
  };

  const updateInterval = (id: string, updates: Partial<RunInterval>) => {
    onChange(intervals.map(interval =>
      interval.id === id ? { ...interval, ...updates } : interval
    ));
  };

  const duplicateInterval = (id: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    const interval = intervals.find(i => i.id === id);
    if (interval) {
      const duplicate = { ...interval, id: Date.now().toString() };
      onChange([...intervals, duplicate]);
    }
  };

  const deleteInterval = (id: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    onChange(intervals.filter(interval => interval.id !== id));
  };

  const toggleIntervalSelection = (id: string) => {
    setSelectedIntervals(prev =>
      prev.includes(id) ? prev.filter(i => i !== id) : [...prev, id]
    );
  };

  const createBlock = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (selectedIntervals.length === 0) return;

    const selectedIntervalsData = intervals.filter(i =>
      selectedIntervals.includes(i.id));

    const blockSummary = selectedIntervalsData.map(i => {
      let segmentDesc = '';
      if (i.time) {
        segmentDesc += i.time;
      }
      if (i.effortLabel) {
        segmentDesc += ` @ ${i.effortLabel}`;
      } else if (i.paceTarget) {
        segmentDesc += ` @ ${i.paceTarget}`;
      } else if (i.bpmTarget) {
        segmentDesc += ` @ ${i.bpmTarget}`;
      } else if (i.rpeTarget) {
        segmentDesc += ` @ RPE ${i.rpeTarget}`;
      }
      return segmentDesc.trim();
    }).filter(desc => desc.length > 0).join(' + ');

    const totalDuration = selectedIntervalsData.reduce((sum, i) => sum + (i.duration || 0), 0);

    const blockInterval: RunInterval = {
      id: Date.now().toString(),
      time: `${blockRepeatCount}x(${blockSummary})`,
      isRepeatBlock: true,
      repeatCount: blockRepeatCount,
      duration: totalDuration * blockRepeatCount,
      originalSegments: selectedIntervalsData.map(seg => ({
        ...seg,
        originalSegments: undefined
      }))
    };

    const remainingIntervals = intervals.filter(i =>
      !selectedIntervals.includes(i.id));
    onChange([...remainingIntervals, blockInterval]);
    setSelectedIntervals([]);
  };

  const unblockInterval = (id: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    const blockInterval = intervals.find(i => i.id === id);
    if (!blockInterval || !blockInterval.isRepeatBlock || !blockInterval.originalSegments) return;

    const restoredSegments = blockInterval.originalSegments.map(seg => ({
      ...seg,
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9)
    }));

    const updatedIntervals = intervals.filter(i => i.id !== id);
    onChange([...updatedIntervals, ...restoredSegments]);
  };

  const renderInterval = (interval: RunInterval, index: number) => {
    if (interval.isRepeatBlock) {
      return (
        <div key={interval.id} className="p-3 bg-blue-50">
          <div className="flex items-center gap-3 mb-3">
            <GripVertical className="h-4 w-4 text-muted-foreground" />
            <h4 className="font-medium flex-1 text-sm">
              <Repeat className="h-4 w-4 inline mr-2" />
              Repeat Block {intervals.filter(i => i.isRepeatBlock).findIndex(i => i.id === interval.id) + 1}
            </h4>
            <div className="flex gap-2">
              <Button
                type="button"
                onClick={(e) => unblockInterval(interval.id, e)}
                size="sm"
                variant="ghost"
                className="h-8 w-8 p-0"
                title="Break apart block"
              >
                <Edit className="h-3 w-3" />
              </Button>
              <Button
                type="button"
                onClick={(e) => duplicateInterval(interval.id, e)}
                size="sm"
                variant="ghost"
                className="h-8 w-8 p-0"
              >
                <Copy className="h-3 w-3" />
              </Button>
              <Button
                type="button"
                onClick={(e) => deleteInterval(interval.id, e)}
                size="sm"
                variant="ghost"
                className="h-8 w-8 p-0"
              >
                <Trash2 className="h-3 w-3" />
              </Button>
            </div>
          </div>

          <div className="bg-white p-3 border border-blue-200">
            <div className="text-xs font-medium text-blue-700 mb-1">
              Repeat Structure:
            </div>
            <div className="text-sm font-mono">
              {interval.time}
            </div>
            <div className="text-xs text-muted-foreground mt-1">
              Total: {Math.floor((interval.duration || 0) / 60)}:{((interval.duration || 0) % 60).toString().padStart(2, '0')}
            </div>
          </div>
        </div>
      );
    }

    return (
      <div key={interval.id} className="p-3">
        <div className="flex items-center gap-3 mb-3">
          <Checkbox
            checked={selectedIntervals.includes(interval.id)}
            onCheckedChange={() => toggleIntervalSelection(interval.id)}
          />
          <GripVertical className="h-4 w-4 text-muted-foreground" />
          <div className="flex-1">
            <Select
              value={interval.effortLabel || `Segment ${index + 1}`}
              onValueChange={(value) => {
                updateInterval(interval.id, { effortLabel: value });
              }}
            >
              <SelectTrigger className="bg-transparent p-0 h-auto font-medium text-sm border-gray-200">
                <div className="flex items-center">
                  <Activity className="h-4 w-4 mr-2" />
                  <SelectValue />
                </div>
              </SelectTrigger>
              <SelectContent className="bg-white border border-gray-200 shadow-xl">
                <SelectItem value={`Segment ${index + 1}`}>Segment {index + 1}</SelectItem>
                <SelectItem value="Warm up">Warm up</SelectItem>
                <SelectItem value="Easy">Easy</SelectItem>
                <SelectItem value="Tempo">Tempo</SelectItem>
                <SelectItem value="Threshold">Threshold</SelectItem>
                <SelectItem value="Hard">Hard</SelectItem>
                <SelectItem value="Recovery">Recovery</SelectItem>
                <SelectItem value="Cool down">Cool down</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="flex gap-2">
            <Button 
              type="button" 
              onClick={(e) => duplicateInterval(interval.id, e)} 
              size="sm" 
              variant="ghost" 
              className="h-8 w-8 p-0"
            >
              <Copy className="h-3 w-3" />
            </Button>
            <Button 
              type="button" 
              onClick={(e) => deleteInterval(interval.id, e)} 
              size="sm" 
              variant="ghost" 
              className="h-8 w-8 p-0"
            >
              <Trash2 className="h-3 w-3" />
            </Button>
          </div>
        </div>

        {/* Compact 3-column responsive grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 mb-3">
          <div>
            <Label className="text-xs text-muted-foreground">Time</Label>
            <Input
              placeholder="4:00"
              value={interval.time || ''}
              onChange={(e) => {
                handleTimeInput(e.target.value, (timeStr, duration) => {
                  updateInterval(interval.id, { time: timeStr, duration });
                });
              }}
              onBlur={(e) => {
                handleTimeBlur(e.target.value, (timeStr, duration) => {
                  updateInterval(interval.id, { time: timeStr, duration });
                });
              }}
              className="h-9 text-sm border-gray-300"
            />
          </div>
          <div>
            <Label className="text-xs text-muted-foreground">Pace (per {isMetric ? 'km' : 'mi'})</Label>
            <Input
              placeholder="8:30"
              value={interval.paceTarget || ''}
              onChange={(e) => updateInterval(interval.id, { paceTarget: e.target.value })}
              className="h-9 text-sm border-gray-300"
            />
          </div>
          <div>
            <Label className="text-xs text-muted-foreground">Distance ({isMetric ? 'km' : 'mi'})</Label>
            <Input
              placeholder="5.0"
              value={interval.distance || ''}
              onChange={(e) => updateInterval(interval.id, { distance: e.target.value })}
              className="h-9 text-sm border-gray-300"
            />
          </div>
          <div>
            <Label className="text-xs text-muted-foreground">BPM</Label>
            <Input
              placeholder="150-160"
              value={interval.bpmTarget || ''}
              onChange={(e) => updateInterval(interval.id, { bpmTarget: e.target.value })}
              className="h-9 text-sm border-gray-300"
            />
          </div>
          <div>
            <Label className="text-xs text-muted-foreground">RPE</Label>
            <Input
              placeholder="6-7"
              value={interval.rpeTarget || ''}
              onChange={(e) => updateInterval(interval.id, { rpeTarget: e.target.value })}
              className="h-9 text-sm border-gray-300"
            />
          </div>
        </div>

        {/* Compact repeat section */}
        <div className="flex items-center gap-3">
          <div className="flex items-center space-x-2">
            <Checkbox
              id={`repeat-${interval.id}`}
              checked={interval.repeat || false}
              onCheckedChange={(checked) => updateInterval(interval.id, { repeat: !!checked })}
            />
            <Label htmlFor={`repeat-${interval.id}`} className="text-xs">Repeat?</Label>
          </div>
          {interval.repeat && (
            <Input
              type="text"
              className="w-14 h-8 text-center text-sm border-gray-300"
              placeholder="2"
              value={interval.repeatCount === undefined ? '' : interval.repeatCount.toString()}
              onChange={(e) => {
                const value = e.target.value;
                if (value === '') {
                  updateInterval(interval.id, { repeatCount: undefined });
                } else {
                  handleNumericInput(value, (num) => {
                    updateInterval(interval.id, { repeatCount: num });
                  });
                }
              }}
              onFocus={(e) => e.target.select()}
            />
          )}
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-3">
      {/* Segments */}
      <div className="space-y-3">
        {intervals.map((interval, index) => renderInterval(interval, index))}

        {intervals.length === 0 && (
          <div className="text-center py-6 text-muted-foreground">
            <p className="text-sm">No segments yet</p>
            <p className="text-xs mt-1">Click "Add Segment" to get started</p>
          </div>
        )}

        {/* Bottom Add Segment button when segments exist */}
        {intervals.length > 0 && (
          <div className="text-center pt-4">
            <button 
              type="button" 
              onClick={addInterval} 
              className="px-4 py-2 text-black text-sm"
            >
              <Activity className="h-4 w-4 mr-2 inline" />
              Add Segment
            </button>
          </div>
        )}
      </div>

      {/* Floating repeat menu - more compact */}
      {selectedIntervals.length > 0 && (
        <div className="fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-white border border-gray-300 shadow-xl p-3 flex flex-col items-center gap-2 z-[60] max-w-xs w-full mx-4">
          <span className="text-xs font-medium text-gray-700">
            {selectedIntervals.length} segment{selectedIntervals.length > 1 ? 's' : ''} selected
          </span>
          <div className="flex items-center gap-2">
            <span className="text-xs text-gray-600">Repeat</span>
            <Input
              type="text"
              className="w-12 h-8 text-center text-sm font-semibold border-gray-300"
              value={blockRepeatCount.toString()}
              onChange={(e) => {
                handleNumericInput(e.target.value, setBlockRepeatCount);
              }}
              onFocus={(e) => e.target.select()}
              placeholder="1"
            />
            <span className="text-xs text-gray-600">times</span>
          </div>
          <div className="flex gap-2 w-full">
            <Button
              type="button"
              onClick={() => setSelectedIntervals([])}
              size="sm"
              variant="outline"
              className="flex-1 h-8 text-xs"
            >
              Cancel
            </Button>
            <Button
              type="button"
              onClick={createBlock}
              size="sm"
              className="bg-gray-500 hover:bg-gray-600 flex-1 h-8 text-xs"
            >
              <Repeat className="h-3 w-3 mr-1" />
              Create
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/StrengthCompletedView.tsx
import React, { useMemo, useState } from 'react';
import { useAppContext } from '@/contexts/AppContext';
import { Dumbbell } from 'lucide-react';

interface StrengthCompletedViewProps {
  workoutData: any;
}

interface CompletedExercise {
  id: string;
  name: string;
  sets: Array<{
    reps: number;
    weight: number;
    rir?: number;
    completed: boolean;
  }>;
}

const StrengthCompletedView: React.FC<StrengthCompletedViewProps> = ({ workoutData }) => {
  const { workouts } = useAppContext();
  const [showComparison, setShowComparison] = useState(false);

  // Normalize dates to YYYY-MM-DD format for comparison
  const normalizeDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toISOString().split('T')[0];
  };

  // Find the original planned workout for comparison
  const plannedWorkout = useMemo(() => {
    const planned = workouts.find(w => 
      normalizeDate(w.date) === normalizeDate(workoutData.date) && 
      w.type === 'strength' && 
      w.workout_status === 'planned' &&
      w.id !== workoutData.id
    );
    return planned;
  }, [workouts, workoutData.date, workoutData.id]);

  // Calculate volume for an exercise
  const calculateExerciseVolume = (sets: Array<{ reps: number; weight: number; completed?: boolean }>) => {
    return sets
      .filter(set => set.completed !== false)
      .reduce((total, set) => total + (set.reps * set.weight), 0);
  };

  // Calculate planned vs actual comparison for an exercise
  const getExerciseComparison = (exerciseName: string, completedSets: any[]) => {
    if (!plannedWorkout?.strength_exercises) return null;
    
    const plannedExercise = plannedWorkout.strength_exercises.find(
      ex => ex.name.toLowerCase() === exerciseName.toLowerCase()
    );
    
    if (!plannedExercise) return null;

    const plannedVolume = plannedExercise.sets * plannedExercise.reps * (plannedExercise.weight || 0);
    const actualVolume = calculateExerciseVolume(completedSets);
    const volumeDiff = actualVolume - plannedVolume;

    return {
      planned: {
        sets: plannedExercise.sets,
        reps: plannedExercise.reps,
        weight: plannedExercise.weight || 0,
        volume: plannedVolume
      },
      actual: {
        volume: actualVolume
      },
      diff: {
        volume: volumeDiff
      }
    };
  };

  // Determine which exercises array to use
  const getCompletedExercises = () => {
    if (workoutData.strength_exercises && workoutData.strength_exercises.length > 0) {
      return workoutData.strength_exercises;
    }
    
    if (workoutData.completed_exercises && workoutData.completed_exercises.length > 0) {
      return workoutData.completed_exercises;
    }
    
    return [];
  };

  const completedExercises = getCompletedExercises();

  // Calculate total workout statistics
  const workoutStats = useMemo(() => {
    let totalSets = 0;
    let totalReps = 0;
    let totalVolume = 0;
    
    completedExercises.forEach((exercise: CompletedExercise) => {
      if (!exercise.sets) return;
      
      const completedSets = exercise.sets.filter(set => set.completed !== false);
      totalSets += completedSets.length;
      totalReps += completedSets.reduce((sum, set) => sum + (set.reps || 0), 0);
      totalVolume += calculateExerciseVolume(completedSets);
    });

    return {
      actual: { sets: totalSets, reps: totalReps, volume: totalVolume }
    };
  }, [completedExercises]);

  return (
    <div className="space-y-6" style={{ fontFamily: 'Inter, sans-serif' }}>
      {/* Header - Single header with dumbbell icon */}
      <div className="space-y-2">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Dumbbell className="h-5 w-5 text-gray-600" />
            <h1 className="text-xl font-semibold text-gray-900">{workoutData.name}</h1>
          </div>
        </div>
        <div className="flex items-center gap-4 text-sm text-gray-600">
          <span>{workoutData.duration || 0} min</span>
          <span>•</span>
          <span className="font-medium">{workoutStats.actual.volume.toLocaleString()} lbs total</span>
        </div>
        
        {/* Compare to Plan button */}
        {plannedWorkout && (
          <div className="pt-2">
            <button
              onClick={() => setShowComparison(!showComparison)}
              className="text-sm text-gray-600 hover:text-gray-700 font-medium"
            >
              {showComparison ? 'Hide Plan Comparison' : 'Compare to Plan →'}
            </button>
          </div>
        )}
      </div>

      {/* Exercises */}
      {showComparison && plannedWorkout ? (
        // Side-by-side comparison view
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Planned Column */}
          <div className="space-y-4">
            <h3 className="font-semibold text-blue-600 border-b border-blue-200 pb-2">PLANNED</h3>
            {plannedWorkout.strength_exercises?.map((exercise: any, index: number) => (
              <div key={index} className="space-y-2">
                <div className="flex items-center justify-between">
                  <h4 className="font-medium text-gray-900">{exercise.name}</h4>
                  <span className="text-sm text-gray-600">
                    {((exercise.sets || 0) * (exercise.reps || 0) * (exercise.weight || 0)).toLocaleString()} lbs
                  </span>
                </div>
                <div className="text-sm text-gray-600">
                  {exercise.sets || 0} sets × {exercise.reps || 0} reps @ {exercise.weight || 0} lbs
                </div>
              </div>
            ))}
          </div>

          {/* Completed Column */}
          <div className="space-y-4">
            <h3 className="font-semibold text-green-600 border-b border-green-200 pb-2">COMPLETED</h3>
            {completedExercises.map((exercise: CompletedExercise, index: number) => {
              if (!exercise.sets || !exercise.name) return null;
              const exerciseVolume = calculateExerciseVolume(exercise.sets);
              const comparison = getExerciseComparison(exercise.name, exercise.sets);
              
              return (
                <div key={exercise.id || index} className="space-y-2">
                  <div className="flex items-center justify-between">
                    <h4 className="font-medium text-gray-900">{exercise.name}</h4>
                    <div className="text-right">
                      <span className="text-sm text-gray-900">{exerciseVolume.toLocaleString()} lbs</span>
                      {comparison && comparison.diff.volume !== 0 && (
                        <div className={`text-xs ${comparison.diff.volume > 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {comparison.diff.volume > 0 ? '+' : ''}{comparison.diff.volume.toLocaleString()} lbs
                        </div>
                      )}
                    </div>
                  </div>
                  <div className="space-y-1">
                    {exercise.sets.map((set, setIndex) => (
                      <div key={setIndex} className="text-sm text-gray-600 flex justify-between">
                        <span>Set {setIndex + 1}: {set.reps} reps @ {set.weight} lbs</span>
                        {set.rir && <span>RIR: {set.rir}</span>}
                      </div>
                    ))}
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      ) : (
        // Clean completed view (default)
        <div className="space-y-6">
          {completedExercises.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              No completed exercises found
            </div>
          ) : (
            completedExercises.map((exercise: CompletedExercise, index: number) => {
              if (!exercise.sets || !exercise.name) return null;
              
              const exerciseVolume = calculateExerciseVolume(exercise.sets);

              return (
                <div key={exercise.id || index} className="space-y-3">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="font-semibold text-gray-900">{exercise.name}</h3>
                    </div>
                    <div className="text-right">
                      <div className="text-sm font-medium text-gray-900">
                        {exerciseVolume.toLocaleString()} lbs
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <div className="grid grid-cols-4 gap-2 text-xs font-medium text-gray-500 pb-1 border-b border-gray-100">
                      <span>Set</span>
                      <span>Weight</span>
                      <span>Reps</span>
                      <span>RIR</span>
                    </div>
                    
                    {exercise.sets.map((set, setIndex) => {
                      return (
                        <div key={setIndex} className="grid grid-cols-4 gap-2 text-sm">
                          <span className="text-gray-600">{setIndex + 1}</span>
                          <span className="font-medium">
                            {set.weight || 0} lbs
                          </span>
                          <span>
                            {set.reps || 0}
                          </span>
                          <span className="text-gray-500">{set.rir || '-'}</span>
                        </div>
                      );
                    })}
                  </div>
                </div>
              );
            })
          )}
        </div>
      )}

      {/* Notes Section */}
      {workoutData.userComments && (
        <div className="p-4 bg-gray-50">
          <h3 className="font-medium text-gray-900 mb-2">Notes</h3>
          <p className="text-sm text-gray-700">{workoutData.userComments}</p>
        </div>
      )}

      {/* Workout Statistics */}
      <div className="p-4 bg-white border-t border-gray-200">
        <div className="grid grid-cols-3 gap-4 text-center">
          <div>
            <div className="text-lg font-semibold text-gray-900">{workoutStats.actual.sets}</div>
            <div className="text-xs text-gray-500">Total Sets</div>
          </div>
          <div>
            <div className="text-lg font-semibold text-gray-900">{workoutStats.actual.reps}</div>
            <div className="text-xs text-gray-500">Total Reps</div>
          </div>
          <div>
            <div className="text-lg font-semibold text-gray-900">{workoutStats.actual.volume.toLocaleString()}</div>
            <div className="text-xs text-gray-500">Volume (lbs)</div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default StrengthCompletedView;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/StrengthExerciseBuilder.tsx
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Copy, Trash2, ChevronRight, Dumbbell } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

export interface StrengthExercise {
  id: string;
  name: string;
  sets: number;
  reps: number;
  weight?: number;
  notes?: string;
  weightMode: 'same' | 'individual';
  individualWeights?: number[];
  completed_sets?: Array<{ reps: number; weight: number; rir?: number; completed: boolean }>;
  oneRepMax?: number; // Add 1RM to exercise
}

interface StrengthExerciseBuilderProps {
  exercises: StrengthExercise[];
  onChange: (exercises: StrengthExercise[]) => void;
  isCompleted?: boolean;
  isMetric?: boolean;
}

// Common exercise names for autopopulation
const commonExercises = [
  'Deadlift', 'Squat', 'Bench Press', 'Overhead Press', 'Barbell Row',
  'Romanian Deadlift', 'Front Squat', 'Incline Bench Press', 'Decline Bench Press',
  'Barbell Curl', 'Close Grip Bench Press', 'Bent Over Row', 'Sumo Deadlift',
  'Dumbbell Press', 'Dumbbell Row', 'Dumbbell Curls', 'Dumbbell Flyes',
  'Lateral Raises', 'Tricep Extensions', 'Hammer Curls', 'Chest Flyes',
  'Shoulder Press', 'Single Arm Row', 'Bulgarian Split Squats',
  'Push-ups', 'Pull-ups', 'Chin-ups', 'Dips', 'Planks', 'Burpees',
  'Mountain Climbers', 'Lunges', 'Jump Squats', 'Pike Push-ups',
  'Handstand Push-ups', 'L-Sits', 'Pistol Squats', 'Ring Dips',
  'Lat Pulldown', 'Cable Row', 'Leg Press', 'Leg Curls', 'Leg Extensions',
  'Cable Crossover', 'Tricep Pushdown', 'Face Pulls', 'Cable Curls',
  'Kettlebell Swings', 'Turkish Get-ups', 'Kettlebell Snatches',
  'Goblet Squats', 'Kettlebell Press', 'Kettlebell Rows'
];

export default function StrengthExerciseBuilder({ exercises, onChange, isCompleted = false, isMetric = false }: StrengthExerciseBuilderProps) {
  const [activeDropdown, setActiveDropdown] = useState<string | null>(null);
  const [showNotes, setShowNotes] = useState<{[key: string]: boolean}>({});
  const [currentExerciseInput, setCurrentExerciseInput] = useState('');
  const [showAddExerciseSuggestions, setShowAddExerciseSuggestions] = useState(false);

  // Auto-add first exercise when component mounts and exercises array is empty
  useEffect(() => {
    if (exercises.length === 0 && !isCompleted) {
      const starterExercise: StrengthExercise = {
        id: Date.now().toString(),
        name: '',
        sets: 5,
        reps: 5,
        weightMode: 'same',
        completed_sets: []
      };
      onChange([starterExercise]);
    }
  }, [exercises.length, onChange, isCompleted]);

  // Calculate percentage of 1RM
  const calculatePercentage = (weight: number, oneRepMax: number): number => {
    if (!weight || !oneRepMax || oneRepMax === 0) return 0;
    return Math.round((weight / oneRepMax) * 100);
  };

  const getFilteredExercises = (searchTerm: string) => {
    return searchTerm.length > 0
      ? commonExercises
          .filter(exercise =>
            exercise.toLowerCase().includes(searchTerm.toLowerCase())
          )
          .slice(0, 8)
      : [];
  };

  const addExercise = (exerciseName?: string) => {
    const nameToAdd = exerciseName || currentExerciseInput.trim();
    
    const newExercise: StrengthExercise = {
      id: Date.now().toString(),
      name: nameToAdd,
      sets: 5,
      reps: 5,
      weightMode: 'same',
      completed_sets: []
    };
    
    onChange([...exercises, newExercise]);
    setCurrentExerciseInput('');
    setShowAddExerciseSuggestions(false);
  };

  const updateExercise = (id: string, updates: Partial<StrengthExercise>) => {
    onChange(exercises.map(exercise => {
      if (exercise.id === id) {
        const updated = { ...exercise, ...updates };
        // Update completed_sets array when sets change
        if (updates.sets && updates.sets !== exercise.sets) {
          updated.individualWeights = Array(updates.sets).fill(exercise.weight || 0);
          updated.completed_sets = Array(updates.sets).fill(null).map(() => ({ 
            reps: 0, 
            weight: 0, 
            rir: 0, 
            completed: false 
          }));
        }
        return updated;
      }
      return exercise;
    }));
  };

  const updateIndividualWeight = (exerciseId: string, setIndex: number, weight: number) => {
    const exercise = exercises.find(e => e.id === exerciseId);
    if (exercise && exercise.individualWeights) {
      const newWeights = [...exercise.individualWeights];
      newWeights[setIndex] = weight;
      updateExercise(exerciseId, { individualWeights: newWeights });
    }
  };

  const duplicateExercise = (id: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    const exercise = exercises.find(e => e.id === id);
    if (exercise) {
      const duplicate = { ...exercise, id: Date.now().toString() };
      onChange([...exercises, duplicate]);
    }
  };

  const deleteExercise = (id: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    onChange(exercises.filter(exercise => exercise.id !== id));
  };

  const updateCompletedSet = (exerciseId: string, setIndex: number, updates: { reps?: number; weight?: number; rir?: number }) => {
    const exercise = exercises.find(e => e.id === exerciseId);
    if (exercise && exercise.completed_sets) {
      const newCompletedSets = [...exercise.completed_sets];
      newCompletedSets[setIndex] = { ...newCompletedSets[setIndex], ...updates };
      updateExercise(exerciseId, { completed_sets: newCompletedSets });
    }
  };

  const handleExerciseNameChange = (exerciseId: string, value: string) => {
    updateExercise(exerciseId, { name: value });
    setActiveDropdown(value.length > 0 ? exerciseId : null);
  };

  const selectExercise = (exerciseId: string, exerciseName: string) => {
    updateExercise(exerciseId, { name: exerciseName });
    setActiveDropdown(null);
  };

  const toggleNotes = (exerciseId: string) => {
    setShowNotes(prev => ({ ...prev, [exerciseId]: !prev[exerciseId] }));
  };

  const handleAddExerciseInputChange = (value: string) => {
    setCurrentExerciseInput(value);
    setShowAddExerciseSuggestions(value.length > 0);
  };

  const handleAddExerciseSuggestionClick = (exerciseName: string) => {
    addExercise(exerciseName);
  };

  const handleAddExerciseKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      addExercise();
    }
    if (e.key === 'Escape') {
      setShowAddExerciseSuggestions(false);
    }
  };

  if (isCompleted) {
    return (
      <div className="space-y-4 -mx-4 px-0">
        {exercises.map((exercise, index) => (
          <div key={exercise.id} className="px-4 py-4">
            <h4 className="font-semibold text-lg mb-4 text-foreground" style={{fontFamily: 'Inter, sans-serif'}}>
              {exercise.name || `Exercise ${index + 1}`}
            </h4>
            
            <div className="space-y-3">
              {Array.from({ length: exercise.sets || 0 }).map((_, setIndex) => {
                const plannedWeight = exercise.weightMode === 'same' 
                  ? exercise.weight 
                  : exercise.individualWeights?.[setIndex];
                const completedSet = exercise.completed_sets?.[setIndex];
                const percentage = exercise.oneRepMax ? calculatePercentage(plannedWeight || 0, exercise.oneRepMax) : 0;
                
                return (
                  <div key={setIndex} className="bg-gray-50 p-3 -mx-4 px-4">
                    <div className="flex items-center justify-between mb-3">
                      <span className="font-semibold text-base text-foreground" style={{fontFamily: 'Inter, sans-serif'}}>
                        Set {setIndex + 1}
                      </span>
                      <span className="text-sm text-muted-foreground" style={{fontFamily: 'Inter, sans-serif'}}>
                        Planned: {exercise.reps || 0} reps @ {plannedWeight || 0} lbs
                        {percentage > 0 && ` (${percentage}%)`}
                      </span>
                    </div>
                    
                    <div className="grid grid-cols-3 gap-3">
                      <div>
                        <Label className="text-xs text-foreground mb-1 block" style={{fontFamily: 'Inter, sans-serif'}}>
                          Reps
                        </Label>
                        <Input
                          type="number"
                          placeholder={exercise.reps?.toString() || "0"}
                          value={completedSet?.reps || ''}
                          onChange={(e) => updateCompletedSet(exercise.id, setIndex, { reps: parseInt(e.target.value) || 0 })}
                          className="h-12 text-base border-gray-300 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
                          style={{fontFamily: 'Inter, sans-serif'}}
                        />
                      </div>
                      <div>
                        <Label className="text-xs text-foreground mb-1 block" style={{fontFamily: 'Inter, sans-serif'}}>
                          Weight (lbs)
                        </Label>
                        <Input
                          type="number"
                          placeholder={plannedWeight?.toString() || "0"}
                          value={completedSet?.weight || ''}
                          onChange={(e) => updateCompletedSet(exercise.id, setIndex, { weight: parseInt(e.target.value) || 0 })}
                          className="h-12 text-base border-gray-300 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
                          style={{fontFamily: 'Inter, sans-serif'}}
                        />
                      </div>
                      <div>
                        <Label className="text-xs text-foreground mb-1 block" style={{fontFamily: 'Inter, sans-serif'}}>
                          RIR
                        </Label>
                        <Input
                          type="number"
                          placeholder="0-5"
                          value={completedSet?.rir || ''}
                          onChange={(e) => updateCompletedSet(exercise.id, setIndex, { rir: parseInt(e.target.value) || 0 })}
                          className="h-12 text-base border-gray-300 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
                          style={{fontFamily: 'Inter, sans-serif'}}
                        />
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        ))}
        <div className="px-4 pt-4">
          <Button 
            type="button" 
            variant="clean"
            className="w-full h-12 text-muted-foreground hover:text-foreground"
            style={{
              fontFamily: 'Inter, sans-serif',
              fontWeight: 600,
              fontSize: '15px'
            }}
          >
            Save Workout
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-1 -mt-2">
      {exercises.map((exercise, index) => (
        <div key={exercise.id} className="space-y-1 first:pt-0">
          {/* Move buttons to top-right corner with minimal spacing */}
          <div className="flex items-center justify-end -mb-1">
            <div className="flex gap-1">
              <button 
                type="button" 
                onClick={(e) => duplicateExercise(exercise.id, e)} 
                className="p-1.5 text-gray-500 hover:bg-gray-50 bg-white focus:outline-none min-h-[32px] min-w-[32px] flex items-center justify-center transition-colors"
              >
                <Copy className="h-3.5 w-3.5" />
              </button>
              <button 
                type="button" 
                onClick={(e) => deleteExercise(exercise.id, e)} 
                className="p-1.5 text-gray-500 hover:bg-gray-50 bg-white focus:outline-none min-h-[32px] min-w-[32px] flex items-center justify-center transition-colors"
              >
                <Trash2 className="h-3.5 w-3.5" />
              </button>
            </div>
          </div>
          
          <div className="space-y-2">
            {/* Exercise name input with Dumbbell icon - reduced height */}
            <div className="relative">
              <div className="flex items-center border border-gray-200 bg-white">
                <div className="pl-2 text-gray-400">
                  <Dumbbell className="h-4 w-4" />
                </div>
                <Input
                  placeholder="Add exercise..."
                  value={exercise.name}
                  onChange={(e) => handleExerciseNameChange(exercise.id, e.target.value)}
                  onFocus={() => {
                    if (exercise.name.length > 0) {
                      setActiveDropdown(exercise.id);
                    }
                  }}
                  onBlur={() => {
                    // Delay closing to allow click on suggestions
                    setTimeout(() => setActiveDropdown(null), 200);
                  }}
                  className="min-h-[36px] text-sm border-gray-300"
                  style={{fontFamily: 'Inter, sans-serif'}}
                />
              </div>
              {activeDropdown === exercise.id && exercise.name.length > 0 && (
                <div className="absolute z-10 w-full mt-1 bg-white border border-gray-200 shadow-lg max-h-40 overflow-y-auto">
                  {getFilteredExercises(exercise.name).map((exerciseName) => (
                    <button
                      key={exerciseName}
                      type="button"
                      className="w-full px-3 py-2 text-left hover:bg-gray-50 focus:bg-gray-50 focus:outline-none text-sm min-h-[36px] flex items-center"
                      onMouseDown={(e) => e.preventDefault()} // Prevent blur from firing before click
                      onClick={() => selectExercise(exercise.id, exerciseName)}
                      style={{fontFamily: 'Inter, sans-serif'}}
                    >
                      {exerciseName}
                    </button>
                  ))}
                </div>
              )}
            </div>
            
            {/* Sets and Reps side by side - ALWAYS 2 columns, reduced height */}
            <div className="grid grid-cols-2 gap-2">
              <div>
                <Label className="text-xs text-muted-foreground mb-0.5 block" style={{fontFamily: 'Inter, sans-serif'}}>
                  Sets
                </Label>
                <Input
                  type="number"
                  value={exercise.sets || ''}
                  onChange={(e) => {
                    const value = e.target.value;
                    if (value === '') {
                      updateExercise(exercise.id, { sets: 0 });
                    } else {
                      const numValue = parseInt(value);
                      if (!isNaN(numValue) && numValue >= 0) {
                        updateExercise(exercise.id, { sets: numValue });
                      }
                    }
                  }}
                  className="min-h-[36px] text-sm border-gray-300 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
                  style={{fontFamily: 'Inter, sans-serif'}}
                  placeholder="5"
                />
              </div>
              <div>
                <Label className="text-xs text-muted-foreground mb-0.5 block" style={{fontFamily: 'Inter, sans-serif'}}>
                  Reps
                </Label>
                <Input
                  type="number"
                  value={exercise.reps || ''}
                  onChange={(e) => {
                    const value = e.target.value;
                    if (value === '') {
                      updateExercise(exercise.id, { reps: 0 });
                    } else {
                      const numValue = parseInt(value);
                      if (!isNaN(numValue) && numValue >= 0) {
                        updateExercise(exercise.id, { reps: numValue });
                      }
                    }
                  }}
                  className="min-h-[36px] text-sm border-gray-300 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
                  style={{fontFamily: 'Inter, sans-serif'}}
                  placeholder="5"
                />
              </div>
            </div>

            {/* Weight input with percentage display */}
            {exercise.weightMode === 'same' ? (
              <div>
                <Label className="text-xs text-muted-foreground mb-0.5 block" style={{fontFamily: 'Inter, sans-serif'}}>
                  Weight (lbs)
                </Label>
                <div className="relative">
                  <Input
                    type="number"
                    placeholder="185"
                    value={exercise.weight || ''}
                    onChange={(e) => {
                      const value = e.target.value;
                      if (value === '') {
                        updateExercise(exercise.id, { weight: undefined });
                      } else {
                        const numValue = parseInt(value);
                        if (!isNaN(numValue)) {
                          updateExercise(exercise.id, { weight: numValue });
                        }
                      }
                    }}
                    className="min-h-[36px] text-sm border-gray-300 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none pr-16"
                    style={{fontFamily: 'Inter, sans-serif'}}
                  />
                  {exercise.weight && exercise.oneRepMax && exercise.oneRepMax > 0 && (
                    <div className="absolute right-3 top-1/2 transform -translate-y-1/2 text-xs text-muted-foreground">
                      {calculatePercentage(exercise.weight, exercise.oneRepMax)}%
                    </div>
                  )}
                </div>
              </div>
            ) : (
              <div>
                <Label className="text-xs text-muted-foreground mb-0.5 block" style={{fontFamily: 'Inter, sans-serif'}}>
                  Weight per Set (lbs)
                </Label>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-1.5">
                  {Array.from({ length: exercise.sets }).map((_, setIndex) => (
                    <div key={setIndex} className="flex items-center gap-1.5">
                      <span className="text-xs w-10 text-muted-foreground" style={{fontFamily: 'Inter, sans-serif'}}>
                        Set {setIndex + 1}:
                      </span>
                      <div className="relative flex-1">
                        <Input
                          type="number"
                          placeholder="185"
                          value={exercise.individualWeights?.[setIndex] || ''}
                          onChange={(e) => {
                            const value = e.target.value;
                            if (value === '') {
                              updateIndividualWeight(exercise.id, setIndex, 0);
                            } else {
                              const numValue = parseInt(value);
                              if (!isNaN(numValue)) {
                                updateIndividualWeight(exercise.id, setIndex, numValue);
                              }
                            }
                          }}
                          className="min-h-[32px] text-xs border-gray-300 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none pr-10"
                          style={{fontFamily: 'Inter, sans-serif'}}
                        />
                        {exercise.individualWeights?.[setIndex] && exercise.oneRepMax && exercise.oneRepMax > 0 && (
                          <div className="absolute right-2 top-1/2 transform -translate-y-1/2 text-xs text-muted-foreground">
                            {calculatePercentage(exercise.individualWeights[setIndex], exercise.oneRepMax)}%
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Weight Structure and 1RM input side by side */}
            <div className="grid grid-cols-2 gap-2">
              <div>
                <Label className="text-xs text-muted-foreground mb-0.5 block" style={{fontFamily: 'Inter, sans-serif'}}>
                  Weight Structure
                </Label>
                <RadioGroup
                  value={exercise.weightMode}
                  onValueChange={(value: 'same' | 'individual') => {
                    updateExercise(exercise.id, { 
                      weightMode: value,
                      individualWeights: value === 'individual' ? Array(exercise.sets).fill(exercise.weight || 0) : undefined
                    });
                  }}
                  className="flex gap-3"
                >
                  <div className="flex items-center space-x-1">
                    <RadioGroupItem value="same" id={`same-${exercise.id}`} className="min-h-[12px] min-w-[12px]" />
                    <Label htmlFor={`same-${exercise.id}`} className="text-xs text-muted-foreground" style={{fontFamily: 'Inter, sans-serif'}}>
                      Same
                    </Label>
                  </div>
                  <div className="flex items-center space-x-1">
                    <RadioGroupItem value="individual" id={`individual-${exercise.id}`} className="min-h-[12px] min-w-[12px]" />
                    <Label htmlFor={`individual-${exercise.id}`} className="text-xs text-muted-foreground" style={{fontFamily: 'Inter, sans-serif'}}>
                      Different
                    </Label>
                  </div>
                </RadioGroup>
              </div>
              
              <div>
                <Label className="text-xs text-muted-foreground mb-0.5 block" style={{fontFamily: 'Inter, sans-serif'}}>
                  1RM
                </Label>
                <Input
                  type="number"
                  placeholder="225"
                  value={exercise.oneRepMax || ''}
                  onChange={(e) => {
                    const value = e.target.value;
                    if (value === '') {
                      updateExercise(exercise.id, { oneRepMax: undefined });
                    } else {
                      const numValue = parseInt(value);
                      if (!isNaN(numValue)) {
                        updateExercise(exercise.id, { oneRepMax: numValue });
                      }
                    }
                  }}
                  className="min-h-[36px] text-sm border-gray-300 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
                  style={{fontFamily: 'Inter, sans-serif'}}
                />
              </div>
            </div>

            {/* Ultra-compact Collapsible Notes */}
            <div>
              <button
                type="button"
                onClick={() => toggleNotes(exercise.id)}
                className="flex items-center gap-0.5 text-xs text-muted-foreground hover:text-foreground mb-0.5"
                style={{fontFamily: 'Inter, sans-serif'}}
              >
                <ChevronRight className={`h-2.5 w-2.5 transform transition-transform ${showNotes[exercise.id] ? 'rotate-90' : ''}`} />
                Notes
              </button>

              {showNotes[exercise.id] && (
                <Textarea
                  placeholder="Form cues, rest time, etc."
                  value={exercise.notes || ''}
                  onChange={(e) => updateExercise(exercise.id, { notes: e.target.value })}
                  rows={2}
                  className="min-h-[50px] text-xs border-gray-300"
                  style={{fontFamily: 'Inter, sans-serif'}}
                />
              )}
            </div>
          </div>
        </div>
      ))}
      
      {/* Bottom exercise search with suggestions - mirrors Log Strength layout, reduced height */}
      <div className="relative pt-1">
        <div className="flex items-center border border-gray-200 bg-white">
          <div className="pl-2 text-gray-400">
            <Dumbbell className="h-4 w-4" />
          </div>
          <Input
            placeholder="Add exercise..."
            value={currentExerciseInput}
            onChange={(e) => handleAddExerciseInputChange(e.target.value)}
            onKeyDown={handleAddExerciseKeyDown}
            onFocus={() => {
              if (currentExerciseInput.length > 0) {
                setShowAddExerciseSuggestions(true);
              }
            }}
            onBlur={() => {
              // Delay closing to allow click on suggestions
              setTimeout(() => setShowAddExerciseSuggestions(false), 200);
            }}
            className="h-9 text-sm border-gray-300"
            style={{ fontSize: '16px' }}
          />
        </div>
        
        {showAddExerciseSuggestions && getFilteredExercises(currentExerciseInput).length > 0 && (
          <div className="absolute top-10 left-0 right-0 bg-white border border-gray-200 shadow-lg z-10 max-h-48 overflow-y-auto">
            {getFilteredExercises(currentExerciseInput).map((exercise, index) => (
              <button
                key={index}
                onMouseDown={(e) => e.preventDefault()}
                onClick={() => handleAddExerciseSuggestionClick(exercise)}
                className="w-full text-left px-3 py-2 hover:bg-gray-50 text-sm min-h-[36px]"
              >
                {exercise}
              </button>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/StrengthLogger.tsx
import React, { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Plus, Trash2, ChevronDown, ChevronUp, Search } from 'lucide-react';
import { useAppContext } from '@/contexts/AppContext';

interface LoggedSet {
  reps: number;
  weight: number;
  rir?: number;
  completed: boolean;
  barType?: string;
}

interface LoggedExercise {
  id: string;
  name: string;
  sets: LoggedSet[];
  expanded?: boolean;
}

interface StrengthLoggerProps {
  onClose: () => void;
  scheduledWorkout?: any; // Optional scheduled workout to pre-populate
}

// Simple volume calculator for save button
const calculateTotalVolume = (exercises: LoggedExercise[]): number => {
  return exercises
    .filter(ex => ex.name.trim() && ex.sets.length > 0)
    .reduce((total, exercise) => {
      const completedSets = exercise.sets.filter(set => set.completed);
      const exerciseVolume = completedSets.reduce((sum, set) => sum + (set.reps * set.weight), 0);
      return total + exerciseVolume;
    }, 0);
};

// Plate Math Component
const PlateMath: React.FC<{ 
  weight: number; 
  barType: string;
  useImperial?: boolean;
}> = ({ weight, barType, useImperial = true }) => {
  const imperialPlates = [
    { weight: 45, count: 4, color: 'bg-blue-500' },
    { weight: 35, count: 2, color: 'bg-yellow-500' },
    { weight: 25, count: 2, color: 'bg-green-500' },
    { weight: 10, count: 2, color: 'bg-gray-500' },
    { weight: 5, count: 2, color: 'bg-red-500' },
    { weight: 2.5, count: 2, color: 'bg-purple-500' },
  ];

  // Bar types with their weights
  const barTypes = {
    'standard': { weight: 45, name: 'Barbell (45lb)' },
    'womens': { weight: 33, name: 'Women\'s (33lb)' },
    'safety': { weight: 45, name: 'Safety Squat (45lb)' },
    'ez': { weight: 25, name: 'EZ Curl (25lb)' },
    'trap': { weight: 60, name: 'Trap/Hex (60lb)' },
    'cambered': { weight: 55, name: 'Cambered (55lb)' },
    'swiss': { weight: 35, name: 'Swiss/Football (35lb)' },
    'technique': { weight: 15, name: 'Technique (15lb)' }
  };

  const currentBar = barTypes[barType as keyof typeof barTypes] || barTypes.standard;
  const barWeight = currentBar.weight;
  const unit = useImperial ? 'lb' : 'kg';

  const calculatePlates = () => {
    if (!weight || weight <= barWeight) {
      return { plates: [], possible: false };
    }

    const weightToLoad = weight - barWeight;
    const weightPerSide = weightToLoad / 2;

    if (weightPerSide <= 0) {
      return { plates: [], possible: true };
    }

    const result: Array<{weight: number, count: number, color: string}> = [];
    let remaining = weightPerSide;

    for (const plate of imperialPlates) {
      const maxUsable = Math.floor(remaining / plate.weight);
      const actualUse = Math.min(maxUsable, plate.count);
      
      if (actualUse > 0) {
        result.push({
          weight: plate.weight,
          count: actualUse,
          color: plate.color
        });
        remaining = Math.round((remaining - (actualUse * plate.weight)) * 100) / 100;
      }
    }

    return { plates: result, possible: remaining <= 0.1 };
  };

  const plateCalc = calculatePlates();

  return (
    <div className="mt-1 p-2 bg-gray-50 text-xs">
      <div className="text-gray-600 mb-1">{barWeight}{unit} bar + per side:</div>
      {plateCalc.plates.length > 0 ? (
        <div className="space-y-1">
          {plateCalc.plates.map((plate, index) => (
            <div key={index} className="flex items-center justify-between text-gray-600">
              <span>{plate.weight}{unit}</span>
              <span>{plate.count}x</span>
            </div>
          ))}
        </div>
      ) : (
        <span className="text-gray-500">Empty bar only</span>
      )}
      
      {!plateCalc.possible && weight > barWeight && (
        <div className="mt-1 text-red-600">
          Can't make exactly {weight}{unit} with standard plates
        </div>
      )}
    </div>
  );
};

export default function StrengthLogger({ onClose, scheduledWorkout }: StrengthLoggerProps) {
  const { workouts, addWorkout } = useAppContext();
  const [exercises, setExercises] = useState<LoggedExercise[]>([]);
  const [currentExercise, setCurrentExercise] = useState('');
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [expandedPlates, setExpandedPlates] = useState<{[key: string]: boolean}>({});
  const [expandedExercises, setExpandedExercises] = useState<{[key: string]: boolean}>({});
  const [workoutStartTime] = useState<Date>(new Date());
  const [isInitialized, setIsInitialized] = useState(false); // 🆕 Track initialization

  // Comprehensive exercise database
  const commonExercises = [
    'Deadlift', 'Squat', 'Back Squat', 'Front Squat', 'Bench Press', 'Overhead Press', 'Barbell Row',
    'Romanian Deadlift', 'Incline Bench Press', 'Decline Bench Press',
    'Barbell Curl', 'Close Grip Bench Press', 'Bent Over Row', 'Sumo Deadlift',
    'Dumbbell Press', 'Dumbbell Row', 'Dumbbell Curls', 'Dumbbell Flyes',
    'Lateral Raises', 'Tricep Extensions', 'Hammer Curls', 'Chest Flyes',
    'Shoulder Press', 'Single Arm Row', 'Bulgarian Split Squats',
    'Push-ups', 'Pull-ups', 'Chin-ups', 'Dips', 'Planks', 'Burpees',
    'Mountain Climbers', 'Lunges', 'Squats', 'Jump Squats', 'Pike Push-ups',
    'Handstand Push-ups', 'L-Sits', 'Pistol Squats', 'Ring Dips',
    'Lat Pulldown', 'Cable Row', 'Leg Press', 'Leg Curls', 'Leg Extensions',
    'Cable Crossover', 'Tricep Pushdown', 'Face Pulls', 'Cable Curls',
    'Kettlebell Swings', 'Turkish Get-ups', 'Kettlebell Snatches',
    'Goblet Squats', 'Kettlebell Press', 'Kettlebell Rows'
  ];

  // Get today's date string
  const getTodayDateString = () => {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const day = String(today.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  };

  // Calculate simple total volume for save button
  const currentTotalVolume = React.useMemo(() => {
    return calculateTotalVolume(exercises);
  }, [exercises]);

  // 🆕 Create empty starter exercise
  const createEmptyExercise = (): LoggedExercise => ({
    id: Date.now().toString(),
    name: '',
    sets: [{
      reps: 0,
      weight: 0,
      barType: 'standard',
      rir: undefined,
      completed: false
    }],
    expanded: true
  });

  // 🔧 FIXED: Proper initialization with cleanup
  useEffect(() => {
    console.log('🔄 StrengthLogger initializing...');
    
    // 🆕 Always start fresh - clear any existing state
    setExercises([]);
    setExpandedPlates({});
    setExpandedExercises({});
    setCurrentExercise('');
    setShowSuggestions(false);
    
    let workoutToLoad = scheduledWorkout;

    // If no scheduled workout provided, do a FRESH check for today's planned workout
    if (!workoutToLoad) {
      console.log('🔍 No scheduled workout, checking for today\'s planned workout...');
      const todayDate = getTodayDateString();
      
      // Get CURRENT workouts from the hub (not stale data)
      const currentWorkouts = workouts || [];
      const todaysStrengthWorkouts = currentWorkouts.filter(workout => 
        workout.date === todayDate && 
        workout.type === 'strength' && 
        workout.workout_status === 'planned'
      );

      console.log('📊 Found planned workouts for today:', todaysStrengthWorkouts);

      if (todaysStrengthWorkouts.length > 0) {
        workoutToLoad = todaysStrengthWorkouts[0];
        console.log('✅ Using planned workout:', workoutToLoad.name);
      } else {
        console.log('ℹ️ No planned strength workout found for today');
      }
    }

    if (workoutToLoad && workoutToLoad.strength_exercises && workoutToLoad.strength_exercises.length > 0) {
      console.log('📝 Pre-populating with planned workout exercises');
      // Pre-populate with scheduled workout data
      const prePopulatedExercises: LoggedExercise[] = workoutToLoad.strength_exercises.map((exercise: any, index: number) => ({
        id: exercise.id || `ex-${Date.now()}-${index}`,
        name: exercise.name || '',
        expanded: true,
        sets: Array.from({ length: exercise.sets || 3 }, (_, setIndex) => ({
          reps: exercise.reps || 0,
          weight: exercise.weight || 0,
          barType: 'standard',
          rir: undefined,
          completed: false
        }))
      }));
      
      setExercises(prePopulatedExercises);
    } else {
      console.log('🆕 Starting with empty exercise for manual logging');
      // Start with empty exercise for manual logging
      setExercises([createEmptyExercise()]);
    }
    
    setIsInitialized(true);
  }, [scheduledWorkout, workouts]); // 🆕 Depend on workouts to get fresh data

  // 🆕 Cleanup when component unmounts
  useEffect(() => {
    return () => {
      console.log('🧹 StrengthLogger cleanup - clearing state');
      setExercises([]);
      setExpandedPlates({});
      setExpandedExercises({});
      setCurrentExercise('');
      setShowSuggestions(false);
    };
  }, []);

  const togglePlateCalc = (exerciseId: string, setIndex: number) => {
    const key = `${exerciseId}-${setIndex}`;
    setExpandedPlates(prev => ({
      ...prev,
      [key]: !prev[key]
    }));
  };

  const toggleExerciseExpanded = (exerciseId: string) => {
    setExpandedExercises(prev => ({
      ...prev,
      [exerciseId]: !prev[exerciseId]
    }));
  };

  const getFilteredExercises = (searchTerm: string) => {
    return searchTerm.length > 0 
      ? commonExercises
          .filter(exercise => exercise.toLowerCase().includes(searchTerm.toLowerCase()))
          .slice(0, 8)
      : [];
  };

  const filteredExercises = getFilteredExercises(currentExercise);

  const addExercise = (exerciseName?: string) => {
    const nameToAdd = exerciseName || currentExercise.trim();
    
    if (!nameToAdd) return;
    
    const newExercise: LoggedExercise = {
      id: Date.now().toString(),
      name: nameToAdd,
      sets: [{
        reps: 0,
        weight: 0,
        barType: 'standard',
        rir: undefined,
        completed: false
      }],
      expanded: true
    };
    
    setExercises([...exercises, newExercise]);
    setCurrentExercise('');
    setShowSuggestions(false);
  };

  const updateExerciseName = (exerciseId: string, name: string, fromSuggestion = false) => {
    setExercises(exercises.map(exercise => 
      exercise.id === exerciseId 
        ? { ...exercise, name }
        : exercise
    ));
    
    if (fromSuggestion) {
      setShowSuggestions(false);
    }
  };

  const deleteExercise = (exerciseId: string) => {
    if (exercises.length === 1) {
      // 🔧 FIXED: Use the helper function for consistency
      setExercises([createEmptyExercise()]);
    } else {
      setExercises(exercises.filter(exercise => exercise.id !== exerciseId));
    }
  };

  const updateSet = (exerciseId: string, setIndex: number, updates: Partial<LoggedSet>) => {
    setExercises(exercises.map(exercise => {
      if (exercise.id === exerciseId) {
        const newSets = [...exercise.sets];
        newSets[setIndex] = { ...newSets[setIndex], ...updates };
        return { ...exercise, sets: newSets };
      }
      return exercise;
    }));
  };

  const addSet = (exerciseId: string) => {
    setExercises(exercises.map(exercise => {
      if (exercise.id === exerciseId) {
        const lastSet = exercise.sets[exercise.sets.length - 1];
        const newSet: LoggedSet = {
          reps: lastSet?.reps || 0,
          weight: lastSet?.weight || 0,
          barType: lastSet?.barType || 'standard',
          rir: undefined,
          completed: false
        };
        return { ...exercise, sets: [...exercise.sets, newSet] };
      }
      return exercise;
    }));
  };

  const saveWorkout = () => {
    const workoutEndTime = new Date();
    const durationMinutes = Math.round((workoutEndTime.getTime() - workoutStartTime.getTime()) / (1000 * 60));

    // Filter out exercises with no name or no sets
    const validExercises = exercises.filter(ex => ex.name.trim() && ex.sets.length > 0);

    if (validExercises.length === 0) {
      alert('Please add at least one exercise with a name to save the workout.');
      return;
    }

    // Prepare the workout data
    const completedWorkout = {
      id: scheduledWorkout?.id || Date.now().toString(),
      name: scheduledWorkout?.name || `Strength - ${new Date().toLocaleDateString()}`,
      type: 'strength' as const,
      date: scheduledWorkout?.date || new Date().toISOString().split('T')[0],
      description: validExercises
        .map(ex => `${ex.name}: ${ex.sets.filter(s => s.completed).length}/${ex.sets.length} sets`)
        .join(', '),
      duration: durationMinutes,
      strength_exercises: validExercises,
      workout_status: 'completed' as const,
      completedManually: true
    };

    console.log('🔍 Saving completed workout:', completedWorkout);

    // Use the app context to save - this will integrate with the main workout system
    addWorkout(completedWorkout);

    alert(`Workout saved! Total volume: ${currentTotalVolume.toLocaleString()}lbs`);
    onClose();
  };

  const handleInputChange = (value: string) => {
    setCurrentExercise(value);
    setShowSuggestions(value.length > 0);
  };

  const handleSuggestionClick = (exercise: string) => {
    addExercise(exercise);
  };

  const handleAddClick = () => {
    addExercise();
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      addExercise();
    }
    if (e.key === 'Escape') {
      setShowSuggestions(false);
    }
  };

  const [activeDropdown, setActiveDropdown] = useState<string | null>(null);

  // 🆕 Don't render until properly initialized
  if (!isInitialized) {
    return (
      <div className="min-h-screen pb-20">
        <div className="bg-white pb-4 mb-4">
          <div className="flex items-center w-full">
            <h1 className="text-xl font-medium text-gray-700">Loading...</h1>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen pb-20">
      {/* Header */}
      <div className="bg-white pb-4 mb-4">
        <div className="flex items-center w-full">
          <h1 className="text-xl font-medium text-gray-700">
            {scheduledWorkout ? `Log: ${scheduledWorkout.name}` : 'Log Strength'}
          </h1>
        </div>
      </div>

      {/* Main content container with proper mobile scrolling */}
      <div className="space-y-4 w-full pb-4">
        {exercises.map((exercise, exerciseIndex) => (
          <div key={exercise.id} className="bg-white">
            <div className="p-3">
              <div className="flex items-center justify-between gap-2">
                <div className="flex-1 relative">
                  <div className="flex items-center border border-gray-200 bg-white">
                    <div className="pl-3 text-gray-400">
                      <Search className="h-4 w-4" />
                    </div>
                    <Input
                      placeholder="Add exercise..."
                      value={exercise.name}
                      onChange={(e) => {
                        updateExerciseName(exercise.id, e.target.value);
                        setActiveDropdown(e.target.value.length > 0 ? exercise.id : null);
                      }}
                      onFocus={() => {
                        if (exercise.name.length > 0) {
                          setActiveDropdown(exercise.id);
                        }
                      }}
                      onBlur={() => {
                        setTimeout(() => setActiveDropdown(null), 150);
                      }}
                      className="h-10 text-base font-medium border-gray-300"
                      style={{ fontSize: '16px' }}
                      autoFocus={exerciseIndex === 0 && !exercise.name}
                    />
                  </div>
                  {activeDropdown === exercise.id && exercise.name.length > 0 && (
                    <div className="absolute top-11 left-0 right-0 bg-white border border-gray-200 shadow-lg z-50 max-h-32 overflow-y-auto">
                      {getFilteredExercises(exercise.name).map((suggestion, index) => (
                        <button
                          key={index}
                          onMouseDown={(e) => e.preventDefault()}
                          onClick={() => {
                            updateExerciseName(exercise.id, suggestion, true);
                            setActiveDropdown(null);
                          }}
                          className="w-full text-left px-3 py-2 hover:bg-gray-50 text-sm min-h-[36px] flex items-center"
                        >
                          {suggestion}
                        </button>
                      ))}
                    </div>
                  )}
                </div>
                <button
                  onClick={() => toggleExerciseExpanded(exercise.id)}
                  className="p-2 text-gray-500 hover:text-gray-700"
                >
                  {expandedExercises[exercise.id] ? 
                    <ChevronUp className="h-4 w-4" /> : 
                    <ChevronDown className="h-4 w-4" />
                  }
                </button>
                {exercises.length > 1 && (
                  <Button 
                    onClick={() => deleteExercise(exercise.id)} 
                    variant="ghost" 
                    size="sm"
                    className="text-gray-600 hover:text-gray-800 h-8 w-8 p-0 flex-shrink-0"
                  >
                    <Trash2 className="h-4 w-4" />
                  </Button>
                )}
              </div>
            </div>

            {(expandedExercises[exercise.id] !== false) && (
              <div className="px-3 py-2">
                {exercise.sets.map((set, setIndex) => (
                  <div key={setIndex} className="mb-3 pb-3 border-b border-gray-100 last:border-b-0 last:mb-0 last:pb-0">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium text-gray-700">Set {setIndex + 1}</span>
                      <button
                        onClick={() => updateSet(exercise.id, setIndex, { completed: !set.completed })}
                        className={`text-xs px-2 py-1 rounded ${
                          set.completed 
                            ? 'bg-green-100 text-green-700' 
                            : 'bg-gray-100 text-gray-600'
                        }`}
                      >
                        {set.completed ? '✓ Done' : 'Done'}
                      </button>
                    </div>
                    
                    <div className="grid grid-cols-3 gap-3 mb-2">
                      <div className="flex flex-col">
                        <label className="text-xs text-gray-500 mb-1">Reps</label>
                        <Input
                          type="number"
                          inputMode="numeric"
                          pattern="[0-9]*"
                          value={set.reps || ''}
                          onChange={(e) => updateSet(exercise.id, setIndex, { reps: parseInt(e.target.value) || 0 })}
                          className="h-9 text-center text-base border-gray-300"
                          style={{ fontSize: '16px' }}
                        />
                      </div>
                      <div className="flex flex-col">
                        <label className="text-xs text-gray-500 mb-1">Weight (lbs)</label>
                        <Input
                          type="number"
                          inputMode="numeric"
                          pattern="[0-9]*"
                          value={set.weight || ''}
                          onChange={(e) => updateSet(exercise.id, setIndex, { weight: parseInt(e.target.value) || 0 })}
                          className="h-9 text-center text-base border-gray-300"
                          style={{ fontSize: '16px' }}
                        />
                      </div>
                      <div className="flex flex-col">
                        <label className="text-xs text-gray-500 mb-1">RIR</label>
                        <Input
                          type="number"
                          inputMode="numeric"
                          pattern="[0-9]*"
                          value={set.rir || ''}
                          onChange={(e) => updateSet(exercise.id, setIndex, { rir: parseInt(e.target.value) || undefined })}
                          className="h-9 text-center text-base border-gray-300"
                          min="0"
                          max="5"
                          style={{ fontSize: '16px' }}
                        />
                      </div>
                    </div>

                    <div className="flex flex-col">
                      <div className="flex items-center justify-between">
                        <button
                          onClick={() => togglePlateCalc(exercise.id, setIndex)}
                          className="text-xs text-gray-500 flex items-center gap-1 hover:text-gray-700"
                        >
                          Plates
                          {expandedPlates[`${exercise.id}-${setIndex}`] ? 
                            <ChevronUp className="h-3 w-3" /> : 
                            <ChevronDown className="h-3 w-3" />
                          }
                        </button>
                        
                        <Select
                          value={set.barType || 'standard'}
                          onValueChange={(value) => updateSet(exercise.id, setIndex, { barType: value })}
                        >
                          <SelectTrigger className="h-6 text-xs bg-transparent p-0 m-0 text-gray-500 hover:text-gray-700 gap-1 w-auto border-none">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent className="bg-white border border-gray-200 shadow-xl z-50">
                            <SelectItem value="standard">Barbell (45lb)</SelectItem>
                            <SelectItem value="womens">Women's (33lb)</SelectItem>
                            <SelectItem value="safety">Safety Squat (45lb)</SelectItem>
                            <SelectItem value="ez">EZ Curl (25lb)</SelectItem>
                            <SelectItem value="trap">Trap/Hex (60lb)</SelectItem>
                            <SelectItem value="cambered">Cambered (55lb)</SelectItem>
                            <SelectItem value="swiss">Swiss/Football (35lb)</SelectItem>
                            <SelectItem value="technique">Technique (15lb)</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      
                      {expandedPlates[`${exercise.id}-${setIndex}`] && (
                        <PlateMath
                          weight={set.weight}
                          barType={set.barType || 'standard'}
                          useImperial={true}
                        />
                      )}
                    </div>
                  </div>
                ))}
                
                <Button 
                  onClick={() => addSet(exercise.id)} 
                  variant="ghost"
                  className="w-full h-9 text-sm text-gray-600 hover:text-gray-800 hover:bg-gray-50"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Add Set
                </Button>
              </div>
            )}
          </div>
        ))}

        {/* Add new exercise input */}
        <div className="relative bg-white p-3">
          <div className="flex items-center border border-gray-200 bg-white">
            <div className="pl-3 text-gray-400">
              <Search className="h-4 w-4" />
            </div>
            <Input
              placeholder="Add exercise..."
              value={currentExercise}
              onChange={(e) => handleInputChange(e.target.value)}
              onKeyDown={handleKeyDown}
              className="h-10 text-sm border-gray-300"
              style={{ fontSize: '16px' }}
            />
            {currentExercise && (
              <Button 
                onClick={handleAddClick}
                className="h-10 px-3 bg-transparent hover:bg-transparent text-black"
              >
                <Plus className="h-4 w-4" />
              </Button>
            )}
          </div>
          
          {showSuggestions && filteredExercises.length > 0 && (
            <div className="absolute top-16 left-3 right-3 bg-white border border-gray-200 shadow-lg z-50 max-h-64 overflow-y-auto">
              {filteredExercises.map((exercise, index) => (
                <button
                  key={index}
                  onMouseDown={(e) => e.preventDefault()}
                  onClick={() => handleSuggestionClick(exercise)}
                  className="w-full text-left px-3 py-2 hover:bg-gray-50 text-sm min-h-[40px]"
                >
                  {exercise}
                </button>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Fixed bottom save button */}
      <div className="fixed bottom-0 left-0 right-0 p-4 bg-white border-t border-gray-200 z-40">
        <Button 
          onClick={saveWorkout}
          className="w-full h-12 bg-black text-white hover:bg-gray-800 text-base font-medium"
        >
          Save Workout • {currentTotalVolume.toLocaleString()}lbs total
        </Button>
      </div>
    </div>
  );
}

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/StrengthPlansView.tsx
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ArrowLeft, Dumbbell } from 'lucide-react';

interface OneRepMax {
  id: string;
  exercise: string;
  weight: number;
}

interface StrengthPlansViewProps {
  onClose: () => void;
  onBuildWorkout?: (type: string) => void;
}

const StrengthPlansView: React.FC<StrengthPlansViewProps> = ({ 
  onClose, 
  onBuildWorkout 
}) => {
  const [oneRepMaxes, setOneRepMaxes] = useState<OneRepMax[]>([]);
  
  const [currentExercise, setCurrentExercise] = useState('');
  const [showSuggestions, setShowSuggestions] = useState(false);

  // Common strength exercises for autocomplete
  const commonExercises = [
    'Bench Press', 'Squat', 'Deadlift', 'Overhead Press', 'Barbell Row',
    'Incline Bench Press', 'Front Squat', 'Romanian Deadlift', 'Pull-ups',
    'Dips', 'Close Grip Bench Press', 'Sumo Deadlift', 'Bulgarian Split Squat'
  ];

  const filteredExercises = currentExercise.length > 0
    ? commonExercises
        .filter(exercise => 
          exercise.toLowerCase().includes(currentExercise.toLowerCase()) &&
          !oneRepMaxes.some(orm => orm.exercise.toLowerCase() === exercise.toLowerCase())
        )
        .slice(0, 6)
    : [];

  const handleAddExercise = (exerciseName?: string) => {
    const nameToAdd = exerciseName || currentExercise.trim();
    
    if (!nameToAdd) return;
    
    // Check if exercise already exists
    if (oneRepMaxes.some(orm => orm.exercise.toLowerCase() === nameToAdd.toLowerCase())) {
      return;
    }

    const newORM: OneRepMax = {
      id: Date.now().toString(),
      exercise: nameToAdd,
      weight: 0
    };

    setOneRepMaxes([...oneRepMaxes, newORM]);
    setCurrentExercise('');
    setShowSuggestions(false);
  };

  const handleUpdateWeight = (id: string, weight: number) => {
    setOneRepMaxes(oneRepMaxes.map(orm => 
      orm.id === id ? { ...orm, weight } : orm
    ));
  };

  const handleDeleteExercise = (id: string) => {
    setOneRepMaxes(oneRepMaxes.filter(orm => orm.id !== id));
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      if (filteredExercises.length > 0) {
        handleAddExercise(filteredExercises[0]);
      } else {
        handleAddExercise();
      }
    }
  };

  return (
    <div className="space-y-6" style={{ fontFamily: 'Inter, sans-serif' }}>
      {/* Header */}
      <div className="space-y-4">
        <Button
          onClick={onClose}
          variant="ghost"
          className="flex items-center gap-2 p-0 h-auto text-gray-600 hover:text-black"
        >
          <ArrowLeft className="h-4 w-4" />
          Back to Plans
        </Button>
        
        <div className="flex items-center gap-2">
          <Dumbbell className="h-6 w-6 text-gray-600" />
          <h1 className="text-2xl font-semibold text-gray-900">Strength Plans</h1>
        </div>
      </div>

      {/* Current Plan */}
      <div className="space-y-3">
        <h2 className="text-lg font-medium text-gray-900">Current Plan</h2>
        <div className="space-y-1">
          <div className="font-medium text-gray-900">Strength Foundation - Wk 3</div>
          <div className="text-sm text-muted-foreground">5/3/1 Progressive Overload</div>
        </div>
      </div>

      {/* Categories */}
      <div className="space-y-3">
        <div className="space-y-4">
          <div 
            onClick={() => onBuildWorkout?.('strength')}
            className="cursor-pointer"
          >
            <h3 className="font-medium text-gray-900">Build Your Own</h3>
          </div>
          <div>
            <h3 className="font-medium text-gray-900">Strength</h3>
          </div>
          <div>
            <h3 className="font-medium text-gray-900">Hypertrophy</h3>
          </div>
          <div>
            <h3 className="font-medium text-gray-900">Full Body</h3>
          </div>
        </div>
      </div>

      {/* 1RM Management - moved to bottom */}
      <div className="space-y-3">
        <h3 className="text-sm font-medium text-gray-900">1 Rep Max</h3>
        
        {/* Existing 1RMs */}
        {oneRepMaxes.length > 0 && (
          <div className="space-y-2">
            {oneRepMaxes.map((orm) => (
              <div key={orm.id} className="flex items-center justify-between">
                <span className="text-sm text-gray-900">{orm.exercise}</span>
                <div className="flex items-center gap-2">
                  <Input
                    type="number"
                    value={orm.weight || ''}
                    onChange={(e) => handleUpdateWeight(orm.id, parseInt(e.target.value) || 0)}
                    className="w-24 min-h-[40px] text-center text-base border-gray-300 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
                    style={{fontFamily: 'Inter, sans-serif'}}
                    placeholder="0"
                  />
                  <span className="text-xs text-muted-foreground">lbs</span>
                  <button
                    onClick={() => handleDeleteExercise(orm.id)}
                    className="text-gray-400 hover:text-red-500 p-1 h-5 w-5 text-xs"
                  >
                    ×
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Add Exercise */}
        <div className="relative">
          <div className="flex items-center border border-gray-200 bg-white rounded-lg">
            <button
              onClick={() => {
                if (currentExercise.trim()) {
                  handleAddExercise();
                }
              }}
              className="pl-3 pr-2 text-gray-400 hover:text-gray-600"
            >
              +
            </button>
            <Input
              placeholder="Add exercise..."
              value={currentExercise}
              onChange={(e) => {
                setCurrentExercise(e.target.value);
                setShowSuggestions(e.target.value.length > 0);
              }}
              onKeyDown={handleKeyDown}
              onFocus={() => {
                if (currentExercise.length > 0) {
                  setShowSuggestions(true);
                }
              }}
              onBlur={() => {
                setTimeout(() => setShowSuggestions(false), 200);
              }}
              className="border-0 focus:ring-0 rounded-l-none min-h-[32px] text-sm"
              style={{fontFamily: 'Inter, sans-serif'}}
            />
          </div>

          {/* Exercise Suggestions */}
          {showSuggestions && filteredExercises.length > 0 && (
            <div className="absolute top-full left-0 right-0 bg-white border border-gray-200 shadow-lg z-10 max-h-48 overflow-y-auto rounded-lg mt-1">
              {filteredExercises.map((exercise, index) => (
                <button
                  key={index}
                  onMouseDown={(e) => e.preventDefault()}
                  onClick={() => handleAddExercise(exercise)}
                  className="w-full text-left px-3 py-2 hover:bg-gray-50 text-sm"
                  style={{fontFamily: 'Inter, sans-serif'}}
                >
                  {exercise}
                </button>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default StrengthPlansView;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/StrengthSummaryView.tsx
import React, { useMemo } from 'react';
import { useAppContext } from '@/contexts/AppContext';

interface StrengthSummaryViewProps {
  workoutData: any;
}

interface HistoricalSession {
  date: string;
  sets: number;
  reps: number;
  weight: number;
  isPR: boolean;
  percentOfMax: number;
}

const StrengthSummaryView: React.FC<StrengthSummaryViewProps> = ({ workoutData }) => {
  const { workouts } = useAppContext();

  // Get current workout exercises
  const getCurrentExercises = () => {
    if (workoutData.strength_exercises && workoutData.strength_exercises.length > 0) {
      return workoutData.strength_exercises;
    }
    if (workoutData.completed_exercises && workoutData.completed_exercises.length > 0) {
      return workoutData.completed_exercises;
    }
    return [];
  };

  const currentExercises = getCurrentExercises();

  // Get historical data for each exercise
  const getHistoricalData = useMemo(() => {
    const exerciseHistory: { [key: string]: HistoricalSession[] } = {};

    currentExercises.forEach((currentExercise: any) => {
      const exerciseName = currentExercise.name;
      
      // Find all historical workouts with this exercise
      const historicalWorkouts = workouts
        .filter(w => 
          w.type === 'strength' && 
          w.workout_status === 'completed' &&
          (w.strength_exercises || w.completed_exercises)
        )
        .map(w => {
          const exercises = w.strength_exercises || w.completed_exercises || [];
          const exercise = exercises.find((ex: any) => 
            ex.name.toLowerCase() === exerciseName.toLowerCase()
          );
          
          if (!exercise) return null;

          // Calculate max weight for this session
          let maxWeight = 0;
          let totalSets = 0;
          let avgReps = 0;

          if (exercise.sets && Array.isArray(exercise.sets)) {
            // Completed exercise format
            const completedSets = exercise.sets.filter((set: any) => set.completed !== false);
            maxWeight = Math.max(...completedSets.map((set: any) => set.weight || 0));
            totalSets = completedSets.length;
            avgReps = completedSets.reduce((sum: number, set: any) => sum + (set.reps || 0), 0) / completedSets.length;
          } else {
            // Planned exercise format
            maxWeight = exercise.weight || 0;
            totalSets = exercise.sets || 0;
            avgReps = exercise.reps || 0;
          }

          return {
            date: w.date,
            weight: maxWeight,
            sets: totalSets,
            reps: Math.round(avgReps),
            workoutId: w.id
          };
        })
        .filter(Boolean)
        .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
        .slice(0, 4); // Last 4 sessions

      if (historicalWorkouts.length > 0) {
        // Calculate all-time max for PR detection and percentages
        const allTimeMax = Math.max(...historicalWorkouts.map(session => session.weight));
        
        exerciseHistory[exerciseName] = historicalWorkouts.map((session, index) => ({
          date: session.date,
          sets: session.sets,
          reps: session.reps,
          weight: session.weight,
          isPR: session.weight === allTimeMax && index === 0, // PR if it's max weight and most recent
          percentOfMax: allTimeMax > 0 ? Math.round((session.weight / allTimeMax) * 100) : 0
        }));
      }
    });

    return exerciseHistory;
  }, [workouts, currentExercises]);

  // Format date for display
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(today.getDate() - 1);

    const isToday = dateString === today.toLocaleDateString('en-CA');
    const isYesterday = dateString === yesterday.toLocaleDateString('en-CA');

    if (isToday) return 'Today';
    if (isYesterday) return 'Yesterday';
    
    return date.toLocaleDateString('en-US', { 
      month: 'short', 
      day: 'numeric' 
    });
  };

  return (
    <div className="space-y-6" style={{ fontFamily: 'Inter, sans-serif' }}>
      {Object.entries(getHistoricalData).map(([exerciseName, sessions]) => (
        <div key={exerciseName} className="space-y-3">
          <h3 className="font-semibold text-gray-900">{exerciseName} - Last {sessions.length} Sessions</h3>
          
          <div className="space-y-2">
            {sessions.map((session, index) => (
              <div key={index} className="flex justify-between text-sm">
                <span className="text-gray-600">
                  {formatDate(session.date)}: {session.sets}x{session.reps} @ {session.weight} lbs
                  {session.isPR && <span className="text-gray-900"> (PR)</span>}
                </span>
                <span className="text-gray-500">
                  {session.percentOfMax}% of max
                </span>
              </div>
            ))}
          </div>
        </div>
      ))}

      {Object.keys(getHistoricalData).length === 0 && (
        <div className="text-center py-8 text-gray-500">
          No historical data available
        </div>
      )}
    </div>
  );
};

export default StrengthSummaryView;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/StrengthTracker.tsx
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Plus, Check, X } from 'lucide-react';

interface Exercise {
  id: string;
  name: string;
  sets: number;
  reps: number;
  weight?: number;
  completed_sets: Array<{ reps: number; weight: number; completed: boolean }>;
}

interface StrengthTrackerProps {
  exercises: Exercise[];
  onUpdateExercise: (exerciseId: string, setIndex: number, data: { reps: number; weight: number }) => void;
  onCompleteSet: (exerciseId: string, setIndex: number) => void;
}

const StrengthTracker: React.FC<StrengthTrackerProps> = ({ exercises, onUpdateExercise, onCompleteSet }) => {
  const [completedData, setCompletedData] = useState<Record<string, Array<{reps: string; weight: string}>>>({});

  const updateCompletedData = (exerciseId: string, setIndex: number, field: 'reps' | 'weight', value: string) => {
    setCompletedData(prev => {
      const exerciseData = prev[exerciseId] || Array(exercises.find(e => e.id === exerciseId)?.sets || 0).fill({reps: '', weight: ''});
      const newData = [...exerciseData];
      newData[setIndex] = { ...newData[setIndex], [field]: value };
      return { ...prev, [exerciseId]: newData };
    });
  };

  return (
    <div className="space-y-4">
      {exercises.map((exercise) => (
        <Card key={exercise.id}>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span>{exercise.name}</span>
              <Badge variant="outline">
                {exercise.completed_sets.filter(s => s.completed).length} / {exercise.sets} sets
              </Badge>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {Array.from({ length: exercise.sets }, (_, index) => {
                const completedSet = exercise.completed_sets[index];
                const exerciseCompletedData = completedData[exercise.id] || [];
                const setCompletedData = exerciseCompletedData[index] || {reps: '', weight: ''};
                
                return (
                  <div key={index} className="border rounded-lg p-4">
                    <div className="flex items-center justify-between mb-3">
                      <div className="text-sm font-medium">Set {index + 1}</div>
                      {completedSet?.completed && (
                        <Badge className="bg-green-100 text-green-800">✓ Completed</Badge>
                      )}
                    </div>
                    
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <div className="text-sm text-muted-foreground mb-1">Planned</div>
                        <div className="text-sm font-medium">
                          {exercise.reps} reps @ {exercise.weight}kg
                        </div>
                      </div>
                      <div>
                        <div className="text-sm text-muted-foreground mb-1">Completed</div>
                        <div className="flex gap-2 items-center">
                          <Input
                            type="number"
                            placeholder={exercise.reps.toString()}
                            value={setCompletedData.reps}
                            onChange={(e) => updateCompletedData(exercise.id, index, 'reps', e.target.value)}
                            className="h-8 w-16 text-center"
                          />
                          <span className="text-xs text-muted-foreground">reps @</span>
                          <Input
                            type="number"
                            step="0.5"
                            placeholder={exercise.weight?.toString() || '0'}
                            value={setCompletedData.weight}
                            onChange={(e) => updateCompletedData(exercise.id, index, 'weight', e.target.value)}
                            className="h-8 w-16 text-center"
                          />
                          <span className="text-xs text-muted-foreground">kg</span>
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
};

export default StrengthTracker;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/SwimExport.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Smartphone, Watch, Waves } from 'lucide-react';
import { SwimWorkoutData } from '@/contexts/AppContext';

interface SwimExportProps {
  workoutName: string;
  swimData: SwimWorkoutData;
}

const SwimExport: React.FC<SwimExportProps> = ({ workoutName, swimData }) => {
  const handleGarminExport = () => {
    const garminData = {
      name: workoutName,
      type: 'swim',
      distance: swimData.totalDistance,
      strokeType: swimData.strokeType,
      targetPace: swimData.targetPacePer100,
      equipment: swimData.equipmentUsed
    };
    console.log('Exporting to Garmin:', garminData);
    alert('Swim workout exported to Garmin Connect!');
  };

  const handleAppleWatchExport = () => {
    console.log('Exporting to Apple Watch:', { workoutName, swimData });
    alert('Swim workout exported to Apple Watch!');
  };

  const handleFormGogglesExport = () => {
    console.log('Exporting to Form Goggles:', { workoutName, swimData });
    alert('Swim workout exported to Form Goggles!');
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Waves className="h-5 w-5" />
          Export Swim Workout
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="p-4 bg-gray-50 rounded-lg">
          <h4 className="font-medium mb-2">{workoutName}</h4>
          <div className="space-y-1 text-sm text-gray-600">
            <p>Distance: {swimData.totalDistance}m</p>
            <p>Stroke: {swimData.strokeType}</p>
            {swimData.targetPacePer100 && <p>Target Pace: {swimData.targetPacePer100}/100m</p>}
            {swimData.equipmentUsed.length > 0 && (
              <div className="flex gap-1 flex-wrap">
                <span>Equipment:</span>
                {swimData.equipmentUsed.map(eq => (
                  <Badge key={eq} variant="outline" className="text-xs">{eq}</Badge>
                ))}
              </div>
            )}
          </div>
        </div>
        
        <div className="grid gap-3">
          <Button onClick={handleGarminExport} className="flex items-center gap-2">
            <Watch className="h-4 w-4" />
            Export to Garmin Connect
          </Button>
          
          <Button onClick={handleAppleWatchExport} variant="outline" className="flex items-center gap-2">
            <Smartphone className="h-4 w-4" />
            Export to Apple Watch
          </Button>
          
          <Button onClick={handleFormGogglesExport} variant="outline" className="flex items-center gap-2">
            <Waves className="h-4 w-4" />
            Export to Form Goggles
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default SwimExport;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/SwimIntervalBuilder.tsx
import React, { useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Copy, Trash2, GripVertical, Waves } from 'lucide-react';

export interface SwimInterval {
  id: string;
  distance: string;
  targetRPE?: number;
  equipment: string;
  recoveryType: 'time' | 'distance';
  recovery: string;
  repeatCount: number;
  duration?: number;
}

interface SwimIntervalBuilderProps {
  intervals: SwimInterval[];
  onChange: (intervals: SwimInterval[]) => void;
  isMetric: boolean;
}

export default function SwimIntervalBuilder({ intervals, onChange, isMetric }: SwimIntervalBuilderProps) {
  
  // Auto-add first interval when component mounts and intervals array is empty
  useEffect(() => {
    if (intervals.length === 0) {
      const starterInterval: SwimInterval = {
        id: Date.now().toString(),
        distance: '',
        equipment: 'None',
        recoveryType: 'time',
        recovery: '',
        repeatCount: 1,
        duration: 0
      };
      onChange([starterInterval]);
    }
  }, [intervals.length, onChange]);

  const addInterval = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    const newInterval: SwimInterval = {
      id: Date.now().toString(),
      distance: '',
      equipment: 'None',
      recoveryType: 'time',
      recovery: '',
      repeatCount: 1,
      duration: 0
    };
    onChange([...intervals, newInterval]);
  };

  const updateInterval = (id: string, updates: Partial<SwimInterval>) => {
    onChange(intervals.map(interval =>
      interval.id === id ? { ...interval, ...updates } : interval
    ));
  };

  const duplicateInterval = (id: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    const interval = intervals.find(i => i.id === id);
    if (interval) {
      const duplicate = { ...interval, id: Date.now().toString() };
      onChange([...intervals, duplicate]);
    }
  };

  const deleteInterval = (id: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    onChange(intervals.filter(interval => interval.id !== id));
  };

  const generatePreview = (interval: SwimInterval) => {
    const rpe = interval.targetRPE ? ` @ RPE ${interval.targetRPE}` : '';
    const equipment = interval.equipment !== 'None' ? ` w/ ${interval.equipment.toLowerCase()}` : '';
    const distanceUnit = isMetric ? 'm' : 'yd';
    const recovery = interval.recoveryType === 'time' ?
      `${interval.recovery} rest` :
      `${interval.recovery}${distanceUnit} recovery`;
    
    return `${interval.repeatCount} x ${interval.distance}${distanceUnit}${rpe}${equipment} + ${recovery}`;
  };

  return (
    <div>
      <div className="space-y-4">
        {intervals.map((interval, index) => (
          <div key={interval.id} className="p-4 border border-gray-200">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-2">
                <GripVertical className="h-4 w-4 text-muted-foreground" />
                <h4 className="font-medium flex items-center">
                  <Waves className="h-4 w-4 mr-2" />
                  Segment {index + 1}
                </h4>
              </div>
              <div className="flex gap-2">
                <Button type="button" onClick={(e) => duplicateInterval(interval.id, e)} size="sm" variant="ghost" className="h-8 w-8 p-0">
                  <Copy className="h-4 w-4" />
                </Button>
                <Button type="button" onClick={(e) => deleteInterval(interval.id, e)} size="sm" variant="ghost" className="h-8 w-8 p-0">
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </div>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
              <div>
                <Label>Distance ({isMetric ? 'meters' : 'yards'})</Label>
                <Input
                  name={`swim-distance-${interval.id}`}
                  autoComplete="off"
                  placeholder="200"
                  value={interval.distance}
                  onChange={(e) => updateInterval(interval.id, { distance: e.target.value })}
                  className="border-gray-300"
                />
              </div>
              <div>
                <Label>Target RPE (1-10)</Label>
                <Input
                  type="number"
                  min="1"
                  max="10"
                  name={`swim-rpe-${interval.id}`}
                  autoComplete="off"
                  placeholder="5"
                  value={interval.targetRPE || ''}
                  onChange={(e) => updateInterval(interval.id, { targetRPE: parseInt(e.target.value) || undefined })}
                  className="border-gray-300"
                />
              </div>
              <div>
                <Label>Equipment</Label>
                <Select value={interval.equipment} onValueChange={(value) =>
                  updateInterval(interval.id, { equipment: value })
                }>
                  <SelectTrigger name={`swim-equipment-${interval.id}`} className="border-gray-300">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent className="bg-white border border-gray-200 shadow-xl">
                    <SelectItem value="None">None</SelectItem>
                    <SelectItem value="Fins">Fins</SelectItem>
                    <SelectItem value="Pull Buoy">Pull Buoy</SelectItem>
                    <SelectItem value="Snorkel">Snorkel</SelectItem>
                    <SelectItem value="Kickboard">Kickboard</SelectItem>
                    <SelectItem value="Paddles">Paddles</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label>Repeat Count</Label>
                <Input
                  type="number"
                  min="1"
                  name={`swim-repeat-${interval.id}`}
                  autoComplete="off"
                  value={interval.repeatCount}
                  onChange={(e) => updateInterval(interval.id, { repeatCount: parseInt(e.target.value) || 1 })}
                  className="border-gray-300"
                />
              </div>
            </div>
            
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-4">
              <div>
                <Label>Recovery Type</Label>
                <Select value={interval.recoveryType} onValueChange={(value: 'time' | 'distance') =>
                  updateInterval(interval.id, { recoveryType: value })
                }>
                  <SelectTrigger name={`swim-recovery-type-${interval.id}`} className="border-gray-300">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent className="bg-white border border-gray-200 shadow-xl">
                    <SelectItem value="time">Time</SelectItem>
                    <SelectItem value="distance">Distance</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label>
                  {interval.recoveryType === 'time'
                    ? 'Recovery Time (mm:ss)'
                    : `Recovery Distance (${isMetric ? 'm' : 'yd'})`
                  }
                </Label>
                <Input
                  name={`swim-recovery-${interval.id}`}
                  autoComplete="off"
                  placeholder={interval.recoveryType === 'time' ? '1:00' : '50'}
                  value={interval.recovery}
                  onChange={(e) => updateInterval(interval.id, { recovery: e.target.value })}
                  className="border-gray-300"
                />
              </div>
            </div>
            
            <div className="bg-gray-50 p-3 text-sm">
              <strong>Preview:</strong> {generatePreview(interval)}
            </div>
          </div>
        ))}
        
        {intervals.length === 0 && (
          <div className="text-center py-8 text-muted-foreground">
            No segments added yet. Click "Add Segment" to get started.
          </div>
        )}

        {/* Bottom Add Segment button when segments exist */}
        {intervals.length > 0 && (
          <div className="text-center pt-4">
            <button 
              type="button" 
              onClick={addInterval} 
              className="px-4 py-2 text-black text-sm"
            >
              <Waves className="h-4 w-4 mr-2 inline" />
              Add Segment
            </button>
          </div>
        )}
      </div>
    </div>
  );
}

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/SwimWorkoutForm.tsx
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { SwimWorkoutData } from '@/contexts/AppContext';
import { Waves } from 'lucide-react';

interface SwimWorkoutFormProps {
  swimData: SwimWorkoutData;
  onChange: (data: SwimWorkoutData) => void;
}

const STROKE_TYPES = [
  'Freestyle',
  'Backstroke', 
  'Breaststroke',
  'Butterfly',
  'Kick-Only'
] as const;

const EQUIPMENT_OPTIONS = [
  'Fins',
  'Snorkel',
  'Pull Buoy',
  'Paddles',
  'Kickboard'
];

const SwimWorkoutForm: React.FC<SwimWorkoutFormProps> = ({ swimData, onChange }) => {
  const handleEquipmentChange = (equipment: string, checked: boolean) => {
    const newEquipment = checked 
      ? [...swimData.equipmentUsed, equipment]
      : swimData.equipmentUsed.filter(e => e !== equipment);
    
    onChange({ ...swimData, equipmentUsed: newEquipment });
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Waves className="h-5 w-5" />
          Swim Workout Details
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <Label htmlFor="swim-total-distance">Total Distance (meters)</Label>
          <Input
            id="swim-total-distance"
            name="swim-total-distance"
            type="number"
            autoComplete="off"
            value={swimData.totalDistance}
            onChange={(e) => onChange({ 
              ...swimData, 
              totalDistance: parseInt(e.target.value) || 0 
            })}
            placeholder="1500"
            min="0"
          />
        </div>

        <div>
          <Label htmlFor="swim-target-pace">Target Pace per 100m</Label>
          <Input
            id="swim-target-pace"
            name="swim-target-pace"
            autoComplete="off"
            value={swimData.targetPacePer100}
            onChange={(e) => onChange({ 
              ...swimData, 
              targetPacePer100: e.target.value 
            })}
            placeholder="1:30"
          />
        </div>

        <div>
          <Label htmlFor="swim-stroke-type">Stroke Type</Label>
          <Select 
            value={swimData.strokeType} 
            onValueChange={(value: typeof STROKE_TYPES[number]) => 
              onChange({ ...swimData, strokeType: value })
            }
          >
            <SelectTrigger id="swim-stroke-type" name="swim-stroke-type">
              <SelectValue placeholder="Select stroke type" />
            </SelectTrigger>
            <SelectContent>
              {STROKE_TYPES.map(stroke => (
                <SelectItem key={stroke} value={stroke}>
                  {stroke}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        <div>
          <Label>Equipment Used</Label>
          <div className="grid grid-cols-2 gap-2 mt-2">
            {EQUIPMENT_OPTIONS.map(equipment => (
              <div key={equipment} className="flex items-center space-x-2">
                <Checkbox
                  id={equipment}
                  checked={swimData.equipmentUsed.includes(equipment)}
                  onCheckedChange={(checked) => 
                    handleEquipmentChange(equipment, checked as boolean)
                  }
                />
                <Label htmlFor={equipment} className="text-sm">
                  {equipment}
                </Label>
              </div>
            ))}
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default SwimWorkoutForm;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/TodaysEffort.tsx
import React, { useState, useEffect } from 'react';
import { useAppContext } from '@/contexts/AppContext';
import { Plus, Activity, Bike, Waves, Dumbbell, Move, ChevronDown, Calendar } from 'lucide-react';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';

interface TodaysEffortProps {
  selectedDate?: string;
  onAddEffort: (type: string, date?: string) => void;
  onViewCompleted: () => void;
  onEditEffort?: (workout: any) => void;
}

const TodaysEffort: React.FC<TodaysEffortProps> = ({ 
  selectedDate, 
  onAddEffort, 
  onViewCompleted, 
  onEditEffort 
}) => {
  const { useImperial, workouts, loading } = useAppContext();
  const [displayWorkouts, setDisplayWorkouts] = useState<any[]>([]);

  const today = new Date().toLocaleDateString('en-CA');
  const activeDate = selectedDate || today;

  const loadWorkoutsForDate = () => {
    if (workouts && workouts.length > 0) {
      console.log('🔍 All workouts for', activeDate, ':', workouts.filter((w: any) => w.date === activeDate));
      
      // 🚨 DEBUG: Check actual date formats
      console.log('🔍 DEBUG - First few workout dates:', workouts.slice(0, 3).map(w => ({
        name: w.name,
        date: w.date,
        dateType: typeof w.date,
        activeDate: activeDate,
        matches: w.date === activeDate
      })));
      
      // 🔧 FIXED: Filter by both date AND status
      const dateWorkouts = workouts.filter((w: any) => {
        const isCorrectDate = w.date === activeDate;
        
        // For today and future dates: show both planned AND completed workouts
        if (activeDate >= today) {
          const isPlanned = w.workout_status === 'planned' || !w.workout_status; // Handle missing status as planned
          const isCompleted = w.workout_status === 'completed';
          console.log(`Workout "${w.name}" - Date: ${isCorrectDate}, Status: ${w.workout_status}, IsPlanned: ${isPlanned}, IsCompleted: ${isCompleted}`);
          return isCorrectDate && (isPlanned || isCompleted); // ✅ FIXED: Show both planned AND completed
        } 
        // For past dates: show both planned and completed for reference
        else {
          console.log(`Past date workout "${w.name}" - Date: ${isCorrectDate}, Status: ${w.workout_status}`);
          return isCorrectDate;
        }
      });
      
      console.log('✅ Filtered workouts to display:', dateWorkouts);
      setDisplayWorkouts(dateWorkouts);
    } else {
      setDisplayWorkouts([]);
    }
  };

  // FIXED: React to selectedDate prop changes properly
  useEffect(() => {
    console.log('🔄 TodaysEffort useEffect triggered - selectedDate:', selectedDate, 'activeDate:', activeDate);
    loadWorkoutsForDate();
  }, [workouts, selectedDate]); // Changed from activeDate to selectedDate

  const getIcon = (type: string) => {
    switch (type) {
      case 'swim': return <Waves className="h-5 w-5" />;
      case 'ride': return <Bike className="h-5 w-5" />;
      case 'run': return <Activity className="h-5 w-5" />;
      case 'strength': return <Dumbbell className="h-5 w-5" />;
      case 'mobility': return <Move className="h-5 w-5" />;
      default: return <Activity className="h-5 w-5" />;
    }
  };

  const getIconColor = (workout: any) => {
    const isCompleted = workout.workout_status === 'completed';
    
    switch (workout.type) {
      case 'swim': return isCompleted ? 'text-cyan-300' : 'text-cyan-600';
      case 'ride': return isCompleted ? 'text-blue-300' : 'text-blue-600';
      case 'run': return isCompleted ? 'text-green-300' : 'text-green-600';
      case 'strength': return isCompleted ? 'text-orange-300' : 'text-orange-600';
      case 'mobility': return isCompleted ? 'text-purple-300' : 'text-purple-600';
      default: return isCompleted ? 'text-gray-300' : 'text-gray-600';
    }
  };

  // Format the date for display
  const formatDisplayDate = (dateString: string) => {
    const date = new Date(dateString + 'T00:00:00'); // Add time to avoid timezone issues
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(today.getDate() - 1);
    const tomorrow = new Date(today);
    tomorrow.setDate(today.getDate() + 1);

    // Check if it's today, yesterday, or tomorrow
    const isToday = dateString === today.toLocaleDateString('en-CA');
    const isYesterday = dateString === yesterday.toLocaleDateString('en-CA');
    const isTomorrow = dateString === tomorrow.toLocaleDateString('en-CA');

    if (isToday) {
      return 'Today';
    } else if (isYesterday) {
      return 'Yesterday';
    } else if (isTomorrow) {
      return 'Tomorrow';
    } else {
      // Format as "Mon, Jan 15" for other dates
      return date.toLocaleDateString('en-US', { 
        weekday: 'short', 
        month: 'short', 
        day: 'numeric' 
      });
    }
  };

  const isPastDate = activeDate < today;
  const isToday = activeDate === today;

  // Add Effort Dropdown Component
  const AddEffortDropdown = () => {
    if (isPastDate) {
      // Past dates: Only show Log options
      return (
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <button 
              className="text-black hover:text-gray-600 transition-colors text-sm font-medium flex items-center gap-2"
              style={{fontFamily: 'Inter, sans-serif'}}
            >
              <Plus className="h-4 w-4" />
              Log effort
              <ChevronDown className="h-3 w-3" />
            </button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="start">
            <DropdownMenuItem
              onClick={() => onAddEffort('log-run', activeDate)}
              className="cursor-pointer"
            >
              <Activity className="h-4 w-4 mr-2" />
              Log Run
            </DropdownMenuItem>
            <DropdownMenuItem
              onClick={() => onAddEffort('log-ride', activeDate)}
              className="cursor-pointer"
            >
              <Bike className="h-4 w-4 mr-2" />
              Log Ride
            </DropdownMenuItem>
            <DropdownMenuItem
              onClick={() => onAddEffort('log-swim', activeDate)}
              className="cursor-pointer"
            >
              <Waves className="h-4 w-4 mr-2" />
              Log Swim
            </DropdownMenuItem>
            <DropdownMenuItem
              onClick={() => onAddEffort('log-strength', activeDate)}
              className="cursor-pointer"
            >
              <Dumbbell className="h-4 w-4 mr-2" />
              Log Strength
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      );
    } else {
      // Today and future: Show Build options
      return (
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <button 
              className="text-black hover:text-gray-600 transition-colors text-sm font-medium flex items-center gap-2"
              style={{fontFamily: 'Inter, sans-serif'}}
            >
              <Plus className="h-4 w-4" />
              Add effort
              <ChevronDown className="h-3 w-3" />
            </button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="start">
            <DropdownMenuItem
              onClick={() => onAddEffort('run', activeDate)}
              className="cursor-pointer"
            >
              <Activity className="h-4 w-4 mr-2" />
              Run
            </DropdownMenuItem>
            <DropdownMenuItem
              onClick={() => onAddEffort('ride', activeDate)}
              className="cursor-pointer"
            >
              <Bike className="h-4 w-4 mr-2" />
              Ride
            </DropdownMenuItem>
            <DropdownMenuItem
              onClick={() => onAddEffort('swim', activeDate)}
              className="cursor-pointer"
            >
              <Waves className="h-4 w-4 mr-2" />
              Swim
            </DropdownMenuItem>
            <DropdownMenuItem
              onClick={() => onAddEffort('strength', activeDate)}
              className="cursor-pointer"
            >
              <Dumbbell className="h-4 w-4 mr-2" />
              Strength
            </DropdownMenuItem>
            <DropdownMenuItem
              onClick={() => onAddEffort('mobility', activeDate)}
              className="cursor-pointer"
            >
              <Move className="h-4 w-4 mr-2" />
              Mobility
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      );
    }
  };

  if (loading) {
    return (
      <div className="w-full py-2">
        <div className="text-center">
          <p className="text-muted-foreground text-sm">Loading...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full" style={{fontFamily: 'Inter, sans-serif'}}>
      {/* 🔥 COMPRESSED: Minimal header with inline layout */}
      <div className="flex items-center justify-between mb-3 px-4">
        <div className="flex items-center gap-2">
          <Calendar className="h-4 w-4 text-muted-foreground" />
          <span className="text-sm font-medium text-foreground">
            {formatDisplayDate(activeDate)}
          </span>
          {/* Show effort count inline */}
          {displayWorkouts.length > 0 && (
            <span className="text-xs text-muted-foreground">
              · {displayWorkouts.length} effort{displayWorkouts.length !== 1 ? 's' : ''}
            </span>
          )}
        </div>
        
        {/* Add effort button always visible */}
        <AddEffortDropdown />
      </div>

      {displayWorkouts.length === 0 ? (
        // 🔥 COMPRESSED: Minimal empty state
        <div className="w-full py-2 px-4">
          <div className="text-center">
            <p className="text-muted-foreground text-xs">
              {isPastDate 
                ? 'No effort logged' 
                : isToday 
                  ? 'No effort scheduled'
                  : 'No effort scheduled'
              }
            </p>
          </div>
        </div>
      ) : (
        // 🔥 COMPRESSED: Tight row of smaller workout symbols
        <div className="w-full px-4">
          <div className="flex items-center justify-center gap-4 py-3">
            {displayWorkouts.map((workout) => (
              <button
                key={workout.id}
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  console.log('🎯 Symbol clicked:', workout);
                  onEditEffort && onEditEffort(workout);
                }}
                onTouchStart={(e) => {
                  e.stopPropagation();
                }}
                onTouchEnd={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  console.log('🎯 Symbol touched:', workout);
                  onEditEffort && onEditEffort(workout);
                }}
                className={`p-3 rounded-lg active:scale-95 transition-transform cursor-pointer ${getIconColor(workout)}`}
                style={{ minWidth: '44px', minHeight: '44px' }}
              >
                {getIcon(workout.type)}
              </button>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default TodaysEffort;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/WorkoutBuilder.tsx
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import { Save, Clock, Trash2, Check, Dumbbell, ChevronRight, Activity, Bike, Waves, ChevronDown, Move, ArrowLeft, Sparkles } from 'lucide-react';
import RunIntervalBuilder, { RunInterval } from './RunIntervalBuilder';
import RideIntervalBuilder, { RideInterval } from './RideIntervalBuilder';
import SwimIntervalBuilder, { SwimInterval } from './SwimIntervalBuilder';
import StrengthExerciseBuilder, { StrengthExercise } from './StrengthExerciseBuilder';
import { useAppContext } from '@/contexts/AppContext';

interface WorkoutBuilderProps {
  onClose: () => void;
  initialType?: string;
  existingWorkout?: any;
  initialDate?: string;
  sourceContext?: string;
  onNavigateToPlans?: () => void;
  onOpenPlanBuilder?: () => void; // NEW: Add prop to open proper PlanBuilder
}

export default function WorkoutBuilder({ onClose, initialType, existingWorkout, initialDate, sourceContext, onNavigateToPlans, onOpenPlanBuilder }: WorkoutBuilderProps) {
  const { addWorkout, updateWorkout, deleteWorkout, useImperial, toggleUnits } = useAppContext();
  const [showSaveOptions, setShowSaveOptions] = useState(false);
  const [showNotes, setShowNotes] = useState(false);
  
  const [currentWorkout, setCurrentWorkout] = useState<any>(existingWorkout || null);

  const getLocalDateString = () => {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  };

  const getInitialDate = () => {
    if (existingWorkout?.date) {
      return existingWorkout.date;
    }
    if (initialDate) {
      return initialDate;
    }
    return getLocalDateString();
  };

  const [formData, setFormData] = useState({
    name: '',
    type: (existingWorkout?.type) || (initialType && initialType !== '' ? initialType as 'run' | 'ride' | 'strength' | 'swim' | 'mobility' : ''),
    date: getInitialDate(),
    description: '',
    userComments: '',
    completedManually: false
  });

  const [runIntervals, setRunIntervals] = useState<RunInterval[]>([]);
  const [rideIntervals, setRideIntervals] = useState<RideInterval[]>([]);
  const [swimIntervals, setSwimIntervals] = useState<SwimInterval[]>([]);
  const [strengthExercises, setStrengthExercises] = useState<StrengthExercise[]>([]);

  const isMetric = !useImperial;

  // Simple back button logic
  const handleBackClick = () => {
    if (sourceContext === 'plans' && onNavigateToPlans) {
      onNavigateToPlans();
    } else {
      onClose();
    }
  };

  const getBackButtonText = () => {
    if (sourceContext === 'plans') {
      const disciplineMap = {
        'run': 'Run',
        'ride': 'Ride', 
        'strength': 'Strength',
        'swim': 'Swim',
        'mobility': 'Mobility'
      };
      
      const disciplineName = disciplineMap[formData.type as keyof typeof disciplineMap];
      if (disciplineName) {
        return `Back to ${disciplineName}`;
      }
    }
    
    return 'Dashboard';
  };

  useEffect(() => {
    console.log('🔄 WorkoutBuilder initialized with:', { existingWorkout, initialType, initialDate });
    
    if (existingWorkout) {
      console.log('📝 Loading existing workout into form');
      setCurrentWorkout(existingWorkout);
      
      setFormData({
        name: existingWorkout.name || '',
        type: existingWorkout.type,
        date: existingWorkout.date,
        description: existingWorkout.description || '',
        userComments: existingWorkout.userComments || '',
        completedManually: existingWorkout.completedManually || false
      });

      if (existingWorkout.type === 'run' && existingWorkout.intervals) {
        setRunIntervals(existingWorkout.intervals);
      } else if (existingWorkout.type === 'ride' && existingWorkout.intervals) {
        setRideIntervals(existingWorkout.intervals);
      } else if (existingWorkout.type === 'swim' && existingWorkout.intervals) {
        setSwimIntervals(existingWorkout.intervals);
      } else if (existingWorkout.type === 'strength' && existingWorkout.strength_exercises) {
        setStrengthExercises(existingWorkout.strength_exercises);
      }
    } else {
      console.log('✨ Creating new workout for date:', initialDate || 'today');
      setCurrentWorkout(null);
      
      if (initialDate) {
        setFormData(prev => ({ ...prev, date: initialDate }));
      }
    }
  }, [existingWorkout, initialDate]);

  useEffect(() => {
    if (initialType && initialType !== '') {
      setFormData(prev => ({ ...prev, type: initialType as any }));
    }
  }, [initialType]);

  useEffect(() => {
    const autoDescription = generateWorkoutDescription();
    if (autoDescription && autoDescription !== formData.description) {
      setFormData(prev => ({ ...prev, description: autoDescription }));
    }
  }, [runIntervals, rideIntervals, swimIntervals, strengthExercises]);

  const calculateTotalTime = () => {
    let total = 0;
    switch (formData.type) {
      case 'run':
        total = runIntervals.reduce((sum, interval) => {
          if (interval.isRepeatBlock) {
            return sum + (interval.duration || 0);
          }
          return sum + (interval.duration || 0) * (interval.repeatCount || 1);
        }, 0);
        break;
      case 'ride':
        total = rideIntervals.reduce((sum, interval) => {
          if (interval.isRepeatBlock) {
            return sum + (interval.duration || 0);
          }
          return sum + (interval.duration || 0) * (interval.repeatCount || 1);
        }, 0);
        break;
      case 'swim':
        total = swimIntervals.reduce((sum, interval) => {
          if (interval.isRepeatBlock) {
            return sum + (interval.duration || 0);
          }
          return sum + (interval.duration || 0) * (interval.repeatCount || 1);
        }, 0);
        break;
    }
    return total;
  };

  const formatTime = (seconds: number) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;

    if (hours > 0) {
      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
    return `${minutes}:${secs.toString().padStart(2, '0')}`;
  };

  const handleTrashClick = async (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();

    if (!confirm('Clear all workout data and start fresh?')) return;

    setFormData({
      name: '',
      type: 'run',
      date: initialDate || getLocalDateString(),
      description: '',
      userComments: '',
      completedManually: false
    });

    setRunIntervals([]);
    setRideIntervals([]);
    setSwimIntervals([]);
    setStrengthExercises([]);
    setShowNotes(false);
    setCurrentWorkout(null);
  };

  const generateWorkoutDescription = () => {
    const parts: string[] = [];
    switch (formData.type) {
      case 'run':
        runIntervals.forEach((interval) => {
          if (!interval.time && !interval.distance) return;

          let segmentDesc = '';

          if (interval.isRepeatBlock && interval.time) {
            segmentDesc = interval.time;
          } else {
            if (interval.time) segmentDesc += interval.time;
            if (interval.distance) segmentDesc += ` (${interval.distance}${isMetric ? 'km' : 'mi'})`;

            if (interval.effortLabel && interval.effortLabel !== `Segment ${runIntervals.indexOf(interval) + 1}`) {
              segmentDesc += ` @ ${interval.effortLabel}`;
            } else if (interval.paceTarget) {
              segmentDesc += ` @ ${interval.paceTarget}`;
            } else if (interval.bpmTarget) {
              segmentDesc += ` @ ${interval.bpmTarget}`;
            } else if (interval.rpeTarget) {
              segmentDesc += ` @ RPE ${interval.rpeTarget}`;
            }

            if (interval.repeat && interval.repeatCount && interval.repeatCount > 1) {
              segmentDesc = `${interval.repeatCount}x(${segmentDesc})`;
            }
          }

          if (segmentDesc.trim()) parts.push(segmentDesc.trim());
        });
        break;
      case 'ride':
        rideIntervals.forEach((interval) => {
          if (interval.time || interval.distance) {
            let segmentDesc = '';

            if (interval.isRepeatBlock || (interval.time && (interval.time.includes('[') || interval.time.includes('x(')))) {
              segmentDesc = interval.time || '';
            } else {
              if (interval.time) segmentDesc += interval.time;
              if (interval.distance) segmentDesc += ` (${interval.distance}${isMetric ? 'km' : 'mi'})`;
              if (interval.powerTarget) segmentDesc += ` @ ${interval.powerTarget}`;
              if (interval.speedTarget) segmentDesc += ` @ ${interval.speedTarget}`;
              if (interval.rpeTarget) segmentDesc += ` @ RPE ${interval.rpeTarget}`;

              if (interval.repeat && interval.repeatCount && interval.repeatCount > 1) {
                segmentDesc = `${interval.repeatCount}x(${segmentDesc})`;
              }
            }

            if (segmentDesc.trim()) parts.push(segmentDesc);
          }
        });
        break;
      case 'swim':
        swimIntervals.forEach((interval) => {
          if (interval.distance) {
            let segmentDesc = '';

            if (interval.repeatCount > 1) {
              segmentDesc = `${interval.repeatCount}x${interval.distance}${isMetric ? 'm' : 'yd'}`;
            } else {
              segmentDesc = `${interval.distance}${isMetric ? 'm' : 'yd'}`;
            }

            if (interval.targetRPE) segmentDesc += ` @ RPE ${interval.targetRPE}`;
            if (interval.equipment && interval.equipment !== 'None') {
              segmentDesc += ` w/${interval.equipment.toLowerCase()}`;
            }

            if (segmentDesc.trim()) parts.push(segmentDesc);
          }
        });
        break;
      case 'strength':
        strengthExercises.forEach((exercise) => {
          if (exercise.name) {
            let exerciseDesc = exercise.name;
            if (exercise.sets && exercise.reps) {
              exerciseDesc += ` ${exercise.sets}x${exercise.reps}`;
            }
            if (exercise.weight) {
              exerciseDesc += ` @ ${exercise.weight}lbs`;
            }
            parts.push(exerciseDesc);
          }
        });
        break;
      case 'mobility':
        parts.push('Mobility session');
        break;
    }
    return parts.length > 0 ? parts.join(' + ') : '';
  };

  const handleSave = async (navigateAfterSave: boolean = false) => {
    console.log('🚀 Save function called!');
    
    try {
      const workoutTitle = formData.name.trim() || 
        `${formData.type.charAt(0).toUpperCase() + formData.type.slice(1)} - ${formData.date}`;

      const workoutData = {
        ...formData,
        name: workoutTitle,
        description: formData.description || generateWorkoutDescription(),
        duration: calculateTotalTime(),
        intervals: formData.type === 'run' ? runIntervals :
                  formData.type === 'ride' ? rideIntervals :
                  formData.type === 'swim' ? swimIntervals : undefined,
        strength_exercises: formData.type === 'strength' ? strengthExercises : undefined,
        workout_status: 'planned'
      };

      let savedWorkout;

      if (currentWorkout && currentWorkout.id) {
        savedWorkout = await updateWorkout(currentWorkout.id, workoutData);
      } else {
        savedWorkout = await addWorkout(workoutData);
      }

      setCurrentWorkout(savedWorkout);
      setShowSaveOptions(true);
      setTimeout(() => setShowSaveOptions(false), 3000);

      if (navigateAfterSave) {
        handleBackClick();
      }
    } catch (error) {
      console.error('Error saving workout:', error);
      alert('Error saving workout. Please try again.');
    }
  };

  return (
    <div className="min-h-screen bg-white">
      {showSaveOptions && (
        <div className="fixed top-20 left-1/2 transform -translate-x-1/2 bg-gray-100 text-gray-700 px-6 py-3 z-50 flex items-center gap-4">
          <Check className="h-5 w-5" />
          <span>{currentWorkout ? 'effort Updated' : 'effort saved'}</span>
        </div>
      )}

      <main className="max-w-7xl mx-auto px-3 py-2">
        <div className="flex justify-between items-center mb-1">
          <div className="flex items-center gap-2">
            <Button
              onClick={handleBackClick}
              variant="ghost"
              className="flex items-center gap-2 p-0 h-auto text-muted-foreground hover:text-black"
            >
              <ArrowLeft className="h-4 w-4" />
              {getBackButtonText()}
            </Button>
          </div>
          
          <Input
            type="date"
            value={formData.date}
            onChange={(e) => setFormData(prev => ({ ...prev, date: e.target.value }))}
            className="min-h-[44px] bg-transparent w-auto border-none shadow-none focus:border-none focus:ring-0 focus:outline-none"
            style={{fontFamily: 'Inter, sans-serif'}}
          />
        </div>

        {(formData.type === 'run' || formData.type === 'ride') && (
          <div className="flex justify-end items-center gap-2 mb-1">
            <Label htmlFor="units" className="text-sm font-medium text-muted-foreground">
              Imperial
            </Label>
            <Switch
              id="units"
              checked={!useImperial}
              onCheckedChange={toggleUnits}
              className="data-[state=checked]:bg-black data-[state=unchecked]:bg-gray-200"
            />
            <Label htmlFor="units" className="text-sm font-medium text-muted-foreground">
              Metric
            </Label>
          </div>
        )}

        <div className="space-y-1">
          <div className="p-2 pt-1">
            <div className="flex items-center gap-4 mb-3">
              <Input
                value={formData.name}
                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                placeholder="Focus"
                className="border-gray-300 min-h-[44px] flex-1"
                style={{fontFamily: 'Inter, sans-serif'}}
              />
              {/* FIXED: Use proper PlanBuilder instead of local modal */}
              <Button
                onClick={() => {
                  console.log('🎯 Build me a plan clicked - opening proper PlanBuilder');
                  if (onOpenPlanBuilder) {
                    onOpenPlanBuilder();
                  } else {
                    console.warn('onOpenPlanBuilder not provided');
                  }
                }}
                variant="ghost"
                className="text-gray-600 hover:text-black flex items-center gap-2"
              >
                <Sparkles className="h-4 w-4" />
                Build me a plan
              </Button>
              <button
                onClick={handleTrashClick}
                className="text-gray-400 hover:text-red-500 transition-colors"
              >
                <Trash2 className="h-4 w-4" />
              </button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mb-3">
              {formData.type === 'strength' && (
                <div>
                  <div>
                    <button
                      type="button"
                      onClick={() => setShowNotes(!showNotes)}
                      className="flex items-center gap-1 text-sm font-medium text-muted-foreground hover:text-foreground mb-2"
                    >
                      <ChevronRight className={`h-4 w-4 transform transition-transform ${showNotes ? 'rotate-90' : ''}`} />
                      Notes
                    </button>

                    {showNotes && (
                      <Textarea
                        value={formData.userComments}
                        onChange={(e) => setFormData(prev => ({ ...prev, userComments: e.target.value }))}
                        placeholder=""
                        rows={2}
                        className="border-gray-300 min-h-[44px]"
                        style={{fontFamily: 'Inter, sans-serif'}}
                      />
                    )}
                  </div>
                </div>
              )}
              <div>
                <div className="relative">
                  <div
                    className={`min-h-[44px] w-full text-sm text-foreground p-3 ${formData.type === 'strength' ? '' : 'pb-8'}`}
                    style={{fontFamily: 'Inter, sans-serif'}}
                  >
                    {generateWorkoutDescription()}
                  </div>
                  {formData.type !== 'strength' && formData.type !== 'mobility' && (
                    <div className="absolute bottom-2 right-3 flex items-center gap-2 text-muted-foreground text-sm">
                      <Clock className="h-3 w-3" />
                      <span>Total Time: {formatTime(calculateTotalTime())}</span>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>

          <div className="p-2 pt-0">
            {formData.type === 'run' && (
              <RunIntervalBuilder intervals={runIntervals} onChange={setRunIntervals} isMetric={isMetric} />
            )}
            {formData.type === 'ride' && (
              <RideIntervalBuilder intervals={rideIntervals} onChange={setRideIntervals} isMetric={isMetric} />
            )}
            {formData.type === 'swim' && (
              <SwimIntervalBuilder intervals={swimIntervals} onChange={setSwimIntervals} isMetric={isMetric} />
            )}
            {formData.type === 'strength' && (
              <StrengthExerciseBuilder exercises={strengthExercises} onChange={setStrengthExercises} />
            )}
            {formData.type === 'mobility' && (
              <div className="text-center py-8 text-muted-foreground">
                <Move className="h-12 w-12 mx-auto mb-4 text-gray-400" />
                <p className="text-lg font-medium mb-2">Mobility Session</p>
                <p className="text-sm">Track your mobility and flexibility work</p>
              </div>
            )}
          </div>

          {(runIntervals.length > 0 || rideIntervals.length > 0 || swimIntervals.length > 0 || strengthExercises.length > 0 || formData.type === 'mobility') && (
            <div className="bg-gray-50 p-2">
              <p className="text-sm text-foreground" style={{fontFamily: 'Inter, sans-serif'}}>
                {generateWorkoutDescription()}
              </p>
              {calculateTotalTime() > 0 && (
                <p className="text-xs text-muted-foreground mt-1" style={{fontFamily: 'Inter, sans-serif'}}>
                  Total Time: {formatTime(calculateTotalTime())}
                </p>
              )}
            </div>
          )}
        </div>

        <div className="fixed bottom-0 left-0 right-0 p-3 bg-white flex justify-center">
          <Button
            onClick={() => handleSave(false)}
            variant="clean"
            className="w-full h-12 text-muted-foreground hover:text-foreground"
            style={{
              fontFamily: 'Inter, sans-serif',
              fontWeight: 600,
              fontSize: '15px'
            }}
          >
            Save
          </Button>
        </div>
        
        <div className="h-16"></div>
      </main>
    </div>
  );
}

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/WorkoutCalendar.tsx
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { useAppContext } from '@/contexts/AppContext';
import NewEffortDropdown from './NewEffortDropdown';
import LogEffortDropdown from './LogEffortDropdown';
import PlansDropdown from './PlansDropdown';
import AllEffortsDropdown from './AllEffortsDropdown';

const DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
const MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

const DISCIPLINE_COLORS = {
  run: 'bg-red-500',
  ride: 'bg-green-500', 
  swim: 'bg-blue-500',
  strength: 'bg-orange-500',
  mobility: 'bg-purple-500'
};

interface Plan {
  id: string;
  name: string;
  currentWeek?: number;
  status: 'active' | 'completed';
  description?: string;
}

interface WorkoutCalendarProps {
  onAddEffort: (type: string, date?: string) => void;
  onSelectType: (type: string) => void;
  onSelectWorkout: (workout: any) => void;
  onViewCompleted: () => void;
  onEditEffort: (workout: any) => void;
  onDateSelect?: (dateString: string) => void;
  onSelectRoutine?: (type: string) => void;
  onSelectDiscipline?: (discipline: string) => void;
  onOpenPlanBuilder?: () => void;
  isSwipingHorizontally?: boolean;
  currentPlans?: Plan[]; // NEW: AI-generated current plans
  completedPlans?: Plan[]; // NEW: Completed plans
}

export default function WorkoutCalendar({ 
  onAddEffort, 
  onSelectType, 
  onSelectWorkout, 
  onViewCompleted,
  onEditEffort,
  onDateSelect,
  onSelectRoutine,
  onSelectDiscipline,
  onOpenPlanBuilder,
  isSwipingHorizontally = false,
  currentPlans = [], // NEW: Default to empty array
  completedPlans = [] // NEW: Default to empty array
}: WorkoutCalendarProps) {
  const { workouts } = useAppContext();
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedDate, setSelectedDate] = useState<string | null>(null);

  const navigateMonth = (direction: number) => {
    setCurrentDate(prev => {
      const newDate = new Date(prev);
      newDate.setMonth(prev.getMonth() + direction);
      return newDate;
    });
  };

  const getDaysInMonth = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();
    const startingDayOfWeek = firstDay.getDay();
    
    const days = [];
    
    for (let i = 0; i < startingDayOfWeek; i++) {
      days.push(null);
    }
    
    for (let day = 1; day <= daysInMonth; day++) {
      days.push(day);
    }
    
    return days;
  };

  const getWorkoutsForDate = (day: number) => {
    if (!day || !workouts) return [];
    
    const year = currentDate.getFullYear();
    const month = String(currentDate.getMonth() + 1).padStart(2, '0');
    const dayStr = String(day).padStart(2, '0');
    const dateStr = `${year}-${month}-${dayStr}`;
    
    // 🔧 FIXED: Apply same filtering logic as TodaysEffort
    const today = new Date().toLocaleDateString('en-CA');
    
    const filtered = workouts.filter((w) => {
      if (!w || w.date !== dateStr) return false;
      
      // For today and future dates: show only planned workouts
      if (dateStr >= today) {
        const isPlanned = w.workout_status === 'planned' || !w.workout_status;
        return isPlanned;
      } 
      // For past dates: show both planned and completed for reference
      else {
        return true;
      }
    });
    
    return filtered;
  };

  const handleDateClick = (day: number, event: React.MouseEvent | React.TouchEvent) => {
    if (!day) return;
    
    // 🚨 NEW: Ignore date clicks during horizontal swipes
    if (isSwipingHorizontally) {
      console.log('🚫 Ignoring date click during swipe');
      event.preventDefault();
      event.stopPropagation();
      return;
    }
    
    // Prevent event from bubbling up to parent swipe handlers
    event.preventDefault();
    event.stopPropagation();
    
    const year = currentDate.getFullYear();
    const month = String(currentDate.getMonth() + 1).padStart(2, '0');
    const dayStr = String(day).padStart(2, '0');
    const dateStr = `${year}-${month}-${dayStr}`;
    
    console.log('📅 Calendar cell clicked:', dateStr);
    
    // Set this date as selected for visual feedback
    setSelectedDate(dateStr);
    
    // Always update the Today's Effort section to show this date
    // This works for both empty dates and dates with workouts
    if (onDateSelect) {
      onDateSelect(dateStr);
    }
  };

  const isToday = (day: number) => {
    const today = new Date();
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    
    return (
      day === today.getDate() &&
      month === today.getMonth() &&
      year === today.getFullYear()
    );
  };

  const isSelected = (day: number) => {
    if (!day || !selectedDate) return false;
    const year = currentDate.getFullYear();
    const month = String(currentDate.getMonth() + 1).padStart(2, '0');
    const dayStr = String(day).padStart(2, '0');
    const dateStr = `${year}-${month}-${dayStr}`;
    return dateStr === selectedDate;
  };

  const days = getDaysInMonth();

  return (
    <div className="w-full">
      {/* FIXED: Extra tight spacing - more overlap between buttons */}
      <div className="w-full flex justify-center items-center mb-2 -space-x-2 flex-nowrap px-4">
        <NewEffortDropdown 
          onSelectType={onSelectType} 
          onOpenPlanBuilder={onOpenPlanBuilder}
        />
        <LogEffortDropdown onSelectType={onSelectType} />
        <PlansDropdown 
          onSelectRoutine={onSelectRoutine}
          currentPlans={currentPlans}
          completedPlans={completedPlans}
        />
        <AllEffortsDropdown onSelectWorkout={onSelectWorkout} />
      </div>
      
      <div className="w-full bg-white">
        <div className="p-1">
          <div className="flex items-center justify-center gap-6 mb-4">
            <Button 
              className="bg-transparent text-muted-foreground border-none hover:bg-gray-100 hover:text-black p-3 transition-all duration-150 min-h-[44px] min-w-[44px]" 
              onClick={() => navigateMonth(-1)}
            >
              <ChevronLeft className="h-5 w-5" strokeWidth={2.5} />
            </Button>
            <h3 className="text-lg sm:text-xl font-semibold mx-4 min-w-[180px] text-center" style={{fontFamily: 'Inter, sans-serif'}}>
              {MONTHS[currentDate.getMonth()]} {currentDate.getFullYear()}
            </h3>
            <Button 
              className="bg-transparent text-muted-foreground border-none hover:bg-gray-100 hover:text-black p-3 transition-all duration-150 min-h-[44px] min-w-[44px]"
              onClick={() => navigateMonth(1)}
            >
              <ChevronRight className="h-5 w-5" strokeWidth={2.5} />
            </Button>
          </div>
          
          {/* Day headers */}
          <div className="grid gap-3 grid-cols-7 mb-3">
            {DAYS.map(day => (
              <div key={day} className="p-2 text-center font-semibold text-xs text-muted-foreground uppercase tracking-wide" style={{fontFamily: 'Inter, sans-serif'}}>
                {day}
              </div>
            ))}
          </div>

          {/* Calendar grid - improved responsiveness without transform/shadow effects */}
          <div className="grid gap-3 grid-cols-7">
            {days.map((day, index) => {
              const dayWorkouts = day ? getWorkoutsForDate(day) : [];
              
              return (
                <button
                  key={index}
                  className={`
                    w-full h-16 p-2 transition-all duration-100 rounded-lg
                    flex flex-col items-center justify-start
                    min-h-[44px] touch-manipulation select-none
                    ${day ? 'bg-white hover:bg-gray-100 active:bg-gray-200 border border-transparent hover:border-gray-200' : 'bg-gray-50 cursor-default'}
                    ${day && isToday(day) ? 'bg-gray-100 border-gray-200' : ''}
                    ${day && isSelected(day) ? 'bg-gray-200 border-gray-300' : ''}
                    ${isSwipingHorizontally ? 'pointer-events-none' : ''}
                  `}
                  onClick={(e) => day && handleDateClick(day, e)}
                  onTouchEnd={(e) => day && handleDateClick(day, e)}
                  disabled={!day || isSwipingHorizontally}
                  type="button"
                >
                  {day && (
                    <>
                      {/* Date number - clean styling */}
                      <div className="text-sm font-medium mb-1 w-6 h-6 flex items-center justify-center text-foreground" style={{fontFamily: 'Inter, sans-serif'}}>
                        {day}
                      </div>
                      
                      {/* Workout indicators */}
                      {dayWorkouts.length > 0 && (
                        <div className="flex flex-wrap justify-center items-center gap-1 mt-auto">
                          {dayWorkouts.slice(0, 3).map((workout, idx) => (
                            <div
                              key={workout.id || idx}
                              className={`w-2 h-2 rounded-full ${
                                DISCIPLINE_COLORS[workout.type as keyof typeof DISCIPLINE_COLORS] || 'bg-gray-500'
                              }`}
                              title={workout.name || workout.type}
                            />
                          ))}
                          {dayWorkouts.length > 3 && (
                            <div className="text-[10px] text-muted-foreground font-medium leading-none">
                              +{dayWorkouts.length - 3}
                            </div>
                          )}
                        </div>
                      )}
                    </>
                  )}
                </button>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
}

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/WorkoutCharts.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ChartContainer, ChartTooltip, ChartTooltipContent } from '@/components/ui/chart';
import { LineChart, Line, XAxis, YAxis, BarChart, Bar, ResponsiveContainer } from 'recharts';

interface WorkoutChartsProps {
  timeSeriesData?: {
    heartRate?: Array<{ time: number; value: number }>;
    power?: Array<{ time: number; value: number }>;
    cadence?: Array<{ time: number; value: number }>;
    elevation?: Array<{ distance: number; value: number }>;
    speed?: Array<{ time: number; value: number }>;
  };
  heartRateZones?: Array<{ zone: string; time: number; percentage: number }>;
}

const WorkoutCharts: React.FC<WorkoutChartsProps> = ({ timeSeriesData, heartRateZones }) => {
  const chartConfig = {
    value: {
      label: "Value",
      color: "hsl(var(--chart-1))",
    },
  };

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      {timeSeriesData?.heartRate && (
        <Card>
          <CardHeader>
            <CardTitle>Heart Rate vs Time</CardTitle>
          </CardHeader>
          <CardContent>
            <ChartContainer config={chartConfig}>
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={timeSeriesData.heartRate}>
                  <XAxis dataKey="time" />
                  <YAxis />
                  <ChartTooltip content={<ChartTooltipContent />} />
                  <Line type="monotone" dataKey="value" stroke="var(--color-value)" strokeWidth={2} />
                </LineChart>
              </ResponsiveContainer>
            </ChartContainer>
          </CardContent>
        </Card>
      )}

      {timeSeriesData?.power && (
        <Card>
          <CardHeader>
            <CardTitle>Power vs Time</CardTitle>
          </CardHeader>
          <CardContent>
            <ChartContainer config={chartConfig}>
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={timeSeriesData.power}>
                  <XAxis dataKey="time" />
                  <YAxis />
                  <ChartTooltip content={<ChartTooltipContent />} />
                  <Line type="monotone" dataKey="value" stroke="var(--color-value)" strokeWidth={2} />
                </LineChart>
              </ResponsiveContainer>
            </ChartContainer>
          </CardContent>
        </Card>
      )}

      {timeSeriesData?.elevation && (
        <Card>
          <CardHeader>
            <CardTitle>Elevation vs Distance</CardTitle>
          </CardHeader>
          <CardContent>
            <ChartContainer config={chartConfig}>
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={timeSeriesData.elevation}>
                  <XAxis dataKey="distance" />
                  <YAxis />
                  <ChartTooltip content={<ChartTooltipContent />} />
                  <Line type="monotone" dataKey="value" stroke="var(--color-value)" strokeWidth={2} />
                </LineChart>
              </ResponsiveContainer>
            </ChartContainer>
          </CardContent>
        </Card>
      )}

      {heartRateZones && (
        <Card>
          <CardHeader>
            <CardTitle>Heart Rate Zones</CardTitle>
          </CardHeader>
          <CardContent>
            <ChartContainer config={chartConfig}>
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={heartRateZones}>
                  <XAxis dataKey="zone" />
                  <YAxis />
                  <ChartTooltip content={<ChartTooltipContent />} />
                  <Bar dataKey="percentage" fill="var(--color-value)" />
                </BarChart>
              </ResponsiveContainer>
            </ChartContainer>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default WorkoutCharts;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/WorkoutDetail.tsx
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { 
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';
import { Upload, Activity, Dumbbell, Bike, Waves, Trash2 } from 'lucide-react';
import WorkoutMetrics from './WorkoutMetrics';
import CompletedTab from './CompletedTab';
import StrengthExerciseBuilder from './StrengthExerciseBuilder';
import StrengthCompletedView from './StrengthCompletedView';
import StrengthSummaryView from './StrengthSummaryView';
import { useAppContext } from '@/contexts/AppContext';

interface WorkoutDetailProps {
  workout: {
    id: string;
    name: string;
    type: string;
    date: string;
    workout_status?: string;
    strength_exercises?: any[];
    completed_exercises?: any[];
    garmin_data?: any;
    time_series_data?: any;
    heart_rate_zones?: any[];
    distance?: number;
    elapsed_time?: number;
    moving_time?: number;
    avg_speed?: number;
    max_speed?: number;
    avg_pace?: number;
    avg_heart_rate?: number;
    max_heart_rate?: number;
    hrv?: number;
    avg_power?: number;
    max_power?: number;
    normalized_power?: number;
    avg_cadence?: number;
    max_cadence?: number;
    elevation_gain?: number;
    elevation_loss?: number;
    calories?: number;
    tss?: number;
    intensity_factor?: number;
    comments?: string;
  };
  onUpdateWorkout: (workoutId: string, updates: any) => void;
  activeTab?: string;
  onTabChange?: (tab: string) => void;
  onClose?: () => void;
}

const WorkoutDetail: React.FC<WorkoutDetailProps> = ({ 
  workout, 
  onUpdateWorkout, 
  activeTab = 'summary', 
  onTabChange,
  onClose 
}) => {
  const { deleteWorkout } = useAppContext();
  const [comments, setComments] = useState(workout.comments || '');
  const [strengthExercises, setStrengthExercises] = useState(workout.strength_exercises || []);
  const [isDeleting, setIsDeleting] = useState(false);
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);

  const handleCommentsChange = (value: string) => {
    setComments(value);
    onUpdateWorkout(workout.id, { comments: value });
  };

  const handleStrengthExercisesChange = (exercises: any[]) => {
    setStrengthExercises(exercises);
    onUpdateWorkout(workout.id, { strength_exercises: exercises });
  };

  const handleDeleteClick = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    
    console.log('🗑️ Delete button clicked for workout:', workout.id);
    
    if (isDeleting) {
      console.log('🗑️ Already deleting, ignoring click');
      return;
    }
    
    // Show the custom confirmation dialog
    setShowConfirmDialog(true);
  };

  const confirmDelete = async () => {
    try {
      setIsDeleting(true);
      setShowConfirmDialog(false);
      console.log('🗑️ Starting delete process for workout:', workout.id);
      
      await deleteWorkout(workout.id);
      console.log('🗑️ Workout deleted successfully');
      
      // Close the detail view after successful deletion
      if (onClose) {
        console.log('🗑️ Calling onClose to return to dashboard');
        onClose();
      } else {
        console.log('🗑️ No onClose function provided');
      }
    } catch (error) {
      console.error('🗑️ Error deleting workout:', error);
      alert('Error deleting workout. Please try again.');
      setIsDeleting(false);
    }
  };

  const getWorkoutType = () => {
    // 🔧 FIXED: Properly map workout types for CompletedTab
    if (workout.type === 'run') return 'run';
    if (workout.type === 'ride') return 'ride';
    if (workout.type === 'swim') return 'swim';
    if (workout.type === 'strength') return 'strength';
    
    // Fallback logic for legacy names
    if (workout.name.toLowerCase().includes('run')) return 'run';
    if (workout.name.toLowerCase().includes('cycle') || workout.name.toLowerCase().includes('ride')) return 'ride';
    if (workout.name.toLowerCase().includes('swim')) return 'swim';
    
    return 'ride'; // default to ride for cycling files
  };

  const getWorkoutIcon = () => {
    switch (workout.type) {
      case 'strength':
        return <Dumbbell className="h-5 w-5" />;
      case 'run':
        return <Activity className="h-5 w-5" />;
      case 'ride':
        return <Bike className="h-5 w-5" />;
      case 'swim':
        return <Waves className="h-5 w-5" />;
      default:
        return <Activity className="h-5 w-5" />;
    }
  };

  // 🔧 FIXED: Simplified condition - show StrengthCompletedView for ALL strength workouts in Completed tab
  const isStrengthWorkout = workout.type === 'strength' && 
    (workout.strength_exercises?.length > 0 || workout.completed_exercises?.length > 0);

  return (
    <div className="space-y-6">
      {/* Tab navigation with delete button */}
      <div className="w-full">
        <div className="flex items-center justify-between border-b border-gray-200">
          <div className="flex space-x-8">
            <button
              onClick={() => onTabChange?.('summary')}
              className={`py-2 px-1 text-sm font-medium transition-colors ${
                activeTab === 'summary'
                  ? 'text-black border-b-2 border-black'
                  : 'text-gray-500 hover:text-gray-700'
              }`}
              style={{ fontFamily: 'Inter, sans-serif' }}
            >
              Summary
            </button>
            <button
              onClick={() => onTabChange?.('completed')}
              className={`py-2 px-1 text-sm font-medium transition-colors ${
                activeTab === 'completed'
                  ? 'text-black border-b-2 border-black'
                  : 'text-gray-500 hover:text-gray-700'
              }`}
              style={{ fontFamily: 'Inter, sans-serif' }}
            >
              Completed: {getWorkoutType().charAt(0).toUpperCase() + getWorkoutType().slice(1)}
            </button>
          </div>
          
          {/* Delete button with AlertDialog */}
          <AlertDialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>
            <AlertDialogTrigger asChild>
              <button
                onClick={handleDeleteClick}
                disabled={isDeleting}
                className={`p-2 transition-colors ${
                  isDeleting 
                    ? 'text-gray-300 cursor-not-allowed' 
                    : 'text-gray-400 hover:text-red-500'
                }`}
                title={isDeleting ? 'Deleting...' : 'Delete workout'}
              >
                <Trash2 className="h-4 w-4" />
              </button>
            </AlertDialogTrigger>
            <AlertDialogContent className="max-w-xs sm:max-w-sm">
              <AlertDialogHeader className="space-y-2">
                <AlertDialogTitle className="text-base">Delete Workout</AlertDialogTitle>
                <AlertDialogDescription className="text-sm">
                  Delete "{workout.name}"?
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter className="flex-row gap-2 justify-end">
                <AlertDialogCancel 
                  onClick={() => setShowConfirmDialog(false)}
                  className="mt-0 text-sm px-3 py-1.5"
                >
                  Cancel
                </AlertDialogCancel>
                <AlertDialogAction 
                  onClick={confirmDelete}
                  className="bg-red-600 hover:bg-red-700 focus:ring-red-600 text-sm px-3 py-1.5"
                >
                  Delete
                </AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        </div>

        {/* Tab content */}
        <div className="mt-6">
          {activeTab === 'summary' && (
            <div className="space-y-4">
              {workout.type === 'strength' ? (
                <StrengthSummaryView workoutData={{
                  ...workout,
                  comments: workout.comments || '',
                  strength_exercises: workout.strength_exercises || [],
                  completed_exercises: workout.completed_exercises || []
                }} />
              ) : (
                <WorkoutMetrics workout={workout} />
              )}
              
              <Card>
                <CardHeader>
                  <CardTitle>Comments</CardTitle>
                </CardHeader>
                <CardContent>
                  <Textarea
                    placeholder="Add your comments about this workout..."
                    value={comments}
                    onChange={(e) => handleCommentsChange(e.target.value)}
                    rows={4}
                  />
                </CardContent>
              </Card>
            </div>
          )}

          {activeTab === 'completed' && (
            <div className="space-y-4">
              {/* 🔧 FIXED: Support all endurance workout types (ride, run, swim) for CompletedTab */}
              {(workout.type === 'endurance' || workout.type === 'ride' || workout.type === 'run' || workout.type === 'swim') ? (
                <CompletedTab 
                  workoutType={getWorkoutType() as 'ride' | 'run' | 'swim' | 'strength'}
                  workoutData={workout}
                />
              ) : workout.type === 'strength' ? (
                // 🔧 FIXED: Always use StrengthCompletedView for strength workouts with safe defaults
                <StrengthCompletedView 
                  workoutData={{
                    ...workout,
                    comments: workout.comments || '',
                    strength_exercises: workout.strength_exercises?.map((exercise: any) => ({
                      ...exercise,
                      // Transform builder format to completed format if needed
                      sets: Array.isArray(exercise.sets) 
                        ? exercise.sets  // Already in correct format
                        : Array.from({ length: exercise.sets || 0 }, (_, i) => ({
                            reps: exercise.reps || 0,
                            weight: exercise.weight || 0,
                            completed: true,
                            rir: undefined
                          }))
                    })) || [],
                    completed_exercises: workout.completed_exercises || []
                  }}
                />
              ) : (
                // 🔧 FALLBACK: For unknown workout types
                <div className="text-center py-8 text-gray-500">
                  <p>Completed view not available for workout type: {workout.type}</p>
                  <p className="text-sm mt-2">This workout type is not yet supported in the completed view.</p>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default WorkoutDetail;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/WorkoutForm.tsx
import React, { useState } from 'react';
import { useAppContext } from '@/contexts/AppContext';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Plus } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import WorkoutIntervals, { WorkoutInterval } from './WorkoutIntervals';
import SwimWorkoutForm from './SwimWorkoutForm';
import GarminExport from './GarminExport';
import { SwimWorkoutData } from '@/contexts/AppContext';

interface WorkoutFormProps {
  onClose: () => void;
}

export default function WorkoutForm({ onClose }: WorkoutFormProps) {
  const { addWorkout, useImperial } = useAppContext();
  const [formData, setFormData] = useState({
    name: '',
    type: 'run' as 'run' | 'ride' | 'strength' | 'swim',
    duration: 0,
    date: new Date().toISOString().split('T')[0],
    description: '',
    comments: ''
  });
  const [intervals, setIntervals] = useState<WorkoutInterval[]>([]);
  const [swimData, setSwimData] = useState<SwimWorkoutData>({
    totalDistance: 0,
    targetPacePer100: '',
    strokeType: 'Freestyle',
    equipmentUsed: []
  });
  const [strengthExercises, setStrengthExercises] = useState([
    { id: '1', name: 'Squats', sets: 5, reps: 5, weight: 100, weightMode: 'same', completed_sets: Array(5).fill({ reps: 0, weight: 0, rir: 0, completed: false }) },
    { id: '2', name: 'Overhead Press', sets: 5, reps: 5, weight: 60, weightMode: 'same', completed_sets: Array(5).fill({ reps: 0, weight: 0, rir: 0, completed: false }) },
    { id: '3', name: 'Barbell Rows', sets: 5, reps: 5, weight: 80, weightMode: 'same', completed_sets: Array(5).fill({ reps: 0, weight: 0, rir: 0, completed: false }) }
  ]);

  const handleSave = (e: React.FormEvent) => {
    e.preventDefault();
    
    const workoutData = {
      ...formData,
      intervals: (formData.type === 'run' || formData.type === 'ride') ? intervals : undefined,
      swimData: formData.type === 'swim' ? swimData : undefined,
      strength_exercises: formData.type === 'strength' ? strengthExercises : undefined,
      workout_status: 'planned'
    };
    
    // Save to localStorage
    const storageKey = `workout_${formData.date}`;
    localStorage.setItem(storageKey, JSON.stringify(workoutData));
    
    toast({
      title: "Success!",
      description: "Effort saved successfully!",
    });
    
    // Also add to context for immediate UI update
    addWorkout(workoutData);
    onClose();
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (formData.name && formData.duration > 0) {
      const workoutData = {
        ...formData,
        intervals: (formData.type === 'run' || formData.type === 'ride') ? intervals : undefined,
        swimData: formData.type === 'swim' ? swimData : undefined,
        strength_exercises: formData.type === 'strength' ? strengthExercises : undefined,
        workout_status: 'planned'
      };
      addWorkout(workoutData);
      onClose();
    }
  };

  const getTabsList = () => {
    if (formData.type === 'swim') {
      return (
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="basic">Basic Info</TabsTrigger>
          <TabsTrigger value="swim">Swim Details</TabsTrigger>
          <TabsTrigger value="completed">Completed</TabsTrigger>
          <TabsTrigger value="export">Export</TabsTrigger>
        </TabsList>
      );
    }
    return (
      <TabsList className="grid w-full grid-cols-4">
        <TabsTrigger value="basic">Basic Info</TabsTrigger>
        <TabsTrigger value="intervals">Details</TabsTrigger>
        <TabsTrigger value="completed">Completed</TabsTrigger>
        <TabsTrigger value="export">Export</TabsTrigger>
      </TabsList>
    );
  };

  return (
    <div className="w-full max-w-4xl mx-auto">
      <form autoComplete="off">
        <Tabs defaultValue="basic" className="w-full">
          {getTabsList()}
          
          <TabsContent value="basic">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Plus className="h-5 w-5" />
                  New Workout
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="workout-name">Workout Name</Label>
                    <Input
                      id="workout-name"
                      name="workout-name"
                      autoComplete="off"
                      value={formData.name}
                      onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                      placeholder="Morning Run or Swim Session"
                      required
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="workout-type">Type</Label>
                    <Select value={formData.type} onValueChange={(value: 'run' | 'ride' | 'strength' | 'swim') => 
                      setFormData(prev => ({ ...prev, type: value }))
                    }>
                      <SelectTrigger id="workout-type" name="workout-type">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="run">Run</SelectItem>
                        <SelectItem value="ride">Ride</SelectItem>
                        <SelectItem value="strength">Strength</SelectItem>
                        <SelectItem value="swim">Swim</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="workout-duration">Duration (minutes)</Label>
                    <Input
                      id="workout-duration"
                      name="workout-duration"
                      type="number"
                      autoComplete="off"
                      value={formData.duration}
                      onChange={(e) => setFormData(prev => ({ ...prev, duration: parseInt(e.target.value) || 0 }))}
                      min="1"
                      required
                    />
                  </div>

                  <div>
                    <Label htmlFor="workout-date">Date</Label>
                    <Input
                      id="workout-date"
                      name="workout-date"
                      type="date"
                      autoComplete="off"
                      value={formData.date}
                      onChange={(e) => setFormData(prev => ({ ...prev, date: e.target.value }))}
                      required
                    />
                  </div>

                  <div>
                    <Label htmlFor="workout-description">Description</Label>
                    <Textarea
                      id="workout-description"
                      name="workout-description"
                      autoComplete="off"
                      value={formData.description}
                      onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                      placeholder="Workout details..."
                    />
                  </div>

                  <div>
                    <Label htmlFor="workout-comments">Comments</Label>
                    <Textarea
                      id="workout-comments"
                      name="workout-comments"
                      autoComplete="off"
                      value={formData.comments}
                      onChange={(e) => setFormData(prev => ({ ...prev, comments: e.target.value }))}
                      placeholder="How did it feel? Notes..."
                    />
                  </div>

                  <div className="flex gap-2">
                    <Button type="button" onClick={handleSave} className="flex-1 bg-black text-white hover:bg-gray-800">Save</Button>
                    <Button type="button" variant="outline" onClick={onClose} className="border-black hover:bg-gray-100">Cancel</Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          {formData.type === 'swim' ? (
            <TabsContent value="swim">
              <SwimWorkoutForm swimData={swimData} onChange={setSwimData} />
            </TabsContent>
          ) : (
            <TabsContent value="intervals">
              <WorkoutIntervals intervals={intervals} onChange={setIntervals} workoutType={formData.type} />
            </TabsContent>
          )}
          
          <TabsContent value="completed">
            <Card>
              <CardHeader>
                <CardTitle>Completed Workout</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8 text-muted-foreground">
                  Complete your workout and track your results here.
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="export">
            <GarminExport workoutName={formData.name} intervals={intervals} />
          </TabsContent>
        </Tabs>
      </form>
    </div>
  );
}

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/WorkoutIntervals.tsx
import React from 'react';
import { useAppContext } from '@/contexts/AppContext';
import RunIntervalBuilder, { RunInterval } from './RunIntervalBuilder';
import RideIntervalBuilder, { RideInterval } from './RideIntervalBuilder';
import StrengthExerciseBuilder, { StrengthExercise } from './StrengthExerciseBuilder';

export interface WorkoutInterval {
  id: string;
  name: string;
  duration: number;
  durationType: 'time' | 'distance';
  intensityType: 'heartRate' | 'power' | 'pace' | 'rpe';
  intensityMin: number;
  intensityMax: number;
  description?: string;
}

interface WorkoutIntervalsProps {
  intervals: WorkoutInterval[];
  onChange: (intervals: WorkoutInterval[]) => void;
  workoutType?: 'run' | 'ride' | 'strength' | 'swim';
}

const WorkoutIntervals: React.FC<WorkoutIntervalsProps> = ({ intervals, onChange, workoutType = 'run' }) => {
  const { useImperial } = useAppContext();
  
  // Convert generic intervals to specific types
  const runIntervals: RunInterval[] = intervals.map(interval => ({
    id: interval.id,
    time: interval.durationType === 'time' ? `${Math.floor(interval.duration / 60)}:${(interval.duration % 60).toString().padStart(2, '0')}` : '',
    distance: interval.durationType === 'distance' ? interval.duration.toString() : '',
    paceTarget: interval.intensityType === 'pace' ? `${interval.intensityMin}-${interval.intensityMax}` : '',
    bpmTarget: interval.intensityType === 'heartRate' ? `${interval.intensityMin}-${interval.intensityMax}` : '',
    rpeTarget: interval.intensityType === 'rpe' ? `${interval.intensityMin}-${interval.intensityMax}` : '',
    duration: interval.duration
  }));
  
  const rideIntervals: RideInterval[] = intervals.map(interval => ({
    id: interval.id,
    time: interval.durationType === 'time' ? `${Math.floor(interval.duration / 60)}:${(interval.duration % 60).toString().padStart(2, '0')}` : '',
    distance: interval.durationType === 'distance' ? interval.duration.toString() : '',
    powerTarget: interval.intensityType === 'power' ? `${interval.intensityMin}-${interval.intensityMax}` : '',
    bpmTarget: interval.intensityType === 'heartRate' ? `${interval.intensityMin}-${interval.intensityMax}` : '',
    rpeTarget: interval.intensityType === 'rpe' ? `${interval.intensityMin}-${interval.intensityMax}` : '',
    cadenceTarget: '',
    duration: interval.duration
  }));
  
  const strengthExercises: StrengthExercise[] = [
    {
      id: '1',
      name: 'Squats',
      sets: 3,
      reps: 10,
      weight: useImperial ? 185 : 85,
      weightMode: 'same',
      completed_sets: Array(3).fill({ reps: 0, weight: 0, rir: 0, completed: false })
    }
  ];
  
  const handleRunIntervalsChange = (newIntervals: RunInterval[]) => {
    const converted: WorkoutInterval[] = newIntervals.map(interval => {
      const duration = interval.duration || 0;
      let intensityMin = 0, intensityMax = 0, intensityType: 'heartRate' | 'power' | 'pace' | 'rpe' = 'heartRate';
      
      if (interval.bpmTarget) {
        const [min, max] = interval.bpmTarget.split('-').map(Number);
        intensityMin = min || 0;
        intensityMax = max || min || 0;
        intensityType = 'heartRate';
      } else if (interval.paceTarget) {
        intensityType = 'pace';
      } else if (interval.rpeTarget) {
        intensityType = 'rpe';
      }
      
      return {
        id: interval.id,
        name: `Interval ${interval.id}`,
        duration,
        durationType: interval.distance ? 'distance' : 'time',
        intensityType,
        intensityMin,
        intensityMax
      };
    });
    onChange(converted);
  };
  
  const handleRideIntervalsChange = (newIntervals: RideInterval[]) => {
    const converted: WorkoutInterval[] = newIntervals.map(interval => {
      const duration = interval.duration || 0;
      let intensityMin = 0, intensityMax = 0, intensityType: 'heartRate' | 'power' | 'pace' | 'rpe' = 'power';
      
      if (interval.powerTarget) {
        const [min, max] = interval.powerTarget.split('-').map(Number);
        intensityMin = min || 0;
        intensityMax = max || min || 0;
        intensityType = 'power';
      } else if (interval.bpmTarget) {
        const [min, max] = interval.bpmTarget.split('-').map(Number);
        intensityMin = min || 0;
        intensityMax = max || min || 0;
        intensityType = 'heartRate';
      } else if (interval.rpeTarget) {
        intensityType = 'rpe';
      }
      
      return {
        id: interval.id,
        name: `Interval ${interval.id}`,
        duration,
        durationType: interval.distance ? 'distance' : 'time',
        intensityType,
        intensityMin,
        intensityMax
      };
    });
    onChange(converted);
  };
  
  const handleStrengthExercisesChange = (exercises: StrengthExercise[]) => {
    // For strength, we don't need to convert to intervals
    // This will be handled separately in the parent component
  };
  
  if (workoutType === 'run') {
    return (
      <RunIntervalBuilder 
        intervals={runIntervals} 
        onChange={handleRunIntervalsChange} 
        isMetric={!useImperial}
      />
    );
  }
  
  if (workoutType === 'ride') {
    return (
      <RideIntervalBuilder 
        intervals={rideIntervals} 
        onChange={handleRideIntervalsChange} 
        isMetric={!useImperial}
      />
    );
  }
  
  if (workoutType === 'strength') {
    return (
      <StrengthExerciseBuilder 
        exercises={strengthExercises} 
        onChange={handleStrengthExercisesChange} 
        isMetric={!useImperial}
      />
    );
  }
  
  return (
    <div className="text-center py-8 text-muted-foreground">
      Select a workout type to configure details.
    </div>
  );
};

export default WorkoutIntervals;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/WorkoutList.tsx
import React from 'react';
import { useAppContext } from '@/contexts/AppContext';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Activity, Dumbbell, Trash2 } from 'lucide-react';

interface WorkoutListProps {
  onWorkoutSelect?: (workout: any) => void;
}

const WorkoutList: React.FC<WorkoutListProps> = ({ onWorkoutSelect }) => {
  const { workouts, deleteWorkout } = useAppContext();

  const handleDelete = async (id: string, e: React.MouseEvent) => {
    e.stopPropagation();
    if (confirm('Are you sure you want to delete this workout?')) {
      await deleteWorkout(id);
    }
  };

  if (workouts.length === 0) {
    return (
      <Card>
        <CardContent className="pt-6 text-center text-muted-foreground">
          <p>No workouts yet. Create your first workout!</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-4">
      {workouts.map((workout) => (
        <Card 
          key={workout.id} 
          className="cursor-pointer hover:shadow-md transition-shadow"
          onClick={() => onWorkoutSelect?.(workout)}
        >
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center gap-2">
                {workout.type === 'endurance' ? (
                  <Activity className="h-5 w-5 text-blue-500" />
                ) : (
                  <Dumbbell className="h-5 w-5 text-green-500" />
                )}
                {workout.name}
              </CardTitle>
              <div className="flex items-center gap-2">
                <Badge variant={workout.workout_status === 'completed' ? 'default' : 'secondary'}>
                  {workout.workout_status || 'planned'}
                </Badge>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={(e) => handleDelete(workout.id, e)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between text-sm text-muted-foreground">
              <span>{new Date(workout.date).toLocaleDateString()}</span>
              <span>{workout.duration} minutes</span>
              {workout.type === 'endurance' && workout.distance && (
                <span>{workout.distance.toFixed(1)} km</span>
              )}
            </div>
            {workout.description && (
              <p className="mt-2 text-sm text-gray-600 line-clamp-2">{workout.description}</p>
            )}
          </CardContent>
        </Card>
      ))}
    </div>
  );
};

export default WorkoutList;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/WorkoutMetrics.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Activity, Clock, Zap, Heart } from 'lucide-react';

interface WorkoutMetricsProps {
  workout: {
    distance?: number;
    duration?: number; // 🔧 ADDED: The actual field name used in the data
    elapsed_time?: number;
    moving_time?: number;
    avg_speed?: number;
    max_speed?: number;
    avg_pace?: number;
    avg_heart_rate?: number;
    max_heart_rate?: number;
    hrv?: number;
    avg_power?: number;
    max_power?: number;
    normalized_power?: number;
    avg_cadence?: number;
    max_cadence?: number;
    elevation_gain?: number;
    elevation_loss?: number;
    calories?: number;
    tss?: number;
    intensity_factor?: number;
  };
}

const WorkoutMetrics: React.FC<WorkoutMetricsProps> = ({ workout }) => {
  const formatTime = (seconds?: number) => {
    if (!seconds) return 'N/A';
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    
    if (hours > 0) {
      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
    return `${minutes}:${secs.toString().padStart(2, '0')}`;
  };

  const formatPace = (pace?: number) => {
    if (!pace) return 'N/A';
    const minutes = Math.floor(pace);
    const seconds = Math.floor((pace - minutes) * 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Distance</CardTitle>
          <Activity className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{workout.distance?.toFixed(2) || 'N/A'}</div>
          <p className="text-xs text-muted-foreground">km</p>
        </CardContent>
      </Card>

      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Duration</CardTitle>
          <Clock className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{formatTime(workout.duration || workout.elapsed_time)}</div>
          <p className="text-xs text-muted-foreground">Moving: {formatTime(workout.moving_time)}</p>
        </CardContent>
      </Card>

      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Heart Rate</CardTitle>
          <Heart className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{workout.avg_heart_rate || 'N/A'}</div>
          <p className="text-xs text-muted-foreground">Max: {workout.max_heart_rate || 'N/A'} bpm</p>
        </CardContent>
      </Card>

      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Power</CardTitle>
          <Zap className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{workout.avg_power || 'N/A'}</div>
          <p className="text-xs text-muted-foreground">Max: {workout.max_power || 'N/A'} W</p>
        </CardContent>
      </Card>
    </div>
  );
};

export default WorkoutMetrics;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/WorkoutSummary.tsx
import React, { useState } from 'react';
import { Trash2, ChevronDown, ChevronUp } from 'lucide-react';
import { useAppContext } from '@/contexts/AppContext';

interface WorkoutSummaryProps {
  workout: any;
  onClose: () => void;
  onDelete?: (workoutId: string) => void;
}

export default function WorkoutSummary({ workout, onClose, onDelete }: WorkoutSummaryProps) {
  console.log('🚨 NEW CLEAN WORKOUT SUMMARY LOADED');
  console.log('🔍 Workout intervals:', workout.intervals);
  console.log('🔍 Full workout object:', JSON.stringify(workout, null, 2));
  const { useImperial } = useAppContext();
  const [notesExpanded, setNotesExpanded] = useState(false);
  const [workoutStatus, setWorkoutStatus] = useState(workout?.status || workout?.workout_status || 'planned');

  if (!workout) {
    return (
      <div className="p-3 space-y-4">
        <div className="text-center py-8 text-gray-500">
          No workout selected
        </div>
      </div>
    );
  }

  const formatDate = (dateStr: string) => {
    const [year, month, day] = dateStr.split('-').map(Number);
    const date = new Date(year, month - 1, day);
    return date.toLocaleDateString('en-US', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
  };

  const handleMarkComplete = () => {
    setWorkoutStatus('completed');
  };

  const handleDelete = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    
    if (!confirm('Delete this workout?')) return;
    
    if (onDelete && workout.id) {
      onDelete(workout.id);
    }
  };

  const getWorkoutTypeColor = (type: string) => {
    switch (type) {
      case 'run': return 'text-green-600';
      case 'ride': return 'text-blue-600';
      case 'strength': return 'text-orange-600';
      case 'swim': return 'text-cyan-600';
      default: return 'text-gray-600';
    }
  };

  const isCompleted = workoutStatus === 'completed';
  const hasNotes = workout.notes || workout.description;

  return (
    <div className="p-3 space-y-4" style={{listStyle: 'none', listStyleType: 'none'}}>
      <style jsx>{`
        * {
          list-style: none !important;
          list-style-type: none !important;
        }
        *::before, *::after {
          content: none !important;
        }
      `}</style>
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="space-y-1">
          <h1 className="text-2xl font-bold">{workout.name || 'Untitled Workout'}</h1>
          <p className="text-gray-500">{formatDate(workout.date)}</p>
          <p className={`text-lg font-medium capitalize ${getWorkoutTypeColor(workout.type)}`}>
            {workout.type} Workout
          </p>
        </div>
        <div className="flex items-center gap-4">
          {!isCompleted && (
            <button
              onClick={handleMarkComplete}
              className="px-3 py-1 text-sm text-gray-500 hover:text-gray-700"
            >
              Mark done
            </button>
          )}
          <button
            onClick={handleDelete}
            className="text-gray-400 hover:text-red-500 transition-colors"
          >
            <Trash2 className="h-4 w-4" />
          </button>
        </div>
      </div>

      {/* Description */}
      {workout.description && (
        <div className="space-y-2">
          <h3 className="font-semibold text-lg">Description</h3>
          <p className="text-gray-600">{workout.description}</p>
        </div>
      )}

      {/* Intervals - FIXED: Added CSS to prevent mobile ")) symbols */}
      {workout.intervals && workout.intervals.length > 0 && (
        <div className="space-y-3">
          {workout.intervals.map((interval: any, index: number) => (
            <div key={interval.id || index} className="space-y-1">
              <h4 className="font-medium text-lg">
                {interval.effortLabel || interval.name || `SEGMENT ${index + 1}`}
              </h4>
              <div className="space-y-1 text-gray-600">
                {isCompleted ? (
                  /* Completed view - unpack repeats */
                  <div>
                    {interval.isRepeatBlock ? (
                      <div className="space-y-1">
                        <p>{interval.time} planned:</p>
                        <div className="ml-4 space-y-1">
                          {Array.from({ length: interval.repeatCount || 1 }, (_, i) => (
                            <div key={i} className="space-y-1">
                              <p className="font-medium text-sm">Repeat {i + 1}:</p>
                              <p className="ml-4">4:00 @ Hard planned → 4:02 actual (6:15 pace, HR: 165 avg)</p>
                              <p className="ml-4">1:00 @ Easy planned → 58s actual (8:30 pace, HR: 145 avg)</p>
                            </div>
                          ))}
                        </div>
                      </div>
                    ) : (
                      <p>{interval.time} planned → {interval.time} actual (N/A pace, HR: N/A avg)</p>
                    )}
                  </div>
                ) : (
                  /* Planned view - clean and simple */
                  <div>
                    <p>{interval.time} @ {interval.effortLabel || 'Easy'} pace</p>
                    {interval.bpmTarget && <p>HR: {interval.bpmTarget} bpm</p>}
                    {interval.paceTarget && <p>Pace: {interval.paceTarget}</p>}
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Strength Exercises */}
      {workout.strength_exercises && workout.strength_exercises.length > 0 && (
        <div className="space-y-3">
          <h3 className="font-semibold text-lg">EXERCISES</h3>
          {workout.strength_exercises.map((exercise: any, index: number) => (
            <div key={exercise.id || index} className="space-y-1">
              <h4 className="font-medium text-lg">{exercise.name}</h4>
              <div className="text-gray-600">
                <p>{exercise.sets} sets × {exercise.reps} reps @ {exercise.weight} {useImperial ? 'lbs' : 'kg'}</p>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Expandable Notes */}
      {hasNotes && (
        <div className="space-y-2">
          <button
            onClick={() => setNotesExpanded(!notesExpanded)}
            className="flex items-center gap-2 font-semibold text-lg hover:text-blue-600"
          >
            {notesExpanded ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
            NOTES
          </button>
          {notesExpanded && (
            <div className="text-gray-600 whitespace-pre-wrap">
              {workout.notes || workout.description}
            </div>
          )}
        </div>
      )}
    </div>
  );
}

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/WorkoutSummaryChart.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';

interface Interval {
  duration?: string;
  distance?: string;
  recovery?: string;
  recoveryTime?: string;
  recoveryDistance?: string;
  repeats?: number;
}

interface WorkoutSummaryChartProps {
  intervals: Interval[];
  workoutType: string;
}

function parseTimeToSeconds(timeStr: string): number {
  if (!timeStr) return 0;
  const parts = timeStr.split(':');
  if (parts.length === 2) {
    return parseInt(parts[0]) * 60 + parseInt(parts[1]);
  }
  return parseInt(timeStr) || 0;
}

function formatTime(seconds: number): string {
  const mins = Math.floor(seconds / 60);
  const secs = seconds % 60;
  return `${mins}:${secs.toString().padStart(2, '0')}`;
}

export default function WorkoutSummaryChart({ intervals, workoutType }: WorkoutSummaryChartProps) {
  if (!intervals.length) return null;

  const chartData = intervals.map((interval, index) => {
    const workDuration = parseTimeToSeconds(interval.duration || '0');
    const recoveryDuration = parseTimeToSeconds(interval.recovery || interval.recoveryTime || '0');
    const repeats = interval.repeats || 1;
    
    return {
      index,
      workDuration,
      recoveryDuration,
      repeats,
      totalDuration: (workDuration + recoveryDuration) * repeats
    };
  });

  const totalWorkoutTime = chartData.reduce((sum, item) => sum + item.totalDuration, 0);
  const maxDuration = Math.max(...chartData.map(item => item.totalDuration));

  return (
    <Card className="mb-6">
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>Workout Timeline</span>
          <Badge variant="outline">
            Total: {formatTime(totalWorkoutTime)}
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          {chartData.map((item, index) => {
            const workWidth = maxDuration > 0 ? (item.workDuration * item.repeats / maxDuration) * 100 : 0;
            const recoveryWidth = maxDuration > 0 ? (item.recoveryDuration * item.repeats / maxDuration) * 100 : 0;
            
            return (
              <div key={index} className="space-y-1">
                <div className="flex items-center justify-between text-sm">
                  <span>Interval {index + 1}</span>
                  <span className="text-muted-foreground">
                    {formatTime(item.totalDuration)}
                    {item.repeats > 1 && ` (${item.repeats}x)`}
                  </span>
                </div>
                <div className="flex h-6 bg-muted rounded overflow-hidden">
                  {/* Work portion */}
                  <div 
                    className="bg-blue-500 flex items-center justify-center text-xs text-white font-medium"
                    style={{ width: `${workWidth}%` }}
                  >
                    {workWidth > 15 && 'Work'}
                  </div>
                  {/* Recovery portion */}
                  {recoveryWidth > 0 && (
                    <div 
                      className="bg-green-400 flex items-center justify-center text-xs text-white font-medium"
                      style={{ width: `${recoveryWidth}%` }}
                    >
                      {recoveryWidth > 15 && 'Recovery'}
                    </div>
                  )}
                </div>
              </div>
            );
          })}
        </div>
        
        <div className="mt-4 flex items-center gap-4 text-sm">
          <div className="flex items-center gap-2">
            <div className="w-3 h-3 bg-blue-500 rounded"></div>
            <span>Work Intervals</span>
          </div>
          <div className="flex items-center gap-2">
            <div className="w-3 h-3 bg-green-400 rounded"></div>
            <span>Recovery</span>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/WorkoutTypeFilter.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Activity, Dumbbell, Calendar, Filter, Waves, Bike } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

interface WorkoutTypeFilterProps {
  selectedType: 'all' | 'run' | 'ride' | 'strength' | 'swim';
  onTypeChange: (type: 'all' | 'run' | 'ride' | 'strength' | 'swim') => void;
  workoutCounts: {
    all: number;
    run: number;
    ride: number;
    strength: number;
    swim: number;
  };
}

const WorkoutTypeFilter: React.FC<WorkoutTypeFilterProps> = ({
  selectedType,
  onTypeChange,
  workoutCounts
}) => {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Filter className="h-5 w-5" />
          Training Session Type
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          <Select value={selectedType} onValueChange={onTypeChange}>
            <SelectTrigger>
              <SelectValue placeholder="Select training type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">
                <div className="flex items-center gap-2">
                  <Calendar className="h-4 w-4" />
                  All Sessions
                </div>
              </SelectItem>
              <SelectItem value="run">
                <div className="flex items-center gap-2">
                  <Activity className="h-4 w-4 text-blue-500" />
                  Running
                </div>
              </SelectItem>
              <SelectItem value="ride">
                <div className="flex items-center gap-2">
                  <Bike className="h-4 w-4 text-orange-500" />
                  Riding
                </div>
              </SelectItem>
              <SelectItem value="strength">
                <div className="flex items-center gap-2">
                  <Dumbbell className="h-4 w-4 text-green-500" />
                  Strength Training
                </div>
              </SelectItem>
              <SelectItem value="swim">
                <div className="flex items-center gap-2">
                  <Waves className="h-4 w-4 text-cyan-500" />
                  Swimming
                </div>
              </SelectItem>
            </SelectContent>
          </Select>
          
          <div className="grid grid-cols-5 gap-2">
            <Button
              variant={selectedType === 'all' ? 'default' : 'outline'}
              size="sm"
              onClick={() => onTypeChange('all')}
              className="flex flex-col gap-1 h-auto py-2"
            >
              <Calendar className="h-4 w-4" />
              <span className="text-xs">All</span>
              <Badge variant="secondary" className="text-xs">
                {workoutCounts.all}
              </Badge>
            </Button>
            
            <Button
              variant={selectedType === 'run' ? 'default' : 'outline'}
              size="sm"
              onClick={() => onTypeChange('run')}
              className="flex flex-col gap-1 h-auto py-2"
            >
              <Activity className="h-4 w-4 text-blue-500" />
              <span className="text-xs">Run</span>
              <Badge variant="secondary" className="text-xs">
                {workoutCounts.run}
              </Badge>
            </Button>
            
            <Button
              variant={selectedType === 'ride' ? 'default' : 'outline'}
              size="sm"
              onClick={() => onTypeChange('ride')}
              className="flex flex-col gap-1 h-auto py-2"
            >
              <Bike className="h-4 w-4 text-orange-500" />
              <span className="text-xs">Ride</span>
              <Badge variant="secondary" className="text-xs">
                {workoutCounts.ride}
              </Badge>
            </Button>
            
            <Button
              variant={selectedType === 'strength' ? 'default' : 'outline'}
              size="sm"
              onClick={() => onTypeChange('strength')}
              className="flex flex-col gap-1 h-auto py-2"
            >
              <Dumbbell className="h-4 w-4 text-green-500" />
              <span className="text-xs">Strength</span>
              <Badge variant="secondary" className="text-xs">
                {workoutCounts.strength}
              </Badge>
            </Button>
            
            <Button
              variant={selectedType === 'swim' ? 'default' : 'outline'}
              size="sm"
              onClick={() => onTypeChange('swim')}
              className="flex flex-col gap-1 h-auto py-2"
            >
              <Waves className="h-4 w-4 text-cyan-500" />
              <span className="text-xs">Swim</span>
              <Badge variant="secondary" className="text-xs">
                {workoutCounts.swim}
              </Badge>
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default WorkoutTypeFilter;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/theme-provider.tsx
"use client"

import * as React from "react"
import { createContext, useContext, useEffect, useState } from "react"
import { ThemeProviderProps } from "next-themes/dist/types"

type Theme = "dark" | "light" | "system"

type ThemeContextType = {
  theme: Theme
  setTheme: (theme: Theme) => void
}

const ThemeContext = createContext<ThemeContextType | null>(null)

export function ThemeProvider({
  children,
  defaultTheme = "system",
  value: _value,
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(() => {
    if (typeof window !== "undefined") {
      const savedTheme = localStorage.getItem("theme")
      return (savedTheme && (savedTheme === "dark" || savedTheme === "light" || savedTheme === "system")
        ? savedTheme
        : defaultTheme) as Theme
    }
    return defaultTheme as Theme
  })

  useEffect(() => {
    const root = window.document.documentElement
    root.classList.remove("light", "dark")

    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)")
        .matches
        ? "dark"
        : "light"
      root.classList.add(systemTheme)
      return
    }

    root.classList.add(theme)
  }, [theme])

  const value: ThemeContextType = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem("theme", theme)
      setTheme(theme)
    },
  }

  return (
    <ThemeContext.Provider value={value} {...props}>
      {children}
    </ThemeContext.Provider>
  )
}

export const useTheme = (): ThemeContextType => {
  const context = useContext(ThemeContext)
  if (!context) {
    throw new Error("useTheme must be used within a ThemeProvider")
  }
  return context
}


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/accordion.tsx
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b border-border/50", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:text-primary [&[data-state=open]>svg]:rotate-180 [&[data-state=open]]:text-primary",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-300 ease-in-out text-muted-foreground" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm text-muted-foreground transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/alert-dialog.tsx
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-card p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 mt-4",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-primary/90", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground mt-2", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/alert.tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground shadow-sm",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
        success:
          "border-green-500/50 text-green-600 dark:text-green-400 [&>svg]:text-green-600 dark:[&>svg]:text-green-400 bg-green-50 dark:bg-green-950/20",
        warning:
          "border-yellow-500/50 text-yellow-600 dark:text-yellow-400 [&>svg]:text-yellow-600 dark:[&>svg]:text-yellow-400 bg-yellow-50 dark:bg-yellow-950/20",
        info:
          "border-primary/50 text-primary dark:text-primary-foreground [&>svg]:text-primary bg-primary/10 dark:bg-primary/20",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed opacity-90", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/aspect-ratio.tsx
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/avatar.tsx
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root> & {
    size?: "sm" | "md" | "lg" | "xl"
  }
>(({ className, size = "md", ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex shrink-0 overflow-hidden rounded-full border border-border/30 ring-offset-background",
      size === "sm" && "h-8 w-8",
      size === "md" && "h-10 w-10",
      size === "lg" && "h-12 w-12",
      size === "xl" && "h-16 w-16",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full object-cover", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted text-muted-foreground",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/badge.tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-all focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground border-border",
        success:
          "border-transparent bg-green-500/20 text-green-700 dark:text-green-300 border-green-500/30",
        warning:
          "border-transparent bg-yellow-500/20 text-yellow-700 dark:text-yellow-300 border-yellow-500/30",
        info:
          "border-transparent bg-primary/10 text-primary border-primary/30",
      },
      size: {
        default: "px-2.5 py-0.5 text-xs",
        sm: "px-2 py-0.5 text-[10px]",
        lg: "px-3 py-0.5 text-sm",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, size, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant, size }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/breadcrumb.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-primary focus-visible:text-primary", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-medium text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5 text-muted-foreground/50", className)}
    {...props}
  >
    {children ?? <ChevronRight className="h-3.5 w-3.5" />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center text-muted-foreground", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-black text-white hover:bg-black border-none",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-gray-300 bg-white text-black hover:bg-gray-50 hover:text-black",
        secondary:
          "bg-white text-black border border-gray-300 hover:bg-gray-50 hover:text-black",
        ghost: "bg-white text-black hover:bg-gray-50 hover:text-black",
        link: "text-black underline-offset-4 hover:underline",
        toggle: "bg-white text-black border border-gray-300 hover:bg-gray-50 hover:text-black",
        "toggle-active": "bg-black text-white border border-black",
        // New clean variant for Save buttons and similar actions
        clean: "bg-transparent text-muted-foreground hover:text-foreground border-none shadow-none",
      },
      size: {
        default: "px-6 py-3",
        sm: "px-3 py-2 text-xs",
        lg: "px-8 py-4",
        icon: "h-9 w-9",
        effort: "px-6 py-3",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        style={{ 
          fontFamily: 'Inter, sans-serif', 
          fontWeight: 500,
          letterSpacing: '0.02em',
          padding: size === 'effort' ? '12px 24px' : undefined
        }}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/calendar.tsx
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium text-foreground",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline", size: "sm" }),
          "h-7 w-7 bg-transparent p-0 opacity-70 hover:opacity-100 transition-opacity"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost", size: "sm" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100 hover:text-accent-foreground"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground rounded-md transition-colors",
        day_today: "bg-accent/50 text-accent-foreground rounded-md",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/30 aria-selected:text-muted-foreground aria-selected:opacity-40",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent/60 aria-selected:text-accent-foreground rounded-none",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/card.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "bg-white text-black",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex flex-col space-y-1.5 p-6", className)} {...props} />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight text-black", className)}
    style={{ fontFamily: 'Inter, sans-serif' }}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    style={{ fontFamily: 'Inter, sans-serif', letterSpacing: '0.02em' }}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center p-6 pt-0", className)} {...props} />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/carousel.tsx
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full border border-border/40 opacity-80 hover:opacity-100 transition-opacity",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full border border-border/40 opacity-80 hover:opacity-100 transition-opacity",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/chart.tsx
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/40 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border/60 [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border/40 [&_.recharts-radial-bar-background-sector]:fill-muted/50 [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted/80 [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border/40 [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background/95 backdrop-blur-sm px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/checkbox.tsx
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary/60 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground transition-colors duration-200",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-3.5 w-3.5 transition-transform duration-200" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/collapsible.tsx
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/command.tsx
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b border-border/40 px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground/60 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm text-muted-foreground"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border/60", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent/60 data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 transition-colors",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground/70",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/context-menu.tsx
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[state=open]:bg-accent/60 data-[state=open]:text-accent-foreground transition-colors",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border border-border/40 bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border border-border/40 bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-colors",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-colors",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4 text-primary" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-colors",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current text-primary" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-medium text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border/60", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground/70",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/dialog.tsx
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border border-border/40 bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight text-foreground",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/drawer.tsx
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-background/80 backdrop-blur-sm", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border border-border bg-card shadow-lg",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted/50" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight text-primary/90",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground mt-2", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/dropdown-menu.tsx
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[state=open]:bg-accent/60 data-[state=open]:text-accent-foreground transition-colors",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border border-border/40 bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border border-border/40 bg-popover/95 backdrop-blur-sm p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4 text-primary" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current text-primary" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-medium text-foreground/80",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border/60", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest text-muted-foreground/70", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/form.tsx
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2 mb-4", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", "text-sm font-medium mb-1", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground/80 mt-1", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive mt-1", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/hover-card.tsx
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border border-border/40 bg-popover/95 backdrop-blur-sm p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/input-otp.tsx
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input bg-background/50 text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-1 ring-primary ring-offset-background border-primary/50",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-primary duration-700" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props} className="text-muted-foreground">
    <Dot className="h-4 w-4" />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/input.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full border border-gray-300 bg-white px-4 py-3 text-sm text-black placeholder:text-muted-foreground focus:border-black focus:outline-none disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        style={{ 
          fontFamily: 'Inter, sans-serif', 
          letterSpacing: '0.02em' 
        }}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/label.tsx
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
  {
    variants: {
      variant: {
        default: "text-foreground",
        muted: "text-muted-foreground",
        accent: "text-primary",
      },
      size: {
        default: "text-sm",
        xs: "text-xs",
        sm: "text-sm",
        lg: "text-base",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, variant, size, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants({ variant, size }), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/menubar.tsx
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border border-border/50 bg-background/50 p-1 shadow-sm",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent/60 focus:text-accent-foreground data-[state=open]:bg-accent/60 data-[state=open]:text-accent-foreground transition-colors",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[state=open]:bg-accent/60 data-[state=open]:text-accent-foreground transition-colors",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border border-border/40 bg-popover/95 backdrop-blur-sm p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border border-border/40 bg-popover/95 backdrop-blur-sm p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-colors",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-colors",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4 text-primary" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-colors",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current text-primary" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-medium text-foreground/80",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border/60", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground/70",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/navigation-menu.tsx
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background/50 px-4 py-2 text-sm font-medium transition-all hover:bg-accent/50 hover:text-accent-foreground focus:bg-accent/50 focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/60 data-[state=open]:bg-accent/60"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 ease-in-out group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 duration-200 md:absolute md:w-auto",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border border-border/40 bg-popover/95 backdrop-blur-sm text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-primary/20 shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/pagination.tsx
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      isActive && "border-primary/50 bg-primary/5 text-primary hover:bg-primary/10",
      "transition-colors",
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5 hover:text-primary", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5 hover:text-primary", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center text-muted-foreground", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/popover.tsx
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border border-border/40 bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/progress.tsx
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

interface ProgressProps extends
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> {
  variant?: "default" | "success" | "warning" | "error"
}

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  ProgressProps
>(({ className, value, variant = "default", ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-secondary/40",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className={cn(
        "h-full w-full flex-1 transition-all duration-300 ease-in-out",
        variant === "default" && "bg-primary",
        variant === "success" && "bg-green-500",
        variant === "warning" && "bg-yellow-500",
        variant === "error" && "bg-destructive",
      )}
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/radio-group.tsx
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary/60 text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 transition-all duration-200",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-muted-foreground animate-in scale-in-0 duration-200" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/resizable.tsx
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border/50 after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-primary focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border border-border/50 bg-border/30 hover:bg-border/50 transition-colors">
        <GripVertical className="h-2.5 w-2.5 text-primary/40" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/scroll-area.tsx
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root> & {
    hideScrollbar?: boolean
  }
>(({ className, children, hideScrollbar = false, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    {!hideScrollbar && <ScrollBar />}
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors duration-300",
      orientation === "vertical" &&
        "h-full w-2 border-l border-l-transparent p-[1px] hover:w-2.5",
      orientation === "horizontal" &&
        "h-2 flex-col border-t border-t-transparent p-[1px] hover:h-2.5",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border/50 hover:bg-border/80 transition-colors" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/select.tsx
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground/60 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-primary focus-visible:border-primary/50 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 transition-colors",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50 transition-transform duration-200 ease-in-out group-data-[state=open]:rotate-180" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1 text-muted-foreground",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1 text-muted-foreground",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-border/40 bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-medium text-muted-foreground", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent/50 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-colors",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4 text-primary" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/separator.tsx
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

interface SeparatorProps extends
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root> {
  variant?: "default" | "muted" | "accent"
}

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  SeparatorProps
>(
  (
    { className, orientation = "horizontal", decorative = true, variant = "default", ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0",
        variant === "default" && "bg-border",
        variant === "muted" && "bg-muted",
        variant === "accent" && "bg-primary/30",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/sheet.tsx
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-card border shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b rounded-b-xl data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t rounded-t-xl data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 hover:text-primary focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 disabled:pointer-events-none">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 mt-4",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-primary/90", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground mt-2", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}



// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/sidebar.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const sidebarVariants = cva(
  "h-full bg-background/80 backdrop-blur-sm border-r border-border/40 shadow-sm",
  {
    variants: {
      size: {
        sm: "w-16",
        md: "w-64",
        lg: "w-80",
      },
      collapsible: {
        true: "transition-all duration-300 ease-in-out",
      },
    },
    defaultVariants: {
      size: "md",
    },
  }
)

interface SidebarProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof sidebarVariants> {
  collapsed?: boolean
}

const Sidebar = React.forwardRef<HTMLDivElement, SidebarProps>(
  (
    { className, size, collapsible, collapsed = false, children, ...props },
    ref
  ) => {
    const actualSize = collapsed ? "sm" : size
    return (
      <div
        ref={ref}
        className={cn(sidebarVariants({ size: actualSize, collapsible }), className)}
        {...props}
      >
        {children}
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("p-4 border-b border-border/40", className)}
    {...props}
  />
))
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("p-4 border-t border-border/40 mt-auto", className)}
    {...props}
  />
))
SidebarFooter.displayName = "SidebarFooter"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex flex-col flex-1 p-2", className)} {...props} />
))
SidebarContent.displayName = "SidebarContent"

const SidebarNav = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <nav
    ref={ref}
    className={cn("flex flex-col gap-1", className)}
    {...props}
  />
))
SidebarNav.displayName = "SidebarNav"

const SidebarNavItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & { active?: boolean }
>(({ className, active, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "flex items-center px-3 py-2 rounded-md text-sm text-foreground/80 hover:text-foreground hover:bg-accent/50 transition-colors cursor-pointer",
      active && "bg-accent/60 text-primary font-medium",
      className
    )}
    {...props}
  />
))
SidebarNavItem.displayName = "SidebarNavItem"

const SidebarSection = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("mb-2", className)} {...props} />
))
SidebarSection.displayName = "SidebarSection"

const SidebarSectionTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-xs uppercase font-medium text-muted-foreground/70 tracking-wider px-3 py-1", className)}
    {...props}
  />
))
SidebarSectionTitle.displayName = "SidebarSectionTitle"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
  SidebarNav,
  SidebarNavItem,
  SidebarSection,
  SidebarSectionTitle
}


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/skeleton.tsx
import * as React from "react"
import { cn } from "@/lib/utils"

interface SkeletonProps extends React.HTMLAttributes<HTMLDivElement> {
  animated?: boolean
}

function Skeleton({
  className,
  animated = true,
  ...props
}: SkeletonProps) {
  return (
    <div
      className={cn(
        "rounded-md bg-muted/70",
        animated && "animate-pulse",
        className
      )}
      {...props}
    />
  )
}

export { Skeleton }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/slider.tsx
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-1.5 w-full grow overflow-hidden rounded-full bg-secondary/50">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-4 w-4 rounded-full border border-primary/50 bg-background shadow-sm ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:border-primary hover:scale-110" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/sonner.tsx

import React from "react"
import { Toaster as Sonner, toast } from "sonner"
import { useTheme } from "@/components/theme-provider"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster, toast }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/switch.tsx
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-10 shrink-0 cursor-pointer items-center rounded-full border border-transparent transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-md ring-0 transition-transform duration-200 ease-in-out data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0.5 data-[state=checked]:bg-white"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/table.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/tabs.tsx
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center bg-white text-[#666666]",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap px-6 py-3 text-sm font-medium transition-all focus-visible:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-black data-[state=active]:text-white data-[state=active]:shadow-none hover:bg-[#F5F5F5]",
      className
    )}
    style={{ fontFamily: 'Inter, sans-serif', letterSpacing: '0.02em' }}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-8 focus-visible:outline-none",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/textarea.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[60px] w-full border border-gray-300 bg-white px-4 py-3 text-sm text-black placeholder:text-muted-foreground focus:border-black focus:outline-none disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        style={{ 
          fontFamily: 'Inter, sans-serif', 
          letterSpacing: '0.02em' 
        }}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/toast.tsx
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/toaster.tsx
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/toggle-group.tsx
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants> & {
      orientation?: "horizontal" | "vertical"
    }
>(({ className, variant, size, orientation = "horizontal", children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn(
      "flex items-center gap-1",
      orientation === "vertical" ? "flex-col" : "flex-row",
      variant === "outline" && "bg-background rounded-md border border-input p-1",
      className
    )}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        context.variant === "outline" && "data-[state=on]:bg-background data-[state=on]:text-foreground",
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/toggle.tsx
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent/60 data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent hover:bg-muted/60 hover:text-foreground",
        outline:
          "border border-input bg-transparent hover:bg-accent/20 hover:text-accent-foreground data-[state=on]:border-accent",
        soft:
          "bg-transparent hover:bg-primary/10 data-[state=on]:bg-primary/20 data-[state=on]:text-primary",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-8 px-2.5 text-xs",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/tooltip.tsx
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border border-border/40 bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-lg animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/components/ui/use-toast.ts
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/contexts/AppContext.tsx
import React, { createContext, useContext, useState, useEffect } from 'react';
import { useWorkouts } from '@/hooks/useWorkouts';
import { supabase } from '@/lib/supabase';

export interface WorkoutInterval {
  id: string;
  name: string;
  duration: number;
  durationType: 'time' | 'distance';
  intensityType: 'heartRate' | 'power' | 'pace' | 'rpe';
  intensityMin: number;
  intensityMax: number;
  description?: string;
}

export interface SwimWorkoutData {
  totalDistance: number;
  targetPacePer100: string;
  strokeType: 'Freestyle' | 'Backstroke' | 'Breaststroke' | 'Butterfly' | 'Kick-Only';
  equipmentUsed: string[];
}

interface Workout {
  id: string;
  name: string;
  type: 'run' | 'ride' | 'strength' | 'swim';
  duration: number;
  date: string;
  description: string;
  intervals?: WorkoutInterval[];
  swimData?: SwimWorkoutData;
}

// NEW: Plan interface
interface Plan {
  id: string;
  name: string;
  description?: string;
  type?: string;
  duration?: number;
  level?: string;
  goal?: string;
  status: 'active' | 'completed';
  current_week?: number;
  created_date?: string;
  total_workouts?: number;
  weeks?: any;
  user_id?: string;
}

interface AppContextType {
  // Existing workout properties
  sidebarOpen: boolean;
  toggleSidebar: () => void;
  workouts: Workout[];
  loading: boolean;
  addWorkout: (workout: Omit<Workout, 'id'>) => Promise<any>;
  updateWorkout: (id: string, updates: Partial<Workout>) => Promise<any>;
  deleteWorkout: (id: string) => Promise<void>;
  useImperial: boolean;
  toggleUnits: () => void;
  
  // NEW: Plan management
  currentPlans: Plan[];
  completedPlans: Plan[];
  detailedPlans: any;
  plansLoading: boolean;
  addPlan: (plan: any) => Promise<void>;
  deletePlan: (planId: string) => Promise<void>;
  updatePlan: (planId: string, updates: any) => Promise<void>;
  refreshPlans: () => Promise<void>;
}

const defaultAppContext: AppContextType = {
  sidebarOpen: false,
  toggleSidebar: () => {},
  workouts: [],
  loading: false,
  addWorkout: async () => {},
  updateWorkout: async () => {},
  deleteWorkout: async () => {},
  useImperial: true,
  toggleUnits: () => {},
  
  // NEW: Plan defaults
  currentPlans: [],
  completedPlans: [],
  detailedPlans: {},
  plansLoading: false,
  addPlan: async () => {},
  deletePlan: async () => {},
  updatePlan: async () => {},
  refreshPlans: async () => {},
};

const AppContext = createContext<AppContextType>(defaultAppContext);

export const useAppContext = () => useContext(AppContext);

export const AppProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  // Existing workout state
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [useImperial, setUseImperial] = useState(true);
  const { workouts, loading, addWorkout, updateWorkout, deleteWorkout } = useWorkouts();
  
  // NEW: Plan state
  const [currentPlans, setCurrentPlans] = useState<Plan[]>([]);
  const [completedPlans, setCompletedPlans] = useState<Plan[]>([]);
  const [detailedPlans, setDetailedPlans] = useState<any>({});
  const [plansLoading, setPlansLoading] = useState(true);

  // NEW: Load plans from Supabase with user filtering
  const loadPlans = async () => {
    try {
      setPlansLoading(true);
      console.log('📋 Loading plans from Supabase...');
      
      // Get current user for filtering
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        console.log('No authenticated user, showing no plans');
        setCurrentPlans([]);
        setCompletedPlans([]);
        setDetailedPlans({});
        return;
      }

      console.log('Loading plans for user:', user.id);

      const { data: plans, error } = await supabase
        .from('plans')
        .select('*')
        .eq('user_id', user.id)  // ✅ FILTER: Only get plans for this user
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Error loading plans:', error);
        return;
      }

      console.log('📋 Loaded plans:', plans);

      // Separate active and completed plans WITH FIELD MAPPING
      const active = plans?.filter(p => p.status === 'active').map(plan => ({
        ...plan,
        currentWeek: plan.current_week  // Map snake_case to camelCase
      })) || [];
      
      const completed = plans?.filter(p => p.status === 'completed').map(plan => ({
        ...plan,
        currentWeek: plan.current_week  // Map snake_case to camelCase
      })) || [];
      
      setCurrentPlans(active);
      setCompletedPlans(completed);
      
      // Build detailed plans object WITH FIELD MAPPING
      const detailed = {};
      plans?.forEach(plan => {
        detailed[plan.id] = {
          ...plan,
          currentWeek: plan.current_week  // Map snake_case to camelCase
        };
      });
      setDetailedPlans(detailed);
      
      console.log('📋 Active plans:', active.length);
      console.log('📋 Completed plans:', completed.length);
      
    } catch (error) {
      console.error('Error in loadPlans:', error);
    } finally {
      setPlansLoading(false);
    }
  };

  // NEW: Add plan to Supabase - FIXED with user_id
  const addPlan = async (planData: any) => {
    try {
      console.log('📋 Adding plan to Supabase:', planData);
      
      // 🔥 FIXED: Get the current user for Row Level Security
      const { data: { user } } = await supabase.auth.getUser();
      
      const { data, error } = await supabase
        .from('plans')
        .insert([{
          id: planData.id,
          name: planData.name,
          description: planData.description,
          type: planData.type,
          duration: planData.duration,
          level: planData.level,
          goal: planData.goal,
          status: planData.status || 'active',
          current_week: planData.currentWeek || 1,
          total_workouts: planData.totalWorkouts,
          weeks: planData.weeks,
          user_id: user?.id  // 🔥 ADDED: Required for RLS authentication
        }])
        .select()
        .single();

      if (error) {
        console.error('Error adding plan:', error);
        throw error;
      }

      console.log('📋 Plan added successfully:', data);
      
      // Refresh plans to get updated data
      await loadPlans();
      
    } catch (error) {
      console.error('Error in addPlan:', error);
      throw error;
    }
  };

  // ✅ FIXED: Delete plan from Supabase with proper user authentication
  const deletePlan = async (planId: string) => {
    try {
      console.log('🗑️ Deleting plan from Supabase:', planId);
      
      // Get current user for Row Level Security
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        throw new Error('User must be authenticated to delete plans');
      }
      
      console.log('Using authenticated user for plan deletion:', user.id);

      const { error } = await supabase
        .from('plans')
        .delete()
        .eq('id', planId)
        .eq('user_id', user.id); // ✅ FIXED: Verify user owns this plan

      if (error) {
        console.error('Error deleting plan:', error);
        throw error;
      }

      console.log('🗑️ Plan deleted successfully');
      
      // Refresh plans to get updated data
      await loadPlans();
      
    } catch (error) {
      console.error('Error in deletePlan:', error);
      throw error;
    }
  };

  // NEW: Update plan in Supabase
  const updatePlan = async (planId: string, updates: any) => {
    try {
      console.log('📋 Updating plan in Supabase:', planId, updates);
      
      const { data, error } = await supabase
        .from('plans')
        .update(updates)
        .eq('id', planId)
        .select()
        .single();

      if (error) {
        console.error('Error updating plan:', error);
        throw error;
      }

      console.log('📋 Plan updated successfully:', data);
      
      // Refresh plans to get updated data
      await loadPlans();
      
    } catch (error) {
      console.error('Error in updatePlan:', error);
      throw error;
    }
  };

  // NEW: Refresh plans
  const refreshPlans = async () => {
    await loadPlans();
  };

  // Existing functions
  const toggleSidebar = () => {
    setSidebarOpen(prev => !prev);
  };

  const toggleUnits = () => {
    setUseImperial(prev => !prev);
  };

  // NEW: Load plans on mount
  useEffect(() => {
    loadPlans();
  }, []);

  return (
    <AppContext.Provider
      value={{
        // Existing workout values
        sidebarOpen,
        toggleSidebar,
        workouts,
        loading,
        addWorkout,
        updateWorkout,
        deleteWorkout,
        useImperial,
        toggleUnits,
        
        // NEW: Plan values
        currentPlans,
        completedPlans,
        detailedPlans,
        plansLoading,
        addPlan,
        deletePlan,
        updatePlan,
        refreshPlans,
      }}
    >
      {children}
    </AppContext.Provider>
  );
};

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/hooks/use-mobile.tsx
import * as React from "react"

const MOBILE_BREAKPOINT = 768;

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined);

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);

    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    };

    mql.addEventListener("change", onChange);
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    return () => mql.removeEventListener("change", onChange);
  }, []);

  return !!isMobile;
}


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/hooks/use-toast.ts
import * as React from "react";

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast";

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType["ADD_TOAST"];
      toast: ToasterToast;
    }
  | {
      type: ActionType["UPDATE_TOAST"];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType["DISMISS_TOAST"];
      toastId?: ToasterToast["id"];
    }
  | {
      type: ActionType["REMOVE_TOAST"];
      toastId?: ToasterToast["id"];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action;

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, "id">;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) =>
      dispatch({ type: "DISMISS_TOAST", toastId }),
  };
}

export { useToast, toast };


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/hooks/useWorkouts.ts
import { useState, useEffect } from "react";
import { supabase } from "@/lib/supabase";

// Interval Interfaces
export interface RunInterval {
  id: string;
  time?: string;
  distance?: string;
  paceTarget?: string;
  effortLabel?: string;
  bpmTarget?: string;
  rpeTarget?: string;
  repeat?: boolean;
  repeatCount?: number;
  duration?: number;
  selected?: boolean;
  isRepeatBlock?: boolean;
  originalSegments?: RunInterval[];
}

export interface RideInterval {
  id: string;
  time?: string;
  distance?: string;
  speedTarget?: string;
  powerTarget?: string;
  bpmTarget?: string;
  rpeTarget?: string;
  cadenceTarget?: string;
  repeat?: boolean;
  repeatCount?: number;
  duration?: number;
  selected?: boolean;
  isRepeatBlock?: boolean;
}

export interface SwimInterval {
  id: string;
  distance: string;
  targetRPE?: number;
  equipment: string;
  recoveryType: "time" | "distance";
  recovery: string;
  repeatCount: number;
  duration?: number;
}

export interface StrengthExercise {
  id: string;
  name: string;
  sets: number;
  reps: number;
  weight?: number;
  notes?: string;
  weightMode: "same" | "individual";
  individualWeights?: number[];
  completed_sets?: Array<{
    reps: number;
    weight: number;
    rir?: number;
    completed: boolean;
  }>;
}

// 🔧 ENHANCED: Workout Interface with ALL FIT fields
export interface Workout {
  id: string;
  name: string;
  type: "run" | "ride" | "swim" | "strength";
  duration: number;
  date: string;
  description?: string;
  userComments?: string;
  completedManually?: boolean;
  intervals?: RunInterval[] | RideInterval[] | SwimInterval[];
  strength_exercises?: StrengthExercise[];
  workout_status?: "planned" | "completed" | "skipped" | "in_progress";
  created_at?: string;
  updated_at?: string;
  
  // EXISTING FIT METRICS
  avg_heart_rate?: number;
  max_heart_rate?: number;
  avg_power?: number;
  max_power?: number;
  normalized_power?: number;
  avg_speed?: number;
  max_speed?: number;
  avg_cadence?: number;
  max_cadence?: number;
  elevation_gain?: number;
  elevation_loss?: number;
  calories?: number;
  tss?: number;
  intensity_factor?: number;
  distance?: number;
  
  // 🆕 NEW FIT FIELDS - Location & Device
  timestamp?: string;
  start_position_lat?: number;
  start_position_long?: number;
  friendly_name?: string;
  moving_time?: number;
  elapsed_time?: number;
  
  // 🆕 NEW FIT FIELDS - Temperature
  avg_temperature?: number;
  max_temperature?: number;
  
  // 🆕 NEW FIT FIELDS - Time Data
  total_timer_time?: number;
  total_elapsed_time?: number;
  
  // 🆕 NEW FIT FIELDS - Work/Energy
  total_work?: number;
  
  // 🆕 NEW FIT FIELDS - Elevation
  total_descent?: number;
  
  // 🆕 NEW FIT FIELDS - Performance
  avg_vam?: number;
  total_training_effect?: number;
  total_anaerobic_effect?: number;
  
  // 🆕 NEW FIT FIELDS - Zones
  functional_threshold_power?: number;
  threshold_heart_rate?: number;
  hr_calc_type?: string;
  pwr_calc_type?: string;
  
  // 🆕 NEW FIT FIELDS - User Profile
  age?: number;
  weight?: number;
  height?: number;
  gender?: string;
  default_max_heart_rate?: number;
  resting_heart_rate?: number;
  dist_setting?: string;
  weight_setting?: string;
  
  // 🆕 NEW FIT FIELDS - Cycling Details
  avg_fractional_cadence?: number;
  avg_left_pedal_smoothness?: number;
  avg_left_torque_effectiveness?: number;
  max_fractional_cadence?: number;
  left_right_balance?: number;
  threshold_power?: number;
  total_cycles?: number;
  
  // 🆕 NEW FIT FIELDS - Device Info
  deviceInfo?: any;
  
  metrics?: any; // For CompletedTab compatibility
}

export const useWorkouts = () => {
  const [workouts, setWorkouts] = useState<Workout[]>([]);
  const [loading, setLoading] = useState(true);

  // Get current user - proper auth this time
  const getCurrentUser = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (user) {
        console.log("Using authenticated user:", user.id);
        return user;
      } else {
        console.log("No authenticated user found");
        return null;
      }
    } catch (error) {
      console.error("Auth error:", error);
      return null;
    }
  };

  // Fetch - WITH proper user filtering and ALL FIT metrics
  const fetchWorkouts = async () => {
    try {
      setLoading(true);
      
      const user = await getCurrentUser();
      if (!user) {
        console.log("No user authenticated, showing no workouts");
        setWorkouts([]);
        return;
      }

      console.log("Fetching workouts for user:", user.id);

      const { data, error } = await supabase
        .from("workouts")
        .select("*")
        .eq("user_id", user.id)
        .order("date", { ascending: false });

      if (error) {
        console.error("Supabase error:", error);
        throw error;
      }

      console.log("Raw workout data from Supabase:", data);

      const mapped = data.map((w) => ({
        id: w.id,
        name: w.name,
        type: w.type,
        duration: w.duration,
        date: w.date,
        description: w.description,
        userComments: w.usercomments ?? "",
        completedManually: w.completedmanually ?? false,
        workout_status: w.workout_status ?? "planned",
        created_at: w.created_at,
        updated_at: w.updated_at,
        intervals: w.intervals ? JSON.parse(w.intervals) : [],
        strength_exercises: w.strength_exercises ? JSON.parse(w.strength_exercises) : [],
        
        // EXISTING FIT METRICS
        avg_heart_rate: w.avg_heart_rate,
        max_heart_rate: w.max_heart_rate,
        avg_power: w.avg_power,
        max_power: w.max_power,
        normalized_power: w.normalized_power,
        avg_speed: w.avg_speed,
        max_speed: w.max_speed,
        avg_cadence: w.avg_cadence,
        max_cadence: w.max_cadence,
        elevation_gain: w.elevation_gain,
        elevation_loss: w.elevation_loss,
        calories: w.calories,
        tss: w.tss,
        intensity_factor: w.intensity_factor,
        distance: w.distance,
        
        // 🆕 NEW FIT FIELDS - Location & Device
        timestamp: w.timestamp,
        start_position_lat: w.start_position_lat,
        start_position_long: w.start_position_long,
        friendly_name: w.friendly_name,
        moving_time: w.moving_time,
        elapsed_time: w.elapsed_time,
        
        // 🆕 NEW FIT FIELDS - Temperature
        avg_temperature: w.avg_temperature,
        max_temperature: w.max_temperature,
        
        // 🆕 NEW FIT FIELDS - Time Data
        total_timer_time: w.total_timer_time,
        total_elapsed_time: w.total_elapsed_time,
        
        // 🆕 NEW FIT FIELDS - Work/Energy
        total_work: w.total_work,
        
        // 🆕 NEW FIT FIELDS - Elevation
        total_descent: w.total_descent,
        
        // 🆕 NEW FIT FIELDS - Performance
        avg_vam: w.avg_vam,
        total_training_effect: w.total_training_effect,
        total_anaerobic_effect: w.total_anaerobic_effect,
        
        // 🆕 NEW FIT FIELDS - Zones
        functional_threshold_power: w.functional_threshold_power,
        threshold_heart_rate: w.threshold_heart_rate,
        hr_calc_type: w.hr_calc_type,
        pwr_calc_type: w.pwr_calc_type,
        
        // 🆕 NEW FIT FIELDS - User Profile
        age: w.age,
        weight: w.weight,
        height: w.height,
        gender: w.gender,
        default_max_heart_rate: w.default_max_heart_rate,
        resting_heart_rate: w.resting_heart_rate,
        dist_setting: w.dist_setting,
        weight_setting: w.weight_setting,
        
        // 🆕 NEW FIT FIELDS - Cycling Details
        avg_fractional_cadence: w.avg_fractional_cadence,
        avg_left_pedal_smoothness: w.avg_left_pedal_smoothness,
        avg_left_torque_effectiveness: w.avg_left_torque_effectiveness,
        max_fractional_cadence: w.max_fractional_cadence,
        left_right_balance: w.left_right_balance,
        threshold_power: w.threshold_power,
        total_cycles: w.total_cycles,
        
        // 🆕 NEW FIT FIELDS - Device Info
        deviceInfo: w.device_info,
        
        // 🔧 ENHANCED: Complete metrics object for CompletedTab with ALL fields
        metrics: {
          // Existing fields
          avg_heart_rate: w.avg_heart_rate,
          max_heart_rate: w.max_heart_rate,
          avg_power: w.avg_power,
          max_power: w.max_power,
          normalized_power: w.normalized_power,
          avg_speed: w.avg_speed,
          max_speed: w.max_speed,
          avg_cadence: w.avg_cadence,
          max_cadence: w.max_cadence,
          elevation_gain: w.elevation_gain,
          elevation_loss: w.elevation_loss,
          calories: w.calories,
          training_stress_score: w.tss,
          intensity_factor: w.intensity_factor,
          
          // 🆕 NEW FIELDS in metrics object
          avg_temperature: w.avg_temperature,
          max_temperature: w.max_temperature,
          total_timer_time: w.total_timer_time,
          total_elapsed_time: w.total_elapsed_time,
          total_work: w.total_work,
          total_descent: w.total_descent,
          avg_vam: w.avg_vam,
          total_training_effect: w.total_training_effect,
          total_anaerobic_effect: w.total_anaerobic_effect,
          functional_threshold_power: w.functional_threshold_power,
          threshold_heart_rate: w.threshold_heart_rate,
          hr_calc_type: w.hr_calc_type,
          pwr_calc_type: w.pwr_calc_type,
          age: w.age,
          weight: w.weight,
          height: w.height,
          gender: w.gender,
          default_max_heart_rate: w.default_max_heart_rate,
          resting_heart_rate: w.resting_heart_rate,
          dist_setting: w.dist_setting,
          weight_setting: w.weight_setting,
          avg_fractional_cadence: w.avg_fractional_cadence,
          avg_left_pedal_smoothness: w.avg_left_pedal_smoothness,
          avg_left_torque_effectiveness: w.avg_left_torque_effectiveness,
          max_fractional_cadence: w.max_fractional_cadence,
          left_right_balance: w.left_right_balance,
          threshold_power: w.threshold_power,
          total_cycles: w.total_cycles,
        }
      }));

      console.log("Mapped workouts:", mapped);
      setWorkouts(mapped);
    } catch (err) {
      console.error("Error in fetchWorkouts:", err);
    } finally {
      setLoading(false);
    }
  };

  // 🔧 ENHANCED: Add workout with ALL FIT fields support
  const addWorkout = async (workoutData: Omit<Workout, "id">) => {
    try {
      const user = await getCurrentUser();
      if (!user) {
        throw new Error("User must be authenticated to save workouts");
      }

      console.log("Using user for save:", user.id);

      const toSave = {
        // CORE FIELDS
        name: workoutData.name,
        type: workoutData.type,
        date: workoutData.date,
        duration: Math.round(workoutData.duration), // 🔧 FIX: Round to integer
        description: workoutData.description ?? "",
        usercomments: workoutData.userComments ?? "",
        completedmanually: workoutData.completedManually ?? false,
        workout_status: workoutData.workout_status ?? "planned",
        intervals: workoutData.intervals ? JSON.stringify(workoutData.intervals) : JSON.stringify([]),
        strength_exercises: workoutData.strength_exercises ? JSON.stringify(workoutData.strength_exercises) : JSON.stringify([]),
        user_id: user.id,
        
        // EXISTING FIT METRICS
        avg_heart_rate: workoutData.avg_heart_rate,
        max_heart_rate: workoutData.max_heart_rate,
        avg_power: workoutData.avg_power,
        max_power: workoutData.max_power,
        normalized_power: workoutData.normalized_power,
        avg_speed: workoutData.avg_speed,
        max_speed: workoutData.max_speed,
        avg_cadence: workoutData.avg_cadence,
        max_cadence: workoutData.max_cadence,
        elevation_gain: workoutData.elevation_gain,
        elevation_loss: workoutData.elevation_loss,
        calories: workoutData.calories,
        tss: workoutData.tss,
        intensity_factor: workoutData.intensity_factor,
        distance: workoutData.distance,
        
        // 🆕 NEW FIT FIELDS - Location & Device
        timestamp: workoutData.timestamp,
        start_position_lat: workoutData.start_position_lat,
        start_position_long: workoutData.start_position_long,
        friendly_name: workoutData.friendly_name,
        moving_time: workoutData.moving_time ? Math.round(workoutData.moving_time) : null, // 🔧 FIX: Round to integer
        elapsed_time: workoutData.elapsed_time ? Math.round(workoutData.elapsed_time) : null, // 🔧 FIX: Round to integer
        
        // 🆕 NEW FIT FIELDS - Temperature
        avg_temperature: workoutData.avg_temperature,
        max_temperature: workoutData.max_temperature,
        
        // 🆕 NEW FIT FIELDS - Time Data
        total_timer_time: workoutData.total_timer_time ? Math.round(workoutData.total_timer_time) : null, // 🔧 FIX: Round to integer
        total_elapsed_time: workoutData.total_elapsed_time ? Math.round(workoutData.total_elapsed_time) : null, // 🔧 FIX: Round to integer
        
        // 🆕 NEW FIT FIELDS - Work/Energy
        total_work: workoutData.total_work ? Math.round(workoutData.total_work) : null, // 🔧 FIX: Round to integer
        
        // 🆕 NEW FIT FIELDS - Elevation
        total_descent: workoutData.total_descent ? Math.round(workoutData.total_descent) : null, // 🔧 FIX: Round to integer
        
        // 🆕 NEW FIT FIELDS - Performance
        avg_vam: workoutData.avg_vam,
        total_training_effect: workoutData.total_training_effect,
        total_anaerobic_effect: workoutData.total_anaerobic_effect,
        
        // 🆕 NEW FIT FIELDS - Zones
        functional_threshold_power: workoutData.functional_threshold_power,
        threshold_heart_rate: workoutData.threshold_heart_rate,
        hr_calc_type: workoutData.hr_calc_type,
        pwr_calc_type: workoutData.pwr_calc_type,
        
        // 🆕 NEW FIT FIELDS - User Profile
        age: workoutData.age,
        weight: workoutData.weight,
        height: workoutData.height,
        gender: workoutData.gender,
        default_max_heart_rate: workoutData.default_max_heart_rate,
        resting_heart_rate: workoutData.resting_heart_rate,
        dist_setting: workoutData.dist_setting,
        weight_setting: workoutData.weight_setting,
        
        // 🆕 NEW FIT FIELDS - Cycling Details
        avg_fractional_cadence: workoutData.avg_fractional_cadence,
        avg_left_pedal_smoothness: workoutData.avg_left_pedal_smoothness,
        avg_left_torque_effectiveness: workoutData.avg_left_torque_effectiveness,
        max_fractional_cadence: workoutData.max_fractional_cadence,
        left_right_balance: workoutData.left_right_balance,
        threshold_power: workoutData.threshold_power,
        total_cycles: workoutData.total_cycles,
        
        // 🆕 NEW FIT FIELDS - Device Info
        device_info: workoutData.deviceInfo,
      };

      console.log("Saving workout with ALL FIT data:", toSave);

      const { data, error } = await supabase
        .from("workouts")
        .insert([toSave])
        .select()
        .single();

      if (error) {
        console.error("Error saving workout:", error);
        throw error;
      }

      const newWorkout: Workout = {
        id: data.id,
        name: data.name,
        type: data.type,
        duration: data.duration,
        date: data.date,
        description: data.description,
        userComments: data.usercomments ?? "",
        completedManually: data.completedmanually ?? false,
        workout_status: data.workout_status ?? "planned",
        created_at: data.created_at,
        updated_at: data.updated_at,
        intervals: data.intervals ? JSON.parse(data.intervals) : [],
        strength_exercises: data.strength_exercises ? JSON.parse(data.strength_exercises) : [],
        
        // EXISTING FIT METRICS
        avg_heart_rate: data.avg_heart_rate,
        max_heart_rate: data.max_heart_rate,
        avg_power: data.avg_power,
        max_power: data.max_power,
        normalized_power: data.normalized_power,
        avg_speed: data.avg_speed,
        max_speed: data.max_speed,
        avg_cadence: data.avg_cadence,
        max_cadence: data.max_cadence,
        elevation_gain: data.elevation_gain,
        elevation_loss: data.elevation_loss,
        calories: data.calories,
        tss: data.tss,
        intensity_factor: data.intensity_factor,
        distance: data.distance,
        
        // 🆕 NEW FIT FIELDS - All the new fields
        timestamp: data.timestamp,
        start_position_lat: data.start_position_lat,
        start_position_long: data.start_position_long,
        friendly_name: data.friendly_name,
        moving_time: data.moving_time,
        elapsed_time: data.elapsed_time,
        avg_temperature: data.avg_temperature,
        max_temperature: data.max_temperature,
        total_timer_time: data.total_timer_time,
        total_elapsed_time: data.total_elapsed_time,
        total_work: data.total_work,
        total_descent: data.total_descent,
        avg_vam: data.avg_vam,
        total_training_effect: data.total_training_effect,
        total_anaerobic_effect: data.total_anaerobic_effect,
        functional_threshold_power: data.functional_threshold_power,
        threshold_heart_rate: data.threshold_heart_rate,
        hr_calc_type: data.hr_calc_type,
        pwr_calc_type: data.pwr_calc_type,
        age: data.age,
        weight: data.weight,
        height: data.height,
        gender: data.gender,
        default_max_heart_rate: data.default_max_heart_rate,
        resting_heart_rate: data.resting_heart_rate,
        dist_setting: data.dist_setting,
        weight_setting: data.weight_setting,
        avg_fractional_cadence: data.avg_fractional_cadence,
        avg_left_pedal_smoothness: data.avg_left_pedal_smoothness,
        avg_left_torque_effectiveness: data.avg_left_torque_effectiveness,
        max_fractional_cadence: data.max_fractional_cadence,
        left_right_balance: data.left_right_balance,
        threshold_power: data.threshold_power,
        total_cycles: data.total_cycles,
        deviceInfo: data.device_info,
        
        // 🔧 ENHANCED: Complete metrics object for CompletedTab
        metrics: {
          // Existing fields
          avg_heart_rate: data.avg_heart_rate,
          max_heart_rate: data.max_heart_rate,
          avg_power: data.avg_power,
          max_power: data.max_power,
          normalized_power: data.normalized_power,
          avg_speed: data.avg_speed,
          max_speed: data.max_speed,
          avg_cadence: data.avg_cadence,
          max_cadence: data.max_cadence,
          elevation_gain: data.elevation_gain,
          elevation_loss: data.elevation_loss,
          calories: data.calories,
          training_stress_score: data.tss,
          intensity_factor: data.intensity_factor,
          
          // 🆕 NEW FIELDS in metrics object
          avg_temperature: data.avg_temperature,
          max_temperature: data.max_temperature,
          total_timer_time: data.total_timer_time,
          total_elapsed_time: data.total_elapsed_time,
          total_work: data.total_work,
          total_descent: data.total_descent,
          avg_vam: data.avg_vam,
          total_training_effect: data.total_training_effect,
          total_anaerobic_effect: data.total_anaerobic_effect,
          functional_threshold_power: data.functional_threshold_power,
          threshold_heart_rate: data.threshold_heart_rate,
          hr_calc_type: data.hr_calc_type,
          pwr_calc_type: data.pwr_calc_type,
          age: data.age,
          weight: data.weight,
          height: data.height,
          gender: data.gender,
          default_max_heart_rate: data.default_max_heart_rate,
          resting_heart_rate: data.resting_heart_rate,
          dist_setting: data.dist_setting,
          weight_setting: data.weight_setting,
          avg_fractional_cadence: data.avg_fractional_cadence,
          avg_left_pedal_smoothness: data.avg_left_pedal_smoothness,
          avg_left_torque_effectiveness: data.avg_left_torque_effectiveness,
          max_fractional_cadence: data.max_fractional_cadence,
          left_right_balance: data.left_right_balance,
          threshold_power: data.threshold_power,
          total_cycles: data.total_cycles,
        }
      };

      setWorkouts((prev) => [newWorkout, ...prev]);
      return newWorkout;
    } catch (err) {
      console.error("Error in addWorkout:", err);
      throw err;
    }
  };

  // Update - WITH user verification and ALL FIT metrics support
  const updateWorkout = async (id: string, updates: Partial<Workout>) => {
    try {
      const user = await getCurrentUser();
      if (!user) {
        throw new Error("User must be authenticated to update workouts");
      }

      console.log("Using user for update:", user.id);

      const updateObject: any = {};
      
      // Core fields
      if (updates.name !== undefined) updateObject.name = updates.name;
      if (updates.type !== undefined) updateObject.type = updates.type;
      if (updates.date !== undefined) updateObject.date = updates.date;
      if (updates.duration !== undefined) updateObject.duration = updates.duration;
      if (updates.description !== undefined) updateObject.description = updates.description;
      if (updates.userComments !== undefined) updateObject.usercomments = updates.userComments;
      if (updates.completedManually !== undefined) updateObject.completedmanually = updates.completedManually;
      if (updates.workout_status !== undefined) updateObject.workout_status = updates.workout_status;
      if (updates.intervals !== undefined) updateObject.intervals = JSON.stringify(updates.intervals);
      if (updates.strength_exercises !== undefined) updateObject.strength_exercises = JSON.stringify(updates.strength_exercises);
      
      // Existing FIT metrics
      if (updates.avg_heart_rate !== undefined) updateObject.avg_heart_rate = updates.avg_heart_rate;
      if (updates.max_heart_rate !== undefined) updateObject.max_heart_rate = updates.max_heart_rate;
      if (updates.avg_power !== undefined) updateObject.avg_power = updates.avg_power;
      if (updates.max_power !== undefined) updateObject.max_power = updates.max_power;
      if (updates.normalized_power !== undefined) updateObject.normalized_power = updates.normalized_power;
      if (updates.avg_speed !== undefined) updateObject.avg_speed = updates.avg_speed;
      if (updates.max_speed !== undefined) updateObject.max_speed = updates.max_speed;
      if (updates.avg_cadence !== undefined) updateObject.avg_cadence = updates.avg_cadence;
      if (updates.max_cadence !== undefined) updateObject.max_cadence = updates.max_cadence;
      if (updates.elevation_gain !== undefined) updateObject.elevation_gain = updates.elevation_gain;
      if (updates.elevation_loss !== undefined) updateObject.elevation_loss = updates.elevation_loss;
      if (updates.calories !== undefined) updateObject.calories = updates.calories;
      if (updates.tss !== undefined) updateObject.tss = updates.tss;
      if (updates.intensity_factor !== undefined) updateObject.intensity_factor = updates.intensity_factor;
      if (updates.distance !== undefined) updateObject.distance = updates.distance;
      
      // 🆕 NEW FIT FIELDS - Add ALL the new field updates
      if (updates.timestamp !== undefined) updateObject.timestamp = updates.timestamp;
      if (updates.start_position_lat !== undefined) updateObject.start_position_lat = updates.start_position_lat;
      if (updates.start_position_long !== undefined) updateObject.start_position_long = updates.start_position_long;
      if (updates.friendly_name !== undefined) updateObject.friendly_name = updates.friendly_name;
      if (updates.moving_time !== undefined) updateObject.moving_time = updates.moving_time;
      if (updates.elapsed_time !== undefined) updateObject.elapsed_time = updates.elapsed_time;
      if (updates.avg_temperature !== undefined) updateObject.avg_temperature = updates.avg_temperature;
      if (updates.max_temperature !== undefined) updateObject.max_temperature = updates.max_temperature;
      if (updates.total_timer_time !== undefined) updateObject.total_timer_time = updates.total_timer_time;
      if (updates.total_elapsed_time !== undefined) updateObject.total_elapsed_time = updates.total_elapsed_time;
      if (updates.total_work !== undefined) updateObject.total_work = updates.total_work;
      if (updates.total_descent !== undefined) updateObject.total_descent = updates.total_descent;
      if (updates.avg_vam !== undefined) updateObject.avg_vam = updates.avg_vam;
      if (updates.total_training_effect !== undefined) updateObject.total_training_effect = updates.total_training_effect;
      if (updates.total_anaerobic_effect !== undefined) updateObject.total_anaerobic_effect = updates.total_anaerobic_effect;
      if (updates.functional_threshold_power !== undefined) updateObject.functional_threshold_power = updates.functional_threshold_power;
      if (updates.threshold_heart_rate !== undefined) updateObject.threshold_heart_rate = updates.threshold_heart_rate;
      if (updates.hr_calc_type !== undefined) updateObject.hr_calc_type = updates.hr_calc_type;
      if (updates.pwr_calc_type !== undefined) updateObject.pwr_calc_type = updates.pwr_calc_type;
      if (updates.age !== undefined) updateObject.age = updates.age;
      if (updates.weight !== undefined) updateObject.weight = updates.weight;
      if (updates.height !== undefined) updateObject.height = updates.height;
      if (updates.gender !== undefined) updateObject.gender = updates.gender;
      if (updates.default_max_heart_rate !== undefined) updateObject.default_max_heart_rate = updates.default_max_heart_rate;
      if (updates.resting_heart_rate !== undefined) updateObject.resting_heart_rate = updates.resting_heart_rate;
      if (updates.dist_setting !== undefined) updateObject.dist_setting = updates.dist_setting;
      if (updates.weight_setting !== undefined) updateObject.weight_setting = updates.weight_setting;
      if (updates.avg_fractional_cadence !== undefined) updateObject.avg_fractional_cadence = updates.avg_fractional_cadence;
      if (updates.avg_left_pedal_smoothness !== undefined) updateObject.avg_left_pedal_smoothness = updates.avg_left_pedal_smoothness;
      if (updates.avg_left_torque_effectiveness !== undefined) updateObject.avg_left_torque_effectiveness = updates.avg_left_torque_effectiveness;
      if (updates.max_fractional_cadence !== undefined) updateObject.max_fractional_cadence = updates.max_fractional_cadence;
      if (updates.left_right_balance !== undefined) updateObject.left_right_balance = updates.left_right_balance;
      if (updates.threshold_power !== undefined) updateObject.threshold_power = updates.threshold_power;
      if (updates.total_cycles !== undefined) updateObject.total_cycles = updates.total_cycles;
      if (updates.deviceInfo !== undefined) updateObject.device_info = updates.deviceInfo;

      const { data, error } = await supabase
        .from("workouts")
        .update(updateObject)
        .eq("id", id)
        .eq("user_id", user.id)
        .select()
        .single();

      if (error) throw error;

      // Return updated workout with all fields (same mapping as in fetchWorkouts)
      const updated: Workout = {
        id: data.id,
        name: data.name,
        type: data.type,
        duration: data.duration,
        date: data.date,
        description: data.description,
        userComments: data.usercomments ?? "",
        completedManually: data.completedmanually ?? false,
        workout_status: data.workout_status ?? "planned",
        created_at: data.created_at,
        updated_at: data.updated_at,
        intervals: data.intervals ? JSON.parse(data.intervals) : [],
        strength_exercises: data.strength_exercises ? JSON.parse(data.strength_exercises) : [],
        
        // ALL FIT FIELDS (same as in fetchWorkouts)
        avg_heart_rate: data.avg_heart_rate,
        max_heart_rate: data.max_heart_rate,
        avg_power: data.avg_power,
        max_power: data.max_power,
        normalized_power: data.normalized_power,
        avg_speed: data.avg_speed,
        max_speed: data.max_speed,
        avg_cadence: data.avg_cadence,
        max_cadence: data.max_cadence,
        elevation_gain: data.elevation_gain,
        elevation_loss: data.elevation_loss,
        calories: data.calories,
        tss: data.tss,
        intensity_factor: data.intensity_factor,
        distance: data.distance,
        timestamp: data.timestamp,
        start_position_lat: data.start_position_lat,
        start_position_long: data.start_position_long,
        friendly_name: data.friendly_name,
        moving_time: data.moving_time,
        elapsed_time: data.elapsed_time,
        avg_temperature: data.avg_temperature,
        max_temperature: data.max_temperature,
        total_timer_time: data.total_timer_time,
        total_elapsed_time: data.total_elapsed_time,
        total_work: data.total_work,
        total_descent: data.total_descent,
        avg_vam: data.avg_vam,
        total_training_effect: data.total_training_effect,
        total_anaerobic_effect: data.total_anaerobic_effect,
        functional_threshold_power: data.functional_threshold_power,
        threshold_heart_rate: data.threshold_heart_rate,
        hr_calc_type: data.hr_calc_type,
        pwr_calc_type: data.pwr_calc_type,
        age: data.age,
        weight: data.weight,
        height: data.height,
        gender: data.gender,
        default_max_heart_rate: data.default_max_heart_rate,
        resting_heart_rate: data.resting_heart_rate,
        dist_setting: data.dist_setting,
        weight_setting: data.weight_setting,
        avg_fractional_cadence: data.avg_fractional_cadence,
        avg_left_pedal_smoothness: data.avg_left_pedal_smoothness,
        avg_left_torque_effectiveness: data.avg_left_torque_effectiveness,
        max_fractional_cadence: data.max_fractional_cadence,
        left_right_balance: data.left_right_balance,
        threshold_power: data.threshold_power,
        total_cycles: data.total_cycles,
        deviceInfo: data.device_info,
        
        // Complete metrics object
        metrics: {
          avg_heart_rate: data.avg_heart_rate,
          max_heart_rate: data.max_heart_rate,
          avg_power: data.avg_power,
          max_power: data.max_power,
          normalized_power: data.normalized_power,
          avg_speed: data.avg_speed,
          max_speed: data.max_speed,
          avg_cadence: data.avg_cadence,
          max_cadence: data.max_cadence,
          elevation_gain: data.elevation_gain,
          elevation_loss: data.elevation_loss,
          calories: data.calories,
          training_stress_score: data.tss,
          intensity_factor: data.intensity_factor,
          avg_temperature: data.avg_temperature,
          max_temperature: data.max_temperature,
          total_timer_time: data.total_timer_time,
          total_elapsed_time: data.total_elapsed_time,
          total_work: data.total_work,
          total_descent: data.total_descent,
          avg_vam: data.avg_vam,
          total_training_effect: data.total_training_effect,
          total_anaerobic_effect: data.total_anaerobic_effect,
          functional_threshold_power: data.functional_threshold_power,
          threshold_heart_rate: data.threshold_heart_rate,
          hr_calc_type: data.hr_calc_type,
          pwr_calc_type: data.pwr_calc_type,
          age: data.age,
          weight: data.weight,
          height: data.height,
          gender: data.gender,
          default_max_heart_rate: data.default_max_heart_rate,
          resting_heart_rate: data.resting_heart_rate,
          dist_setting: data.dist_setting,
          weight_setting: data.weight_setting,
          avg_fractional_cadence: data.avg_fractional_cadence,
          avg_left_pedal_smoothness: data.avg_left_pedal_smoothness,
          avg_left_torque_effectiveness: data.avg_left_torque_effectiveness,
          max_fractional_cadence: data.max_fractional_cadence,
          left_right_balance: data.left_right_balance,
          threshold_power: data.threshold_power,
          total_cycles: data.total_cycles,
        }
      };

      setWorkouts((prev) => prev.map((w) => (w.id === id ? updated : w)));
      return updated;
    } catch (err) {
      console.error("Error in updateWorkout:", err);
      throw err;
    }
  };

  // Delete - WITH user verification
  const deleteWorkout = async (id: string) => {
    try {
      const user = await getCurrentUser();
      if (!user) {
        throw new Error("User must be authenticated to delete workouts");
      }

      console.log("Using user for delete:", user.id);

      const { error } = await supabase
        .from("workouts")
        .delete()
        .eq("id", id)
        .eq("user_id", user.id);

      if (error) throw error;
      setWorkouts((prev) => prev.filter((w) => w.id !== id));
    } catch (err) {
      console.error("Error in deleteWorkout:", err);
      throw err;
    }
  };

  const getWorkoutsForDate = (date: string) => workouts.filter((w) => w.date === date);
  const getWorkoutsByType = (type: Workout["type"]) => workouts.filter((w) => w.type === type);

  useEffect(() => {
    fetchWorkouts();
  }, []);

  return {
    workouts,
    loading,
    addWorkout,
    updateWorkout,
    deleteWorkout,
    getWorkoutsForDate,
    getWorkoutsByType,
    refetch: fetchWorkouts,
  };
};

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/lib/supabase.ts
import { createClient } from '@supabase/supabase-js';


// Initialize Supabase client
// Using direct values from project configuration
const supabaseUrl = 'https://yyriamwvtvzlkumqrvpm.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inl5cmlhbXd2dHZ6bGt1bXFydnBtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA2OTIxNTgsImV4cCI6MjA2NjI2ODE1OH0.yltCi8CzSejByblpVC9aMzFhi3EOvRacRf6NR0cFJNY';
const supabase = createClient(supabaseUrl, supabaseKey);


export { supabase };

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/lib/utils.ts
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/main.tsx

import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

// Remove dark mode class addition
createRoot(document.getElementById("root")!).render(<App />);


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/pages/Index.tsx
import React from 'react';
import AuthWrapper from '@/components/AuthWrapper';
import { AppProvider } from '@/contexts/AppContext';

const Index: React.FC = () => {
  return (
    <AppProvider>
      <AuthWrapper />
    </AppProvider>
  );
};

export default Index;

// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/pages/NotFound.tsx
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error(
      "404 Error: User attempted to access non-existent route:",
      location.pathname
    );
  }, [location.pathname]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-background">
      <div className="text-center p-8 rounded-lg border border-border bg-card shadow-md animate-slide-in">
        <h1 className="text-5xl font-bold mb-6 text-primary">404</h1>
        <p className="text-xl text-card-foreground mb-6">Page not found</p>
        <a href="/" className="text-primary hover:text-primary/80 underline transition-colors">
          Return to Home
        </a>
      </div>
    </div>
  );
};

export default NotFound;


// File: /Users/michaelambp/Efforts_Local_Folder/Efforts_Local/src/pages/Privacy.tsx
import React from 'react';
import { ArrowLeft } from 'lucide-react';
import { Button } from '@/components/ui/button';

interface PrivacyProps {
  onBack?: () => void;
}

export default function Privacy({ onBack }: PrivacyProps) {
  return (
    <div className="min-h-screen p-4 max-w-4xl mx-auto">
      {/* Header with back button */}
      {onBack && (
        <div className="mb-6">
          <Button 
            onClick={onBack}
            className="flex items-center gap-2 px-4 py-2 text-black hover:text-blue-600"
          >
            <ArrowLeft className="w-4 h-4" />
            Back
          </Button>
        </div>
      )}

      {/* Privacy Policy Content */}
      <div className="space-y-6">
        <h1 className="text-3xl font-bold text-black">Privacy Policy</h1>
        
        <div className="space-y-4">
          <p className="text-gray-700">
            <strong>Efforts Work</strong> (referred to as "Efforts", "we", or "us") respects your privacy. 
            This policy describes how we collect, use, and protect your information when you use our services.
          </p>

          <div className="space-y-3">
            <h2 className="text-xl font-semibold text-black">Information We Collect</h2>
            <ul className="space-y-2 ml-4">
              <li className="text-gray-700">• User account details (such as name and email address)</li>
              <li className="text-gray-700">• Workout, activity, and health-related data you choose to log</li>
              <li className="text-gray-700">• Device data (when authorized)</li>
            </ul>
          </div>

          <div className="space-y-3">
            <h2 className="text-xl font-semibold text-black">How We Use Information</h2>
            <ul className="space-y-2 ml-4">
              <li className="text-gray-700">• To provide and improve the Efforts platform</li>
              <li className="text-gray-700">• To allow you to track and manage your training</li>
              <li className="text-gray-700">• We do not sell or share your data with third parties</li>
            </ul>
          </div>

          <div className="space-y-3">
            <h2 className="text-xl font-semibold text-black">Data Retention and Deletion</h2>
            <ul className="space-y-2 ml-4">
              <li className="text-gray-700">• Users can delete their accounts and all associated data at any time</li>
              <li className="text-gray-700">• Cached activity data is stored for up to 30 days for offline functionality</li>
              <li className="text-gray-700">• All data is permanently deleted upon user account deletion</li>
            </ul>
          </div>

          <div className="space-y-3">
            <h2 className="text-xl font-semibold text-black">Your Rights</h2>
            <p className="text-gray-700 ml-4">
              • You can request data export or deletion by contacting us at{' '}
              <a 
                href="mailto:michaelangelos@gmail.com" 
                className="text-blue-600 hover:text-blue-700 underline"
              >
                michaelangelos@gmail.com
              </a>
            </p>
          </div>

          <div className="space-y-3">
            <h2 className="text-xl font-semibold text-black">Changes</h2>
            <p className="text-gray-700">
              We may update this policy. You will be notified of significant changes through the app or our website.
            </p>
          </div>

          <div className="space-y-3">
            <h2 className="text-xl font-semibold text-black">Contact</h2>
            <p className="text-gray-700">
              If you have questions, please email{' '}
              <a 
                href="mailto:michaelangelos@gmail.com" 
                className="text-blue-600 hover:text-blue-700 underline"
              >
                michaelangelos@gmail.com
              </a>.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}


