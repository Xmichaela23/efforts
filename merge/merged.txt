// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/App.css
/* 🚨 FIXED: Remove problematic global container styles */
#root {
  /* Removed: max-width, margin, padding that broke mobile centering */
  /* Let AppLayout handle responsive container sizing instead */
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}

.logo:hover {
  filter: drop-shadow(0 0 2em rgba(20, 184, 166, 0.6));
}

.logo.react:hover {
  filter: drop-shadow(0 0 2em rgba(20, 184, 166, 0.6));
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
  border-radius: 0.5rem;
  border: 1px solid rgba(20, 184, 166, 0.1);
  background-color: rgba(20, 184, 166, 0.02);
  transition: all 0.3s ease;
}

.card:hover {
  border-color: rgba(20, 184, 166, 0.3);
  box-shadow: 0 4px 12px rgba(20, 184, 166, 0.1);
}

.read-the-docs {
  color: #5f7676;
}

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/App.tsx

import './index.css'
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { ThemeProvider } from "@/components/theme-provider";
import Index from "./pages/Index";
import NotFound from "./pages/NotFound";

const queryClient = new QueryClient();

const App = () => (
  <ThemeProvider defaultTheme="light">
    <QueryClientProvider client={queryClient}>
      <TooltipProvider>
        <Toaster />
        <Sonner />
        <BrowserRouter>
          <Routes>
            <Route path="/" element={<Index />} />
            <Route path="*" element={<NotFound />} />
          </Routes>
        </BrowserRouter>
      </TooltipProvider>
    </QueryClientProvider>
  </ThemeProvider>
);

export default App;


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/AllEffortsDropdown.tsx
import React from 'react';
import { useAppContext } from '@/contexts/AppContext';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { ChevronDown, Activity, Bike, Waves, Dumbbell, Move } from 'lucide-react';

interface AllEffortsDropdownProps {
  onSelectWorkout: (workout: any) => void;
}

const AllEffortsDropdown: React.FC<AllEffortsDropdownProps> = ({ onSelectWorkout }) => {
  const { workouts } = useAppContext();

  const completedWorkouts = workouts.filter(workout =>
    workout.workout_status === 'completed' || workout.completedManually
  );

  const getIcon = (type: string) => {
    switch (type) {
      case 'swim': return <Waves className="h-5 w-5 mr-3" />;
      case 'ride': return <Bike className="h-5 w-5 mr-3" />;
      case 'run': return <Activity className="h-5 w-5 mr-3" />;
      case 'strength': return <Dumbbell className="h-5 w-5 mr-3" />;
      case 'mobility': return <Move className="h-5 w-5 mr-3" />;
      default: return <Activity className="h-5 w-5 mr-3" />;
    }
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          className="flex items-center gap-2 bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 hover:text-gray-900 hover:border-gray-400 transition-all duration-200 shadow-sm hover:shadow-md"
          style={{
            fontFamily: 'Inter, sans-serif',
            fontWeight: 600,
            padding: '14px 12px',
            borderRadius: '8px',
            fontSize: '15px',
            minHeight: '48px',
            flex: 1,
            maxWidth: '140px'
          }}
        >
          Completed ({completedWorkouts.length})
          <ChevronDown className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent
        align="start"
        className="max-h-80 overflow-y-auto bg-white border border-gray-200 shadow-xl"
        style={{borderRadius: '12px', padding: '8px', minWidth: '280px'}}
      >
        {completedWorkouts.length === 0 ? (
          <div className="px-4 py-6 text-sm text-gray-500 text-center">
            No completed efforts yet
          </div>
        ) : (
          completedWorkouts.map((workout) => (
            <DropdownMenuItem
              key={workout.id}
              onClick={() => onSelectWorkout(workout)}
              className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg flex items-start gap-3 cursor-pointer"
              style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '56px'}}
            >
              {getIcon(workout.type)}
              <div className="flex-1 min-w-0">
                <div className="font-semibold text-sm truncate text-gray-900">
                  {workout.name || `${workout.type.charAt(0).toUpperCase() + workout.type.slice(1)}`}
                </div>
                <div className="text-xs text-gray-500 mt-1">
                  {workout.date ? new Date(workout.date + 'T00:00:00').toLocaleDateString('en-US', {
                    month: 'short',
                    day: 'numeric'
                  }) : 'No date'}
                  {workout.duration && ` • ${Math.floor(workout.duration / 60)}:${(workout.duration % 60).toString().padStart(2, '0')}`}
                </div>
              </div>
            </DropdownMenuItem>
          ))
        )}
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default AllEffortsDropdown;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/AppLayout.tsx
import React, { useState } from 'react';
import { useAppContext } from '@/contexts/AppContext';
import { Button } from '@/components/ui/button';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { Menu, User, Upload, Settings } from 'lucide-react';
import WorkoutBuilder from './WorkoutBuilder';
import WorkoutCalendar from './WorkoutCalendar';
import WorkoutDetail from './WorkoutDetail';
import GarminAutoSync from './GarminAutoSync';
import TodaysEffort from './TodaysEffort';
import StrengthLogger from './StrengthLogger';

const AppLayout: React.FC = () => {
  const { workouts, loading, useImperial, toggleUnits } = useAppContext();
  const [showBuilder, setShowBuilder] = useState(false);
  const [showStrengthLogger, setShowStrengthLogger] = useState(false);
  const [builderType, setBuilderType] = useState<string>('');
  const [selectedWorkout, setSelectedWorkout] = useState<any>(null);
  const [activeTab, setActiveTab] = useState<string>('planned');

  // Track workout being edited in builder
  const [workoutBeingEdited, setWorkoutBeingEdited] = useState<any>(null);

  // Track selected date for calendar interactions
  const [selectedDate, setSelectedDate] = useState<string>(new Date().toLocaleDateString('en-CA'));

  const handleWorkoutSelect = (workout: any) => {
    console.log('❌ WRONG: handleWorkoutSelect called - going to detail view');
    setSelectedWorkout(workout);
  };

  const handleUpdateWorkout = async (workoutId: string, updates: any) => {
    console.log('Updating workout:', workoutId, updates);
  };

  const handleBackToDashboard = () => {
    // Check if we have unsaved exercises in StrengthLogger
    if (showStrengthLogger) {
      if (confirm('Leave without saving? All progress will be lost.')) {
        setShowStrengthLogger(false);
      }
      return;
    }

    // Regular builder close
    setShowBuilder(false);
    setBuilderType('');
    setSelectedWorkout(null);
    setWorkoutBeingEdited(null);
  };

  const handleAddEffort = (type: string, date?: string) => {
    setBuilderType(type);
    setWorkoutBeingEdited(null);
    
    if (date) {
      setSelectedDate(date);
    }
    
    // 🚨 FIXED: Handle both 'strength_logger' and 'log-strength'
    if (type === 'strength_logger' || type === 'log-strength') {
      setShowStrengthLogger(true);
    } else {
      setShowBuilder(true);
    }
  };

  const handleSelectEffortType = (type: string) => {
    setBuilderType(type);
    setWorkoutBeingEdited(null);
    
    // 🚨 FIXED: Handle both 'strength_logger' and 'log-strength'
    if (type === 'strength_logger' || type === 'log-strength') {
      setShowStrengthLogger(true);
    } else {
      setShowBuilder(true);
    }
  };

  const handleEditEffort = (workout: any) => {
    setWorkoutBeingEdited(workout);
    setBuilderType(workout.type);
    setShowBuilder(true);
  };

  const handleDateSelect = (date: string) => {
    setSelectedDate(date);
  };

  const handleViewCompleted = () => {
    console.log('View completed workouts');
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-lg">Loading...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Header with navigation */}
      <header className="border-b border-border/40 bg-card/30 backdrop-blur-sm sticky top-0 z-40">
        {/* 🚨 FIXED: Mobile centering container */}
        <div className="w-full max-w-sm mx-auto px-4 sm:max-w-md md:max-w-4xl md:px-6">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-4">
              <h1 className="text-2xl font-bold text-primary">Efforts</h1>
              
              {/* 🚨 ADDED: Missing Dashboard button */}
              {(selectedWorkout || showStrengthLogger || showBuilder) && (
                <Button
                  onClick={handleBackToDashboard}
                  variant="ghost"
                  className="text-sm font-medium hover:bg-gray-50"
                  style={{fontFamily: 'Inter, sans-serif'}}
                >
                  Dashboard
                </Button>
              )}
            </div>

            <div className="flex items-center space-x-3">
              <Button
                variant="ghost"
                size="sm"
                onClick={toggleUnits}
                className="text-xs"
              >
                {useImperial ? 'Imperial' : 'Metric'}
              </Button>

              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="icon">
                    <Menu className="h-5 w-5" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-56">
                  <DropdownMenuItem>
                    <User className="mr-2 h-4 w-4" />
                    Profile
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <Settings className="mr-2 h-4 w-4" />
                    Connect Devices
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <Upload className="mr-2 h-4 w-4" />
                    Import
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <Upload className="mr-2 h-4 w-4" />
                    Export Data
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    Help & Support
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    Sign Out
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </div>
      </header>

      {/* Main content */}
      <main className="flex-1">
        {/* 🚨 FIXED: Mobile centering container */}
        <div className="w-full max-w-sm mx-auto px-4 sm:max-w-md md:max-w-4xl md:px-6">
          {showStrengthLogger ? (
            <StrengthLogger onClose={handleBackToDashboard} />
          ) : showBuilder ? (
            <WorkoutBuilder
              onClose={handleBackToDashboard}
              initialType={builderType}
              existingWorkout={workoutBeingEdited}
              initialDate={selectedDate}
            />
          ) : selectedWorkout ? (
            <WorkoutDetail
              workout={selectedWorkout}
              onUpdateWorkout={handleUpdateWorkout}
              activeTab={activeTab}
              onTabChange={setActiveTab}
            />
          ) : (
            <div className="space-y-1">
              <TodaysEffort
                selectedDate={selectedDate}
                onAddEffort={handleAddEffort}
                onViewCompleted={handleViewCompleted}
                onEditEffort={handleEditEffort}
              />
              <WorkoutCalendar
                onAddEffort={handleAddEffort}
                onSelectType={handleSelectEffortType}
                onSelectWorkout={handleWorkoutSelect}
                onViewCompleted={handleViewCompleted}
                onEditEffort={handleEditEffort}
                onDateSelect={handleDateSelect}
              />
            </div>
          )}
        </div>
      </main>
    </div>
  );
};

export default AppLayout;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/BannerUpload.tsx
import React, { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Upload, X } from 'lucide-react';

interface BannerUploadProps {
  onBannerChange?: (imageUrl: string | null) => void;
}

export const BannerUpload: React.FC<BannerUploadProps> = ({ onBannerChange }) => {
  const [bannerImage, setBannerImage] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file && file.type.startsWith('image/')) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const imageUrl = e.target?.result as string;
        setBannerImage(imageUrl);
        onBannerChange?.(imageUrl);
      };
      reader.readAsDataURL(file);
    }
  };

  const removeBanner = () => {
    setBannerImage(null);
    onBannerChange?.(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <Card className="w-full mb-6">
      <CardContent className="p-4">
        {bannerImage ? (
          <div className="relative">
            <img 
              src={bannerImage} 
              alt="Banner" 
              className="w-full h-32 object-cover rounded-lg"
            />
            <Button
              variant="destructive"
              size="sm"
              className="absolute top-2 right-2"
              onClick={removeBanner}
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        ) : (
          <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
            <Upload className="mx-auto h-12 w-12 text-gray-400 mb-4" />
            <p className="text-gray-600 mb-4">Upload a PNG file to create a banner</p>
            <Button onClick={() => fileInputRef.current?.click()}>
              Choose File
            </Button>
          </div>
        )}
        <input
          ref={fileInputRef}
          type="file"
          accept="image/png,image/jpeg,image/jpg,image/gif"
          onChange={handleFileSelect}
          className="hidden"
        />
      </CardContent>
    </Card>
  );
};

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/CalendarHeader.tsx
import React from 'react';
import NewEffortDropdown from './NewEffortDropdown';
import LogEffortDropdown from './LogEffortDropdown';
import RoutinesDropdown from './RoutinesDropdown';
import AllEffortsDropdown from './AllEffortsDropdown';

interface CalendarHeaderProps {
  viewMode: 'month' | 'week';
  onViewModeChange: (mode: 'month' | 'week') => void;
  onAddEffort: () => void;
  onSelectType: (type: string) => void;
  onSelectWorkout: (workout: any) => void;
  onViewCompleted: () => void;
  onEditEffort: (workout: any) => void;
  onSelectRoutine?: (type: string) => void;
}

const CalendarHeader: React.FC<CalendarHeaderProps> = ({
  viewMode,
  onViewModeChange,
  onAddEffort,
  onSelectType,
  onSelectWorkout,
  onViewCompleted,
  onEditEffort,
  onSelectRoutine
}) => {
  console.log('🔧 CalendarHeader received onEditEffort:', !!onEditEffort);

  return (
    <div className="w-full flex justify-start items-center mb-6 md:mb-8 gap-1 flex-nowrap -ml-4">
      {/* 🚨 MORE LEFT: Bigger negative margin to shift further left */}
      <NewEffortDropdown onSelectType={onSelectType} />
      <LogEffortDropdown onSelectType={onSelectType} />
      <RoutinesDropdown onSelectRoutine={onSelectRoutine} />
      <AllEffortsDropdown onSelectWorkout={onSelectWorkout} />
    </div>
  );
};

export default CalendarHeader;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/CompletedTab.tsx
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { useAppContext } from '@/contexts/AppContext';

interface CompletedTabProps {
  workoutType: 'cycling' | 'running';
  workoutData: any;
}

const CompletedTab: React.FC<CompletedTabProps> = ({ workoutType, workoutData }) => {
  const { useImperial } = useAppContext();
  const [selectedMetric, setSelectedMetric] = useState('hr');
  const [hoverPoint, setHoverPoint] = useState<{x: number, y: number, values: any} | null>(null);

  const metrics = workoutType === 'cycling' 
    ? ['hr', 'power', 'speed', 'cadence']
    : ['hr', 'pace', 'speed', 'cadence'];

  const metricColors = {
    hr: '#EF4444',
    power: '#F59E0B', 
    speed: '#3B82F6',
    cadence: '#8B5CF6',
    pace: '#8B5CF6'
  };

  // Convert units based on imperial/metric preference
  const convertDistance = (km: number) => {
    return useImperial ? (km * 0.621371).toFixed(1) + ' mi' : km.toFixed(1) + ' km';
  };

  const convertSpeed = (kmh: number) => {
    return useImperial ? (kmh * 0.621371).toFixed(1) + ' mph' : kmh.toFixed(1) + ' km/h';
  };

  const convertElevation = (m: number) => {
    return useImperial ? Math.round(m * 3.28084) + ' ft' : m + ' m';
  };

  const convertPace = (minPerKm: string) => {
    if (!useImperial) return minPerKm + ' /km';
    const [min, sec] = minPerKm.split(':').map(Number);
    const totalSeconds = (min * 60 + sec) * 1.609344;
    const newMin = Math.floor(totalSeconds / 60);
    const newSec = Math.round(totalSeconds % 60);
    return `${newMin}:${newSec.toString().padStart(2, '0')} /mi`;
  };

  const summaryData = workoutType === 'cycling' ? {
    distance: convertDistance(45.2),
    duration: '1:23:45',
    speed: convertSpeed(32.4),
    power: '245 W',
    tss: '142 TSS',
    elevation: convertElevation(892)
  } : {
    distance: convertDistance(10.5),
    duration: '42:18',
    pace: convertPace('4:02'),
    hr: '165 bpm',
    elevation: convertElevation(156),
    cadence: '180 spm'
  };

  const summaryLabels = workoutType === 'cycling' ? {
    distance: 'Distance',
    duration: 'Duration',
    speed: 'Avg Speed',
    power: 'Avg Power',
    tss: 'TSS',
    elevation: 'Elevation Gain'
  } : {
    distance: 'Distance',
    duration: 'Duration',
    pace: 'Avg Pace',
    hr: 'Avg HR',
    elevation: 'Elevation Gain',
    cadence: 'Avg Cadence'
  };

  const handleMouseMove = (e: React.MouseEvent<SVGElement>) => {
    const rect = e.currentTarget.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    const distance = x / rect.width * (workoutType === 'cycling' ? 45.2 : 10.5);
    const elevation = Math.round(300 - (y - 50) * 0.5);
    
    const values = {
      distance: convertDistance(distance),
      elevation: convertElevation(elevation),
      [selectedMetric]: selectedMetric === 'hr' ? '165 bpm' : 
                      selectedMetric === 'power' ? '245 W' :
                      selectedMetric === 'speed' ? convertSpeed(32) :
                      selectedMetric === 'pace' ? convertPace('4:02') : '90 rpm'
    };
    
    setHoverPoint({ x, y, values });
  };

  // Generate elevation profile data points
  const generateElevationPath = () => {
    const points = [];
    const width = 800;
    const height = 300;
    for (let i = 0; i <= width; i += 20) {
      const elevation = 250 + Math.sin(i * 0.01) * 30 + Math.cos(i * 0.005) * 20;
      points.push(`${i},${elevation}`);
    }
    return `M0,300 L${points.join(' L')} L${width},350 L0,350 Z`;
  };

  const generateMetricPath = () => {
    const points = [];
    const width = 800;
    for (let i = 0; i <= width; i += 20) {
      let value;
      switch(selectedMetric) {
        case 'hr':
          value = 150 + Math.sin(i * 0.008) * 25;
          break;
        case 'power':
          value = 180 + Math.sin(i * 0.006) * 40;
          break;
        case 'speed':
          value = 200 + Math.cos(i * 0.007) * 30;
          break;
        case 'pace':
          value = 190 + Math.sin(i * 0.009) * 35;
          break;
        default:
          value = 170 + Math.cos(i * 0.005) * 25;
      }
      points.push(`${i},${value}`);
    }
    return `M${points.join(' L')}`;
  };

  return (
    <div className="space-y-8" style={{fontFamily: 'Inter, sans-serif'}}>
      {/* Summary Cards */}
      <div className="grid grid-cols-6 gap-px bg-[#E5E5E5]">
        {Object.entries(summaryData).map(([key, value]) => (
          <div key={key} className="bg-white p-6">
            <div className="text-2xl font-semibold text-black mb-1" style={{fontFeatureSettings: '"tnum"'}}>
              {value}
            </div>
            <div className="text-sm text-[#666666] font-normal">
              {summaryLabels[key as keyof typeof summaryLabels]}
            </div>
          </div>
        ))}
      </div>

      {/* Metric Toggle Buttons */}
      <div className="flex gap-2">
        {metrics.map((metric) => (
          <Button
            key={metric}
            onClick={() => setSelectedMetric(metric)}
            className={`px-6 py-3 text-sm font-medium uppercase tracking-wide ${
              selectedMetric === metric
                ? 'bg-black text-white'
                : 'bg-white text-[#666666] border border-[#E5E5E5] hover:bg-[#F5F5F5]'
            }`}
          >
            {metric}
          </Button>
        ))}
      </div>

      {/* Chart Area */}
      <div className="bg-white border border-[#E5E5E5] h-96 relative">
        <svg 
          width="100%" 
          height="100%" 
          className="absolute inset-0"
          viewBox="0 0 800 400"
          onMouseMove={handleMouseMove}
          onMouseLeave={() => setHoverPoint(null)}
        >
          {/* Elevation Profile */}
          <path
            d={generateElevationPath()}
            fill="#F5F5F5"
            stroke="none"
          />
          
          {/* Metric Overlay Line */}
          <path
            d={generateMetricPath()}
            fill="none"
            stroke={metricColors[selectedMetric as keyof typeof metricColors]}
            strokeWidth="2"
          />
          
          {/* Hover Line */}
          {hoverPoint && (
            <line
              x1={hoverPoint.x}
              y1={50}
              x2={hoverPoint.x}
              y2={350}
              stroke="#000"
              strokeWidth="1"
              strokeDasharray="2,2"
            />
          )}
        </svg>
        
        {/* Tooltip */}
        {hoverPoint && (
          <div 
            className="absolute bg-white border border-[#E5E5E5] p-3 text-sm pointer-events-none z-10"
            style={{
              left: Math.min(hoverPoint.x + 10, 700),
              top: Math.max(hoverPoint.y - 60, 10),
              fontFamily: 'Inter, sans-serif'
            }}
          >
            {Object.entries(hoverPoint.values).map(([key, value]) => (
              <div key={key} className="flex justify-between gap-4">
                <span className="text-[#666666] capitalize">{key}:</span>
                <span className="text-black font-medium">{value}</span>
              </div>
            ))}
          </div>
        )}
        
        {/* Axis Labels */}
        <div className="absolute bottom-2 left-4 text-xs text-[#666666]">
          0 {useImperial ? 'mi' : 'km'}
        </div>
        <div className="absolute bottom-2 right-4 text-xs text-[#666666]">
          {workoutType === 'cycling' ? convertDistance(45.2) : convertDistance(10.5)}
        </div>
      </div>
    </div>
  );
};

export default CompletedTab;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/CycleIntervalBuilder.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Plus, Copy, Trash2, GripVertical } from 'lucide-react';

export interface CycleInterval {
  id: string;
  targetWatts?: number;
  targetFTP?: number;
  targetCadence?: number;
  duration: string;
  recoveryWatts?: number;
  recoveryTime: string;
  repeatCount: number;
}

interface CycleIntervalBuilderProps {
  intervals: CycleInterval[];
  onChange: (intervals: CycleInterval[]) => void;
  isMetric: boolean;
}

export default function CycleIntervalBuilder({ intervals, onChange, isMetric }: CycleIntervalBuilderProps) {
  const addInterval = () => {
    const newInterval: CycleInterval = {
      id: Date.now().toString(),
      duration: '',
      recoveryTime: '',
      repeatCount: 1
    };
    onChange([...intervals, newInterval]);
  };

  const updateInterval = (id: string, updates: Partial<CycleInterval>) => {
    onChange(intervals.map(interval => 
      interval.id === id ? { ...interval, ...updates } : interval
    ));
  };

  const duplicateInterval = (id: string) => {
    const interval = intervals.find(i => i.id === id);
    if (interval) {
      const duplicate = { ...interval, id: Date.now().toString() };
      onChange([...intervals, duplicate]);
    }
  };

  const deleteInterval = (id: string) => {
    onChange(intervals.filter(interval => interval.id !== id));
  };

  const formatTime = (timeStr: string): string => {
    if (!timeStr || !timeStr.includes(':')) return timeStr;
    const [min, sec] = timeStr.split(':');
    const totalSec = parseInt(min) * 60 + parseInt(sec);
    return `${Math.floor(totalSec/60)} min`;
  };

  const generatePreview = (interval: CycleInterval) => {
    const target = interval.targetFTP ? `@ ${interval.targetFTP}% FTP` : 
                  interval.targetWatts ? `@ ${interval.targetWatts}W` : '';
    const cadence = interval.targetCadence ? ` @ ${interval.targetCadence} rpm` : '';
    const recovery = interval.recoveryWatts ? `@ ${interval.recoveryWatts}W` : '@ 50% FTP';
    
    const workTime = formatTime(interval.duration) || interval.duration;
    const recTime = formatTime(interval.recoveryTime) || interval.recoveryTime;
    
    return `${interval.repeatCount} x (${workTime} ${target}${cadence} w/ ${recTime} ${recovery} recovery)`;
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          Cycling Intervals
          <Button onClick={addInterval} size="sm">
            <Plus className="h-4 w-4 mr-2" />
            Add Interval
          </Button>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {intervals.map((interval, index) => (
          <Card key={interval.id} className="p-4">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-2">
                <GripVertical className="h-4 w-4 text-muted-foreground" />
                <h4 className="font-medium">Interval {index + 1}</h4>
              </div>
              <div className="flex gap-2">
                <Button onClick={() => duplicateInterval(interval.id)} size="sm" variant="outline">
                  <Copy className="h-4 w-4" />
                </Button>
                <Button onClick={() => deleteInterval(interval.id)} size="sm" variant="outline">
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </div>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
              <div>
                <Label>Target Watts</Label>
                <Input
                  type="number"
                  placeholder="250"
                  value={interval.targetWatts || ''}
                  onChange={(e) => updateInterval(interval.id, { targetWatts: parseInt(e.target.value) || undefined })}
                />
              </div>
              <div>
                <Label>Target % FTP</Label>
                <Input
                  type="number"
                  placeholder="90"
                  value={interval.targetFTP || ''}
                  onChange={(e) => updateInterval(interval.id, { targetFTP: parseInt(e.target.value) || undefined })}
                />
              </div>
              <div>
                <Label>Target Cadence</Label>
                <Input
                  type="number"
                  placeholder="85"
                  value={interval.targetCadence || ''}
                  onChange={(e) => updateInterval(interval.id, { targetCadence: parseInt(e.target.value) || undefined })}
                />
              </div>
              <div>
                <Label>Repeat Count</Label>
                <Input
                  type="number"
                  min="1"
                  value={interval.repeatCount}
                  onChange={(e) => updateInterval(interval.id, { repeatCount: parseInt(e.target.value) || 1 })}
                />
              </div>
            </div>
            
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-4">
              <div>
                <Label>Duration (mm:ss)</Label>
                <Input
                  placeholder="5:00"
                  value={interval.duration}
                  onChange={(e) => updateInterval(interval.id, { duration: e.target.value })}
                />
              </div>
              <div>
                <Label>Recovery Time (mm:ss)</Label>
                <Input
                  placeholder="2:00"
                  value={interval.recoveryTime}
                  onChange={(e) => updateInterval(interval.id, { recoveryTime: e.target.value })}
                />
              </div>
              <div>
                <Label>Recovery Watts</Label>
                <Input
                  type="number"
                  placeholder="125"
                  value={interval.recoveryWatts || ''}
                  onChange={(e) => updateInterval(interval.id, { recoveryWatts: parseInt(e.target.value) || undefined })}
                />
              </div>
            </div>
            
            <div className="bg-muted p-3 rounded text-sm">
              <strong>Preview:</strong> {generatePreview(interval)}
            </div>
          </Card>
        ))}
        
        {intervals.length === 0 && (
          <div className="text-center py-8 text-muted-foreground">
            No intervals added yet. Click "Add Interval" to get started.
          </div>
        )}
      </CardContent>
    </Card>
  );
}

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/FilteredWorkoutList.tsx
import React, { useState, useMemo } from 'react';
import { useAppContext } from '@/contexts/AppContext';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Activity, Dumbbell, Waves, Trash2, Bike } from 'lucide-react';
import WorkoutTypeFilter from './WorkoutTypeFilter';

interface FilteredWorkoutListProps {
  onWorkoutSelect?: (workout: any) => void;
}

const FilteredWorkoutList: React.FC<FilteredWorkoutListProps> = ({ onWorkoutSelect }) => {
  const { workouts, deleteWorkout } = useAppContext();
  const [selectedType, setSelectedType] = useState<'all' | 'run' | 'ride' | 'strength' | 'swim'>('all');

  const filteredWorkouts = useMemo(() => {
    if (selectedType === 'all') return workouts;
    return workouts.filter(workout => workout.type === selectedType);
  }, [workouts, selectedType]);

  const workoutCounts = useMemo(() => {
    return {
      all: workouts.length,
      run: workouts.filter(w => w.type === 'run').length,
      ride: workouts.filter(w => w.type === 'ride').length,
      strength: workouts.filter(w => w.type === 'strength').length,
      swim: workouts.filter(w => w.type === 'swim').length
    };
  }, [workouts]);

  const handleDelete = async (id: string, e: React.MouseEvent) => {
    e.stopPropagation();
    if (confirm('Are you sure you want to delete this workout?')) {
      await deleteWorkout(id);
    }
  };

  const getWorkoutIcon = (type: string) => {
    switch (type) {
      case 'run':
        return <Activity className="h-5 w-5 text-blue-500" />;
      case 'ride':
        return <Bike className="h-5 w-5 text-orange-500" />;
      case 'strength':
        return <Dumbbell className="h-5 w-5 text-green-500" />;
      case 'swim':
        return <Waves className="h-5 w-5 text-cyan-500" />;
      default:
        return <Activity className="h-5 w-5 text-gray-500" />;
    }
  };

  const getTypeDisplayName = (type: string) => {
    switch (type) {
      case 'run':
        return 'Running Sessions';
      case 'ride':
        return 'Cycling Sessions';
      case 'strength':
        return 'Strength Training Sessions';
      case 'swim':
        return 'Swimming Sessions';
      default:
        return 'All Training Sessions';
    }
  };

  return (
    <div className="space-y-6">
      <WorkoutTypeFilter
        selectedType={selectedType}
        onTypeChange={setSelectedType}
        workoutCounts={workoutCounts}
      />
      
      {filteredWorkouts.length === 0 ? (
        <Card>
          <CardContent className="pt-6 text-center text-muted-foreground">
            {selectedType === 'all' ? (
              <p>No workouts yet. Create your first workout!</p>
            ) : (
              <p>No {selectedType} workouts found. Try a different training type.</p>
            )}
          </CardContent>
        </Card>
      ) : (
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold">
              {getTypeDisplayName(selectedType)}
            </h3>
            <Badge variant="outline">{filteredWorkouts.length} sessions</Badge>
          </div>
          
          {filteredWorkouts.map((workout) => (
            <Card 
              key={workout.id} 
              className="cursor-pointer hover:shadow-md transition-shadow"
              onClick={() => onWorkoutSelect?.(workout)}
            >
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2">
                    {getWorkoutIcon(workout.type)}
                    {workout.name}
                  </CardTitle>
                  <div className="flex items-center gap-2">
                    <Badge variant={workout.workout_status === 'completed' ? 'default' : 'secondary'}>
                      {workout.workout_status || 'planned'}
                    </Badge>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={(e) => handleDelete(workout.id, e)}
                      className="text-red-500 hover:text-red-700"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="flex items-center justify-between text-sm text-muted-foreground">
                  <span>{new Date(workout.date).toLocaleDateString()}</span>
                  <span>{workout.duration} minutes</span>
                  {workout.type === 'swim' && workout.swimData?.totalDistance && (
                    <span>{workout.swimData.totalDistance}m</span>
                  )}
                  {(workout.type === 'run' || workout.type === 'ride') && workout.distance && (
                    <span>{workout.distance.toFixed(1)} km</span>
                  )}
                </div>
                {workout.description && (
                  <p className="mt-2 text-sm text-gray-600 line-clamp-2">{workout.description}</p>
                )}
                {workout.type === 'swim' && workout.swimData && (
                  <div className="mt-2 text-sm text-gray-600">
                    <span className="font-medium">{workout.swimData.strokeType}</span>
                    {workout.swimData.targetPacePer100 && (
                      <span className="ml-2">• Target: {workout.swimData.targetPacePer100}/100m</span>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
};

export default FilteredWorkoutList;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/GarminAutoSync.tsx
import React, { useState, useEffect } from 'react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { RefreshCw, CheckCircle, Zap, Settings, WifiOff } from 'lucide-react';
import { supabase } from '@/lib/supabase';

interface GarminAutoSyncProps {
  onWorkoutImported?: (workout: any) => void;
}

const GarminAutoSync: React.FC<GarminAutoSyncProps> = ({ onWorkoutImported }) => {
  const [isListening, setIsListening] = useState(false);
  const [lastSync, setLastSync] = useState<Date | null>(null);
  const [status, setStatus] = useState<'idle' | 'active' | 'error'>('idle');

  useEffect(() => {
    checkAutoSyncStatus();
  }, []);

  const checkAutoSyncStatus = async () => {
    try {
      const { data } = await supabase
        .from('user_connections')
        .select('*')
        .eq('provider', 'garmin')
        .single();
      
      if (data?.connection_data?.seamless_settings?.auto_sync) {
        setIsListening(true);
        setStatus('active');
        setLastSync(data.connection_data.seamless_settings.last_auto_sync ? 
          new Date(data.connection_data.seamless_settings.last_auto_sync) : null);
      }
    } catch (error) {
      setStatus('idle');
    }
  };

  const getStatusIcon = () => {
    switch (status) {
      case 'active':
        return <CheckCircle className="h-4 w-4 text-green-600" />;
      case 'error':
        return <WifiOff className="h-4 w-4 text-red-600" />;
      default:
        return <Zap className="h-4 w-4 text-gray-400" />;
    }
  };

  const getTooltipContent = () => {
    switch (status) {
      case 'active':
        return (
          <div className="text-sm">
            <p className="font-medium text-green-600">Auto-sync Active</p>
            <p>Listening for Garmin workouts</p>
            {lastSync && (
              <p className="text-xs text-gray-500 mt-1">
                Last sync: {lastSync.toLocaleString()}
              </p>
            )}
          </div>
        );
      case 'error':
        return (
          <div className="text-sm">
            <p className="font-medium text-red-600">Sync Error</p>
            <p>Connection issue detected</p>
          </div>
        );
      default:
        return (
          <div className="text-sm">
            <p className="font-medium text-gray-600">Auto-sync Inactive</p>
            <p>Enable in Garmin setup to activate</p>
          </div>
        );
    }
  };

  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <div className="flex items-center gap-1">
            {getStatusIcon()}
            <Badge 
              variant={status === 'active' ? 'default' : 'secondary'}
              className="text-xs px-1 py-0"
            >
              {status === 'active' ? 'Sync' : 'Off'}
            </Badge>
          </div>
        </TooltipTrigger>
        <TooltipContent side="bottom" className="max-w-xs">
          {getTooltipContent()}
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
};

export default GarminAutoSync;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/GarminConnect.tsx
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Watch, CheckCircle, AlertCircle, RefreshCw } from 'lucide-react';
import { supabase } from '@/lib/supabase';

interface GarminConnectProps {
  onWorkoutsImported?: (workouts: any[]) => void;
}

const GarminConnect: React.FC<GarminConnectProps> = ({ onWorkoutsImported }) => {
  const [connectionStatus, setConnectionStatus] = useState<'disconnected' | 'connecting' | 'connected' | 'error'>('disconnected');
  const [lastSync, setLastSync] = useState<Date | null>(null);
  const [syncStatus, setSyncStatus] = useState<'idle' | 'syncing' | 'success' | 'error'>('idle');
  const [garminData, setGarminData] = useState<any>(null);

  useEffect(() => {
    checkConnectionStatus();
  }, []);

  const checkConnectionStatus = async () => {
    try {
      // Check if user has Garmin connection stored
      const { data, error } = await supabase
        .from('user_connections')
        .select('*')
        .eq('provider', 'garmin')
        .single();
      
      if (data && !error) {
        setConnectionStatus('connected');
        setLastSync(new Date(data.last_sync));
        setGarminData(data.connection_data);
      }
    } catch (error) {
      console.log('No existing Garmin connection found');
    }
  };

  const initiateGarminAuth = async () => {
    setConnectionStatus('connecting');
    
    try {
      // In a real implementation, this would redirect to Garmin OAuth
      // For demo purposes, we'll simulate the connection
      const authUrl = 'https://connect.garmin.com/oauth/authorize';
      const clientId = 'your-garmin-client-id';
      const redirectUri = window.location.origin + '/garmin-callback';
      const scope = 'read:activities,read:profile';
      
      const fullAuthUrl = `${authUrl}?client_id=${clientId}&redirect_uri=${redirectUri}&response_type=code&scope=${scope}`;
      
      // Open popup for OAuth
      const popup = window.open(fullAuthUrl, 'garmin-auth', 'width=600,height=600');
      
      // Listen for popup close or message
      const checkClosed = setInterval(() => {
        if (popup?.closed) {
          clearInterval(checkClosed);
          // Simulate successful connection for demo
          setTimeout(() => {
            setConnectionStatus('connected');
            setLastSync(new Date());
            saveConnectionData();
          }, 1000);
        }
      }, 1000);
      
    } catch (error) {
      setConnectionStatus('error');
      console.error('Garmin auth error:', error);
    }
  };

  const saveConnectionData = async () => {
    try {
      const connectionData = {
        provider: 'garmin',
        access_token: 'demo-token',
        refresh_token: 'demo-refresh',
        expires_at: new Date(Date.now() + 3600000).toISOString(),
        last_sync: new Date().toISOString(),
        connection_data: {
          user_id: 'garmin-user-123',
          display_name: 'Garmin User'
        }
      };
      
      await supabase
        .from('user_connections')
        .upsert(connectionData);
        
    } catch (error) {
      console.error('Error saving connection:', error);
    }
  };

  const syncWorkouts = async () => {
    setSyncStatus('syncing');
    
    try {
      // Simulate fetching workouts from Garmin
      const mockWorkouts = [
        {
          name: 'Morning Run',
          type: 'endurance',
          date: new Date().toISOString(),
          duration: 45,
          distance: 8.5,
          avg_heart_rate: 155,
          max_heart_rate: 172,
          calories: 420,
          avg_pace: 330, // seconds per km
          elevation_gain: 120
        },
        {
          name: 'Bike Ride',
          type: 'endurance', 
          date: new Date(Date.now() - 86400000).toISOString(),
          duration: 90,
          distance: 35.2,
          avg_heart_rate: 142,
          max_heart_rate: 165,
          avg_power: 185,
          max_power: 245,
          calories: 650,
          elevation_gain: 450
        }
      ];
      
      // Save to database
      for (const workout of mockWorkouts) {
        await supabase
          .from('workouts')
          .insert({
            ...workout,
            source: 'garmin',
            created_at: new Date().toISOString()
          });
      }
      
      setSyncStatus('success');
      setLastSync(new Date());
      onWorkoutsImported?.(mockWorkouts);
      
      setTimeout(() => setSyncStatus('idle'), 3000);
      
    } catch (error) {
      setSyncStatus('error');
      console.error('Sync error:', error);
      setTimeout(() => setSyncStatus('idle'), 3000);
    }
  };

  const disconnectGarmin = async () => {
    try {
      await supabase
        .from('user_connections')
        .delete()
        .eq('provider', 'garmin');
        
      setConnectionStatus('disconnected');
      setLastSync(null);
      setGarminData(null);
    } catch (error) {
      console.error('Disconnect error:', error);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Watch className="h-5 w-5" />
          Garmin Connect
          <Badge variant={connectionStatus === 'connected' ? 'default' : 'secondary'}>
            {connectionStatus === 'connected' ? 'Connected' : 'Disconnected'}
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {connectionStatus === 'disconnected' && (
          <div className="space-y-3">
            <p className="text-sm text-gray-600">
              Connect your Garmin account to automatically import your endurance workouts
            </p>
            <Button 
              onClick={initiateGarminAuth}
              disabled={connectionStatus === 'connecting'}
              className="w-full"
            >
              {connectionStatus === 'connecting' ? (
                <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
              ) : (
                <Watch className="h-4 w-4 mr-2" />
              )}
              {connectionStatus === 'connecting' ? 'Connecting...' : 'Connect Garmin Account'}
            </Button>
          </div>
        )}
        
        {connectionStatus === 'connected' && (
          <div className="space-y-3">
            <div className="flex items-center gap-2 text-sm text-green-600">
              <CheckCircle className="h-4 w-4" />
              Connected to Garmin Connect
            </div>
            
            {lastSync && (
              <p className="text-sm text-gray-600">
                Last sync: {lastSync.toLocaleString()}
              </p>
            )}
            
            <div className="flex gap-2">
              <Button 
                onClick={syncWorkouts}
                disabled={syncStatus === 'syncing'}
                className="flex-1"
              >
                {syncStatus === 'syncing' ? (
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <RefreshCw className="h-4 w-4 mr-2" />
                )}
                {syncStatus === 'syncing' ? 'Syncing...' : 'Sync Workouts'}
              </Button>
              
              <Button 
                variant="outline"
                onClick={disconnectGarmin}
                className="flex-1"
              >
                Disconnect
              </Button>
            </div>
            
            {syncStatus === 'success' && (
              <Alert>
                <CheckCircle className="h-4 w-4" />
                <AlertDescription className="text-green-600">
                  Workouts synced successfully!
                </AlertDescription>
              </Alert>
            )}
            
            {syncStatus === 'error' && (
              <Alert>
                <AlertCircle className="h-4 w-4" />
                <AlertDescription className="text-red-600">
                  Sync failed. Please try again.
                </AlertDescription>
              </Alert>
            )}
          </div>
        )}
        
        {connectionStatus === 'error' && (
          <Alert>
            <AlertCircle className="h-4 w-4" />
            <AlertDescription className="text-red-600">
              Failed to connect to Garmin. Please try again.
            </AlertDescription>
          </Alert>
        )}
        
        <div className="text-xs text-gray-500 space-y-1">
          <p><strong>What gets imported:</strong></p>
          <ul className="list-disc list-inside space-y-1">
            <li>Running, cycling, and other endurance activities</li>
            <li>Heart rate, power, pace, and distance data</li>
            <li>Elevation, calories, and training metrics</li>
            <li>Automatic workout categorization</li>
          </ul>
        </div>
      </CardContent>
    </Card>
  );
};

export default GarminConnect;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/GarminExport.tsx
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Download, Watch, Smartphone } from 'lucide-react';
import { WorkoutInterval } from './WorkoutIntervals';

interface GarminExportProps {
  workoutName: string;
  intervals: WorkoutInterval[];
}

const GarminExport: React.FC<GarminExportProps> = ({ workoutName, intervals }) => {
  const [exportStatus, setExportStatus] = useState<'idle' | 'exporting' | 'success' | 'error'>('idle');

  const generateFITFile = () => {
    // Generate FIT file content (simplified structure)
    const fitData = {
      workout: {
        name: workoutName,
        sport: 'cycling', // or 'running'
        steps: intervals.map((interval, index) => ({
          step_name: interval.name,
          duration_type: interval.durationType === 'time' ? 'time' : 'distance',
          duration_value: interval.durationType === 'time' ? interval.duration * 60 : interval.duration * 1000, // seconds or meters
          target_type: getGarminTargetType(interval.intensityType),
          target_value_low: interval.intensityMin,
          target_value_high: interval.intensityMax,
          intensity: getGarminIntensity(interval.intensityType, interval.intensityMin, interval.intensityMax)
        }))
      }
    };
    
    return fitData;
  };

  const getGarminTargetType = (intensityType: string) => {
    switch (intensityType) {
      case 'heartRate': return 'heart_rate';
      case 'power': return 'power';
      case 'pace': return 'speed';
      case 'rpe': return 'heart_rate'; // RPE maps to HR zones
      default: return 'heart_rate';
    }
  };

  const getGarminIntensity = (type: string, min: number, max: number) => {
    // Map intensity to Garmin zones (1-5)
    if (type === 'rpe') {
      return Math.min(5, Math.max(1, Math.round((min + max) / 2)));
    }
    return 3; // Default to moderate intensity
  };

  const exportToGarmin = async () => {
    setExportStatus('exporting');
    
    try {
      const fitData = generateFITFile();
      
      // Create downloadable file
      const blob = new Blob([JSON.stringify(fitData, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${workoutName.replace(/\s+/g, '_')}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      setExportStatus('success');
      setTimeout(() => setExportStatus('idle'), 3000);
    } catch (error) {
      setExportStatus('error');
      setTimeout(() => setExportStatus('idle'), 3000);
    }
  };

  const connectToGarmin = () => {
    // In a real implementation, this would use Garmin Connect IQ SDK
    alert('Garmin Connect integration would require Garmin Connect IQ SDK setup');
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Watch className="h-5 w-5" />
          Garmin Export
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="text-sm text-gray-600">
          Export your structured workout to Garmin devices
        </div>
        
        {intervals.length === 0 && (
          <Alert>
            <AlertDescription>
              Add workout intervals to enable Garmin export
            </AlertDescription>
          </Alert>
        )}
        
        {intervals.length > 0 && (
          <div className="space-y-3">
            <div className="text-sm">
              <strong>Workout Summary:</strong>
              <ul className="mt-1 space-y-1">
                {intervals.map((interval, index) => (
                  <li key={interval.id} className="text-gray-600">
                    {index + 1}. {interval.name} - {interval.duration}
                    {interval.durationType === 'time' ? 'min' : 'km'} @ 
                    {interval.intensityMin}-{interval.intensityMax}
                    {interval.intensityType === 'heartRate' ? 'bpm' : 
                     interval.intensityType === 'power' ? 'W' :
                     interval.intensityType === 'pace' ? 'min/km' : 'RPE'}
                  </li>
                ))}
              </ul>
            </div>
            
            <div className="flex gap-2">
              <Button 
                onClick={exportToGarmin}
                disabled={exportStatus === 'exporting'}
                className="flex-1"
              >
                <Download className="h-4 w-4 mr-2" />
                {exportStatus === 'exporting' ? 'Exporting...' : 'Download Workout File'}
              </Button>
              
              <Button 
                variant="outline"
                onClick={connectToGarmin}
                className="flex-1"
              >
                <Smartphone className="h-4 w-4 mr-2" />
                Connect to Garmin
              </Button>
            </div>
            
            {exportStatus === 'success' && (
              <Alert>
                <AlertDescription className="text-green-600">
                  Workout file downloaded! Transfer to your Garmin device via Garmin Connect.
                </AlertDescription>
              </Alert>
            )}
            
            {exportStatus === 'error' && (
              <Alert>
                <AlertDescription className="text-red-600">
                  Export failed. Please try again.
                </AlertDescription>
              </Alert>
            )}
            
            <div className="text-xs text-gray-500">
              <strong>Instructions:</strong>
              <ol className="mt-1 space-y-1">
                <li>1. Download the workout file</li>
                <li>2. Open Garmin Connect on your phone/computer</li>
                <li>3. Import the workout to your training calendar</li>
                <li>4. Sync with your Garmin device</li>
              </ol>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default GarminExport;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/GarminSeamless.tsx
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { Zap, Watch, CheckCircle, Settings, Upload } from 'lucide-react';
import { supabase } from '@/lib/supabase';

interface GarminSeamlessProps {
  onAutoSyncChange?: (enabled: boolean) => void;
}

const GarminSeamless: React.FC<GarminSeamlessProps> = ({ onAutoSyncChange }) => {
  const [autoSync, setAutoSync] = useState(false);
  const [autoExport, setAutoExport] = useState(false);
  const [webhookEnabled, setWebhookEnabled] = useState(false);
  const [lastAutoSync, setLastAutoSync] = useState<Date | null>(null);
  const [status, setStatus] = useState<'idle' | 'setting-up' | 'active'>('idle');

  useEffect(() => {
    loadSeamlessSettings();
  }, []);

  const loadSeamlessSettings = async () => {
    try {
      const { data } = await supabase
        .from('user_connections')
        .select('*')
        .eq('provider', 'garmin')
        .single();
      
      if (data?.connection_data?.seamless_settings) {
        const settings = data.connection_data.seamless_settings;
        setAutoSync(settings.auto_sync || false);
        setAutoExport(settings.auto_export || false);
        setWebhookEnabled(settings.webhook_enabled || false);
        setLastAutoSync(settings.last_auto_sync ? new Date(settings.last_auto_sync) : null);
        setStatus(settings.webhook_enabled ? 'active' : 'idle');
      }
    } catch (error) {
      console.log('No seamless settings found');
    }
  };

  const setupSeamlessIntegration = async () => {
    setStatus('setting-up');
    
    try {
      // Setup webhook endpoint for real-time sync
      const response = await fetch('https://yyriamwvtvzlkumqrvpm.supabase.co/functions/v1/752a4e71-8616-490f-8006-8f310471e2c7', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'setup_webhook',
          webhook_url: `${window.location.origin}/api/garmin-webhook`,
          events: ['activity_created', 'workout_completed']
        })
      });
      
      if (response.ok) {
        setWebhookEnabled(true);
        setStatus('active');
        await saveSeamlessSettings();
      }
    } catch (error) {
      console.error('Webhook setup failed:', error);
      setStatus('idle');
    }
  };

  const saveSeamlessSettings = async () => {
    try {
      const settings = {
        auto_sync: autoSync,
        auto_export: autoExport,
        webhook_enabled: webhookEnabled,
        last_auto_sync: lastAutoSync?.toISOString()
      };
      
      await supabase
        .from('user_connections')
        .update({
          connection_data: {
            seamless_settings: settings
          }
        })
        .eq('provider', 'garmin');
    } catch (error) {
      console.error('Failed to save settings:', error);
    }
  };

  const toggleAutoSync = async (enabled: boolean) => {
    setAutoSync(enabled);
    onAutoSyncChange?.(enabled);
    await saveSeamlessSettings();
  };

  const toggleAutoExport = async (enabled: boolean) => {
    setAutoExport(enabled);
    await saveSeamlessSettings();
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Zap className="h-5 w-5" />
          Seamless Garmin Integration
          <Badge variant={status === 'active' ? 'default' : 'secondary'}>
            {status === 'active' ? 'Active' : 'Inactive'}
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="text-sm text-gray-600">
          Enable automatic, real-time sync between your Garmin device and this app
        </div>
        
        {status === 'idle' && (
          <div className="space-y-3">
            <Alert>
              <Settings className="h-4 w-4" />
              <AlertDescription>
                Set up seamless integration to automatically sync workouts and export training plans
              </AlertDescription>
            </Alert>
            
            <Button 
              onClick={setupSeamlessIntegration}
              disabled={status === 'setting-up'}
              className="w-full"
            >
              <Zap className="h-4 w-4 mr-2" />
              {status === 'setting-up' ? 'Setting up...' : 'Enable Seamless Integration'}
            </Button>
          </div>
        )}
        
        {status === 'active' && (
          <div className="space-y-4">
            <div className="flex items-center gap-2 text-sm text-green-600">
              <CheckCircle className="h-4 w-4" />
              Seamless integration is active
            </div>
            
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <div>
                  <Label htmlFor="auto-sync">Auto-sync workouts</Label>
                  <p className="text-xs text-gray-500">Automatically import completed workouts</p>
                </div>
                <Switch
                  id="auto-sync"
                  checked={autoSync}
                  onCheckedChange={toggleAutoSync}
                />
              </div>
              
              <div className="flex items-center justify-between">
                <div>
                  <Label htmlFor="auto-export">Auto-export training plans</Label>
                  <p className="text-xs text-gray-500">Automatically send new workouts to Garmin</p>
                </div>
                <Switch
                  id="auto-export"
                  checked={autoExport}
                  onCheckedChange={toggleAutoExport}
                />
              </div>
            </div>
            
            {lastAutoSync && (
              <p className="text-xs text-gray-500">
                Last auto-sync: {lastAutoSync.toLocaleString()}
              </p>
            )}
            
            <div className="text-xs text-gray-500 space-y-1">
              <p><strong>How it works:</strong></p>
              <ul className="list-disc list-inside space-y-1">
                <li>Workouts sync automatically when completed on your Garmin</li>
                <li>New training plans export directly to Garmin Connect</li>
                <li>Real-time updates via webhook notifications</li>
                <li>No manual sync required</li>
              </ul>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default GarminSeamless;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/GarminSetup.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Watch, Smartphone, Download, Upload, CheckCircle } from 'lucide-react';
import GarminConnect from './GarminConnect';
import GarminSeamless from './GarminSeamless';

const GarminSetup: React.FC = () => {
  const handleWorkoutsImported = (workouts: any[]) => {
    console.log('Imported workouts:', workouts);
    // Refresh the workout list or show success message
  };

  const handleAutoSyncChange = (enabled: boolean) => {
    console.log('Auto-sync', enabled ? 'enabled' : 'disabled');
  };

  return (
    <div className="space-y-6">
      <div className="text-center space-y-2">
        <h2 className="text-2xl font-bold">Connect Your Garmin Account</h2>
        <p className="text-gray-600">
          Automatically import your endurance workouts and seamlessly sync with your device
        </p>
      </div>

      <div className="grid md:grid-cols-2 gap-6">
        {/* Connection Component */}
        <GarminConnect onWorkoutsImported={handleWorkoutsImported} />

        {/* Seamless Integration */}
        <GarminSeamless onAutoSyncChange={handleAutoSyncChange} />
      </div>

      {/* Setup Instructions */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Smartphone className="h-5 w-5" />
            Setup Instructions
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-3">
            <div className="flex items-start gap-3">
              <Badge variant="outline" className="mt-1">1</Badge>
              <div>
                <p className="font-medium">Connect Account</p>
                <p className="text-sm text-gray-600">
                  Click "Connect Garmin Account" to authorize access to your Garmin Connect data
                </p>
              </div>
            </div>
            
            <div className="flex items-start gap-3">
              <Badge variant="outline" className="mt-1">2</Badge>
              <div>
                <p className="font-medium">Enable Seamless Integration</p>
                <p className="text-sm text-gray-600">
                  Turn on auto-sync for real-time workout imports and automatic training plan exports
                </p>
              </div>
            </div>
            
            <div className="flex items-start gap-3">
              <Badge variant="outline" className="mt-1">3</Badge>
              <div>
                <p className="font-medium">Train & Track</p>
                <p className="text-sm text-gray-600">
                  Your workouts will automatically appear here after completion on your Garmin device
                </p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Data Types */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Upload className="h-5 w-5" />
            Seamless Data Flow
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-3 gap-4">
            <div className="space-y-2">
              <h4 className="font-medium text-sm">Auto Import</h4>
              <ul className="text-xs text-gray-600 space-y-1">
                <li>• Real-time workout sync</li>
                <li>• Complete activity data</li>
                <li>• Heart rate & power zones</li>
                <li>• Training metrics</li>
              </ul>
            </div>
            
            <div className="space-y-2">
              <h4 className="font-medium text-sm">Auto Export</h4>
              <ul className="text-xs text-gray-600 space-y-1">
                <li>• Training plans to device</li>
                <li>• Structured workouts</li>
                <li>• Target zones & intervals</li>
                <li>• Workout guidance</li>
              </ul>
            </div>
            
            <div className="space-y-2">
              <h4 className="font-medium text-sm">Smart Sync</h4>
              <ul className="text-xs text-gray-600 space-y-1">
                <li>• Webhook notifications</li>
                <li>• Instant updates</li>
                <li>• No manual intervention</li>
                <li>• Background processing</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Privacy Notice */}
      <Alert>
        <CheckCircle className="h-4 w-4" />
        <AlertDescription>
          <strong>Privacy & Security:</strong> Your Garmin data is securely stored and only used to enhance your training experience. 
          Seamless integration uses encrypted webhooks and can be disabled at any time.
        </AlertDescription>
      </Alert>
    </div>
  );
};

export default GarminSetup;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/LogEffortDropdown.tsx
import React from 'react';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { ChevronDown, Waves, Bike, Activity, Dumbbell, Move } from 'lucide-react';

interface LogEffortDropdownProps {
  onSelectType: (type: string) => void;
}

const LogEffortDropdown: React.FC<LogEffortDropdownProps> = ({ onSelectType }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          className="flex items-center gap-2 bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 hover:text-gray-900 hover:border-gray-400 transition-all duration-200 shadow-sm hover:shadow-md"
          style={{
            fontFamily: 'Inter, sans-serif',
            fontWeight: 600,
            padding: '14px 16px',
            borderRadius: '8px',
            fontSize: '15px',
            minHeight: '48px',
            flex: 1,
            maxWidth: '90px'
          }}
        >
          Log
          <ChevronDown className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent
        align="start"
        className="bg-white border border-gray-200 shadow-xl"
        style={{borderRadius: '12px', padding: '8px', minWidth: '160px'}}
      >
        <DropdownMenuItem
          onClick={() => onSelectType('log-strength')}
          className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <Dumbbell className="h-5 w-5 mr-3" />
          Log Strength
        </DropdownMenuItem>
        <DropdownMenuItem
          onClick={() => onSelectType('log-run')}
          className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <Activity className="h-5 w-5 mr-3" />
          Log Run
        </DropdownMenuItem>
        <DropdownMenuItem
          onClick={() => onSelectType('log-ride')}
          className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <Bike className="h-5 w-5 mr-3" />
          Log Ride
        </DropdownMenuItem>
        <DropdownMenuItem
          onClick={() => onSelectType('log-swim')}
          className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <Waves className="h-5 w-5 mr-3" />
          Log Swim
        </DropdownMenuItem>
        <DropdownMenuItem
          onClick={() => onSelectType('log-mobility')}
          className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <Move className="h-5 w-5 mr-3" />
          Log Mobility
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default LogEffortDropdown;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/NewEffortDropdown.tsx
import React from 'react';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { ChevronDown, Waves, Bike, Activity, Dumbbell, Move } from 'lucide-react';

interface NewEffortDropdownProps {
  onSelectType: (type: string) => void;
}

const NewEffortDropdown: React.FC<NewEffortDropdownProps> = ({ onSelectType }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          className="flex items-center gap-2 bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 hover:text-gray-900 hover:border-gray-400 transition-all duration-200 shadow-sm hover:shadow-md"
          style={{
            fontFamily: 'Inter, sans-serif',
            fontWeight: 600,
            padding: '14px 16px',
            borderRadius: '8px',
            fontSize: '15px',
            minHeight: '48px',
            flex: 1,
            maxWidth: '90px'
          }}
        >
          Build
          <ChevronDown className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent
        align="start"
        className="bg-white border border-gray-200 shadow-xl"
        style={{borderRadius: '12px', padding: '8px', minWidth: '160px'}}
      >
        <DropdownMenuItem
          onClick={() => onSelectType('run')}
          className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <Activity className="h-5 w-5 mr-3" />
          Run
        </DropdownMenuItem>
        <DropdownMenuItem
          onClick={() => onSelectType('ride')}
          className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <Bike className="h-5 w-5 mr-3" />
          Ride
        </DropdownMenuItem>
        <DropdownMenuItem
          onClick={() => onSelectType('swim')}
          className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <Waves className="h-5 w-5 mr-3" />
          Swim
        </DropdownMenuItem>
        <DropdownMenuItem
          onClick={() => onSelectType('strength')}
          className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <Dumbbell className="h-5 w-5 mr-3" />
          Strength
        </DropdownMenuItem>
        <DropdownMenuItem
          onClick={() => onSelectType('mobility')}
          className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
          style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
        >
          <Move className="h-5 w-5 mr-3" />
          Mobility
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default NewEffortDropdown;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/RideIntervalBuilder.tsx
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Plus, Copy, Trash2, GripVertical, Repeat } from 'lucide-react';

export interface RideInterval {
  id: string;
  time?: string;
  distance?: string;
  speedTarget?: string;
  powerTarget?: string;
  bpmTarget?: string;
  rpeTarget?: string;
  cadenceTarget?: string;
  repeat?: boolean;
  repeatCount?: number;
  duration?: number;
  selected?: boolean;
}

interface RideIntervalBuilderProps {
  intervals: RideInterval[];
  onChange: (intervals: RideInterval[]) => void;
  isMetric: boolean;
}

export default function RideIntervalBuilder({ intervals, onChange, isMetric }: RideIntervalBuilderProps) {
  const [selectedIntervals, setSelectedIntervals] = useState<string[]>([]);
  const [blockRepeatCount, setBlockRepeatCount] = useState(2);

  const addInterval = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    const newInterval: RideInterval = {
      id: Date.now().toString(),
      time: '',
      distance: '',
      duration: 0
    };
    onChange([...intervals, newInterval]);
  };

  const updateInterval = (id: string, updates: Partial<RideInterval>) => {
    onChange(intervals.map(interval =>
      interval.id === id ? { ...interval, ...updates } : interval
    ));
  };

  const duplicateInterval = (id: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    const interval = intervals.find(i => i.id === id);
    if (interval) {
      const duplicate = { ...interval, id: Date.now().toString() };
      onChange([...intervals, duplicate]);
    }
  };

  const deleteInterval = (id: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    onChange(intervals.filter(interval => interval.id !== id));
  };

  const handleRepeatChange = (id: string, checked: boolean) => {
    if (checked) {
      const interval = intervals.find(i => i.id === id);
      if (interval) {
        const duplicate = { ...interval, id: (Date.now() + 1).toString(), repeat: false };
        const intervalIndex = intervals.findIndex(i => i.id === id);
        const newIntervals = [...intervals];
        newIntervals.splice(intervalIndex + 1, 0, duplicate);
        onChange(newIntervals);
      }
    }
    updateInterval(id, { repeat: checked });
  };

  const toggleIntervalSelection = (id: string) => {
    setSelectedIntervals(prev =>
      prev.includes(id) ? prev.filter(i => i !== id) : [...prev, id]
    );
  };

  const createBlock = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (selectedIntervals.length === 0) return;
    
    const selectedIntervalsData = intervals.filter(i => selectedIntervals.includes(i.id));
    const blockSummary = selectedIntervalsData.map(i => {
      const timeStr = i.time ? i.time : '';
      const target = i.powerTarget ? `@ ${i.powerTarget}` : '';
      return `${timeStr} ${target}`.trim();
    }).join(' + ');
    
    const blockInterval: RideInterval = {
      id: Date.now().toString(),
      time: `[${blockSummary}]`,
      repeatCount: blockRepeatCount,
      duration: selectedIntervalsData.reduce((sum, i) => sum + (i.duration || 0), 0) * blockRepeatCount
    };
    
    const remainingIntervals = intervals.filter(i => !selectedIntervals.includes(i.id));
    onChange([...remainingIntervals, blockInterval]);
    setSelectedIntervals([]);
  };

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            Segments
            <Button type="button" onClick={addInterval} size="sm" className="bg-black text-white hover:bg-gray-800">
              <Plus className="h-4 w-4 mr-2" />
              Add Segment
            </Button>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {intervals.map((interval, index) => (
            <Card key={interval.id} className="p-4">
              <div className="flex items-center gap-4 mb-4">
                <Checkbox
                  checked={selectedIntervals.includes(interval.id)}
                  onCheckedChange={() => toggleIntervalSelection(interval.id)}
                />
                <GripVertical className="h-4 w-4 text-muted-foreground" />
                <h4 className="font-medium flex-1">Segment {index + 1}</h4>
                <div className="flex gap-2">
                  <Button type="button" onClick={(e) => duplicateInterval(interval.id, e)} size="sm" variant="outline" className="border-black hover:bg-gray-100">
                    <Copy className="h-4 w-4" />
                  </Button>
                  <Button type="button" onClick={(e) => deleteInterval(interval.id, e)} size="sm" variant="outline" className="border-black hover:bg-gray-100">
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <Label>Time (mm:ss)</Label>
                  <Input
                    placeholder="5:00"
                    value={interval.time || ''}
                    onChange={(e) => {
                      const timeStr = e.target.value;
                      const [min, sec] = timeStr.split(':').map(Number);
                      const duration = (min || 0) * 60 + (sec || 0);
                      updateInterval(interval.id, { time: timeStr, duration });
                    }}
                  />
                </div>
                <div>
                  <Label>Distance ({isMetric ? 'km' : 'mi'})</Label>
                  <Input
                    placeholder="10.0"
                    value={interval.distance || ''}
                    onChange={(e) => updateInterval(interval.id, { distance: e.target.value })}
                  />
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <Label>Speed Target ({isMetric ? 'km/h' : 'mph'})</Label>
                  <Input
                    placeholder={isMetric ? "25-30" : "18-20"}
                    value={interval.speedTarget || ''}
                    onChange={(e) => updateInterval(interval.id, { speedTarget: e.target.value })}
                  />
                </div>
                <div>
                  <Label>Power Target (watts or %FTP)</Label>
                  <Input
                    placeholder="250W or 85%"
                    value={interval.powerTarget || ''}
                    onChange={(e) => updateInterval(interval.id, { powerTarget: e.target.value })}
                  />
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <Label>BPM Target</Label>
                  <Input
                    placeholder="150-160 or zone"
                    value={interval.bpmTarget || ''}
                    onChange={(e) => updateInterval(interval.id, { bpmTarget: e.target.value })}
                  />
                </div>
                <div>
                  <Label>RPE Target</Label>
                  <Input
                    placeholder="1-10 or easy/moderate/hard"
                    value={interval.rpeTarget || ''}
                    onChange={(e) => updateInterval(interval.id, { rpeTarget: e.target.value })}
                  />
                </div>
              </div>
              
              <div className="grid grid-cols-1 gap-4 mb-4">
                <div>
                  <Label>Cadence Target (rpm)</Label>
                  <Input
                    placeholder="85-95"
                    value={interval.cadenceTarget || ''}
                    onChange={(e) => updateInterval(interval.id, { cadenceTarget: e.target.value })}
                  />
                </div>
              </div>
              
              <div className="flex items-center space-x-2 mb-4">
                <Checkbox
                  id={`repeat-${interval.id}`}
                  checked={interval.repeat || false}
                  onCheckedChange={(checked) => handleRepeatChange(interval.id, !!checked)}
                />
                <Label htmlFor={`repeat-${interval.id}`}>Repeat?</Label>
              </div>
              
              <Button type="button" onClick={addInterval} size="sm" variant="outline" className="w-full border-black hover:bg-gray-100">
                <Plus className="h-4 w-4 mr-2" />
                New Segment
              </Button>
            </Card>
          ))}
          
          {intervals.length === 0 && (
            <div className="text-center py-8 text-muted-foreground">
              No segments added yet. Click "Add Segment" to get started.
            </div>
          )}
        </CardContent>
      </Card>
      
      {selectedIntervals.length > 0 && (
        <div className="fixed bottom-20 left-1/2 transform -translate-x-1/2 bg-background border rounded-lg shadow-lg p-4 flex items-center gap-4">
          <span className="text-sm">{selectedIntervals.length} segments selected</span>
          <Input
            type="number"
            min="2"
            className="w-20"
            value={blockRepeatCount}
            onChange={(e) => setBlockRepeatCount(parseInt(e.target.value) || 2)}
          />
          <Button type="button" onClick={createBlock} size="sm" className="bg-black text-white hover:bg-gray-800">
            <Repeat className="h-4 w-4 mr-2" />
            Repeat this block
          </Button>
        </div>
      )}
    </div>
  );
}

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/RoutinesDropdown.tsx
import React from 'react';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { ChevronDown, Waves, Bike, Activity, Dumbbell, Move } from 'lucide-react';

interface RoutinesDropdownProps {
  onSelectRoutine?: (type: string) => void;
}

const RoutinesDropdown: React.FC<RoutinesDropdownProps> = ({ onSelectRoutine }) => {
  const routineTypes = [
    { type: 'run', label: 'Run', icon: Activity },
    { type: 'ride', label: 'Ride', icon: Bike },
    { type: 'swim', label: 'Swim', icon: Waves },
    { type: 'strength', label: 'Strength', icon: Dumbbell },
    { type: 'mobility', label: 'Mobility', icon: Move }
  ];

  const handleSelect = (type: string) => {
    console.log('Routine selected:', type);
    if (onSelectRoutine) {
      onSelectRoutine(type);
    }
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          className="flex items-center gap-2 bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 hover:text-gray-900 hover:border-gray-400 transition-all duration-200 shadow-sm hover:shadow-md"
          style={{
            fontFamily: 'Inter, sans-serif',
            fontWeight: 600,
            padding: '14px 12px',
            borderRadius: '8px',
            fontSize: '15px',
            minHeight: '48px',
            flex: 1,
            maxWidth: '110px'
          }}
        >
          Routines
          <ChevronDown className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent
        align="start"
        className="bg-white border border-gray-200 shadow-xl"
        style={{borderRadius: '12px', padding: '8px', minWidth: '160px'}}
      >
        {routineTypes.map((routine) => {
          const IconComponent = routine.icon;
          return (
            <DropdownMenuItem
              key={routine.type}
              onClick={() => handleSelect(routine.type)}
              className="hover:bg-gray-50 text-gray-700 hover:text-gray-900 transition-colors duration-150 rounded-lg cursor-pointer"
              style={{fontFamily: 'Inter, sans-serif', fontWeight: 500, padding: '12px 16px', minHeight: '44px'}}
            >
              <IconComponent className="h-5 w-5 mr-3" />
              <span>{routine.label}</span>
            </DropdownMenuItem>
          );
        })}
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default RoutinesDropdown;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/RunIntervalBuilder.tsx
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Plus, Copy, Trash2, GripVertical, Repeat, Edit } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

export interface RunInterval {
  id: string;
  time?: string;
  distance?: string;
  paceTarget?: string;
  effortLabel?: string;
  bpmTarget?: string;
  rpeTarget?: string;
  repeat?: boolean;
  repeatCount?: number;
  duration?: number;
  selected?: boolean;
  isRepeatBlock?: boolean;
  originalSegments?: RunInterval[];
}

interface RunIntervalBuilderProps {
  intervals: RunInterval[];
  onChange: (intervals: RunInterval[]) => void;
  isMetric: boolean;
}

// Smart time input handler
const handleTimeInput = (value: string, onChange: (timeStr: string, duration: number) => void) => {
  let timeStr = value;
  
  // Smart time conversion: "4" -> "4:00", "45" -> "45:00", "4:30" stays "4:30"
  if (timeStr && !timeStr.includes(':') && timeStr.length <= 2) {
    timeStr = `${timeStr}:00`;
  }
  
  if (timeStr === '') {
    onChange('', 0);
    return;
  }
  
  const parts = timeStr.split(':');
  const min = parseInt(parts[0]) || 0;
  const sec = parseInt(parts[1]) || 0;
  
  // Validate seconds
  if (sec >= 60) return;
  
  const duration = min * 60 + sec;
  onChange(timeStr, duration);
};

// Mobile Safari numeric input fix
const handleNumericInput = (value: string, onChange: (num: number) => void) => {
  if (value === '') {
    onChange(0);
    return;
  }
  
  const numericValue = value.replace(/\D/g, '');
  const parsed = parseInt(numericValue, 10);
  const finalValue = isNaN(parsed) || parsed < 1 ? 1 : parsed;
  
  onChange(finalValue);
};

export default function RunIntervalBuilder({ intervals, onChange, isMetric }: RunIntervalBuilderProps) {
  const [selectedIntervals, setSelectedIntervals] = useState<string[]>([]);
  const [blockRepeatCount, setBlockRepeatCount] = useState(1);

  const addInterval = (e?: React.MouseEvent) => {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    const newInterval: RunInterval = {
      id: Date.now().toString(),
      time: '',
      distance: '',
      duration: 0
    };
    onChange([...intervals, newInterval]);
  };

  const updateInterval = (id: string, updates: Partial<RunInterval>) => {
    onChange(intervals.map(interval =>
      interval.id === id ? { ...interval, ...updates } : interval
    ));
  };

  const duplicateInterval = (id: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    const interval = intervals.find(i => i.id === id);
    if (interval) {
      const duplicate = { ...interval, id: Date.now().toString() };
      onChange([...intervals, duplicate]);
    }
  };

  const deleteInterval = (id: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    onChange(intervals.filter(interval => interval.id !== id));
  };

  const toggleIntervalSelection = (id: string) => {
    setSelectedIntervals(prev =>
      prev.includes(id) ? prev.filter(i => i !== id) : [...prev, id]
    );
  };

  const createBlock = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (selectedIntervals.length === 0) return;

    const selectedIntervalsData = intervals.filter(i =>
      selectedIntervals.includes(i.id));

    const blockSummary = selectedIntervalsData.map(i => {
      let segmentDesc = '';
      if (i.time) {
        segmentDesc += i.time;
      }
      if (i.effortLabel) {
        segmentDesc += ` @ ${i.effortLabel}`;
      } else if (i.paceTarget) {
        segmentDesc += ` @ ${i.paceTarget}`;
      } else if (i.bpmTarget) {
        segmentDesc += ` @ ${i.bpmTarget}`;
      } else if (i.rpeTarget) {
        segmentDesc += ` @ RPE ${i.rpeTarget}`;
      }
      return segmentDesc.trim();
    }).filter(desc => desc.length > 0).join(' + ');

    const totalDuration = selectedIntervalsData.reduce((sum, i) => sum + (i.duration || 0), 0);

    const blockInterval: RunInterval = {
      id: Date.now().toString(),
      time: `${blockRepeatCount}x(${blockSummary})`,
      isRepeatBlock: true,
      repeatCount: blockRepeatCount,
      duration: totalDuration * blockRepeatCount,
      originalSegments: selectedIntervalsData.map(seg => ({
        ...seg,
        originalSegments: undefined
      }))
    };

    const remainingIntervals = intervals.filter(i =>
      !selectedIntervals.includes(i.id));
    onChange([...remainingIntervals, blockInterval]);
    setSelectedIntervals([]);
  };

  const unblockInterval = (id: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    const blockInterval = intervals.find(i => i.id === id);
    if (!blockInterval || !blockInterval.isRepeatBlock || !blockInterval.originalSegments) return;

    const restoredSegments = blockInterval.originalSegments.map(seg => ({
      ...seg,
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9)
    }));

    const updatedIntervals = intervals.filter(i => i.id !== id);
    onChange([...updatedIntervals, ...restoredSegments]);
  };

  const renderInterval = (interval: RunInterval, index: number) => {
    if (interval.isRepeatBlock) {
      return (
        <Card key={interval.id} className="p-3 bg-blue-50 border-blue-200">
          <div className="flex items-center gap-3 mb-3">
            <GripVertical className="h-4 w-4 text-muted-foreground" />
            <h4 className="font-medium flex-1 text-sm">
              <Repeat className="h-4 w-4 inline mr-2" />
              Repeat Block {intervals.filter(i => i.isRepeatBlock).findIndex(i => i.id === interval.id) + 1}
            </h4>
            <div className="flex gap-2">
              <Button
                type="button"
                onClick={(e) => unblockInterval(interval.id, e)}
                size="sm"
                variant="outline"
                className="h-8 w-8 p-0 border-blue-400 hover:bg-blue-100"
                title="Break apart block"
              >
                <Edit className="h-3 w-3" />
              </Button>
              <Button
                type="button"
                onClick={(e) => duplicateInterval(interval.id, e)}
                size="sm"
                variant="outline"
                className="h-8 w-8 p-0 border-blue-400 hover:bg-blue-100"
              >
                <Copy className="h-3 w-3" />
              </Button>
              <Button
                type="button"
                onClick={(e) => deleteInterval(interval.id, e)}
                size="sm"
                variant="outline"
                className="h-8 w-8 p-0 border-blue-400 hover:bg-blue-100"
              >
                <Trash2 className="h-3 w-3" />
              </Button>
            </div>
          </div>

          <div className="bg-white p-3 rounded border">
            <div className="text-xs font-medium text-blue-700 mb-1">
              Repeat Structure:
            </div>
            <div className="text-sm font-mono">
              {interval.time}
            </div>
            <div className="text-xs text-muted-foreground mt-1">
              Total: {Math.floor((interval.duration || 0) / 60)}:{((interval.duration || 0) % 60).toString().padStart(2, '0')}
            </div>
          </div>
        </Card>
      );
    }

    return (
      <div key={interval.id} className="p-3 border rounded-lg">
        <div className="flex items-center gap-3 mb-3">
          <Checkbox
            checked={selectedIntervals.includes(interval.id)}
            onCheckedChange={() => toggleIntervalSelection(interval.id)}
          />
          <GripVertical className="h-4 w-4 text-muted-foreground" />
          <div className="flex-1">
            <Select
              value={interval.effortLabel || `Segment ${index + 1}`}
              onValueChange={(value) => {
                updateInterval(interval.id, { effortLabel: value });
              }}
            >
              <SelectTrigger className="border-none shadow-none p-0 h-auto font-medium text-sm">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value={`Segment ${index + 1}`}>Segment {index + 1}</SelectItem>
                <SelectItem value="Warm up">Warm up</SelectItem>
                <SelectItem value="Easy">Easy</SelectItem>
                <SelectItem value="Tempo">Tempo</SelectItem>
                <SelectItem value="Threshold">Threshold</SelectItem>
                <SelectItem value="Hard">Hard</SelectItem>
                <SelectItem value="Recovery">Recovery</SelectItem>
                <SelectItem value="Cool down">Cool down</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="flex gap-2">
            <Button 
              type="button" 
              onClick={(e) => duplicateInterval(interval.id, e)} 
              size="sm" 
              variant="outline" 
              className="h-8 w-8 p-0 border-gray-400 hover:bg-gray-100"
            >
              <Copy className="h-3 w-3" />
            </Button>
            <Button 
              type="button" 
              onClick={(e) => deleteInterval(interval.id, e)} 
              size="sm" 
              variant="outline" 
              className="h-8 w-8 p-0 border-gray-400 hover:bg-gray-100"
            >
              <Trash2 className="h-3 w-3" />
            </Button>
          </div>
        </div>

        {/* Compact 3-column responsive grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 mb-3">
          <div>
            <Label className="text-xs text-muted-foreground">Time</Label>
            <Input
              placeholder="4:00"
              value={interval.time || ''}
              onChange={(e) => {
                handleTimeInput(e.target.value, (timeStr, duration) => {
                  updateInterval(interval.id, { time: timeStr, duration });
                });
              }}
              className="h-9 text-sm"
            />
          </div>
          <div>
            <Label className="text-xs text-muted-foreground">Pace (per {isMetric ? 'km' : 'mi'})</Label>
            <Input
              placeholder="8:30"
              value={interval.paceTarget || ''}
              onChange={(e) => updateInterval(interval.id, { paceTarget: e.target.value })}
              className="h-9 text-sm"
            />
          </div>
          <div>
            <Label className="text-xs text-muted-foreground">Distance ({isMetric ? 'km' : 'mi'})</Label>
            <Input
              placeholder="5.0"
              value={interval.distance || ''}
              onChange={(e) => updateInterval(interval.id, { distance: e.target.value })}
              className="h-9 text-sm"
            />
          </div>
          <div>
            <Label className="text-xs text-muted-foreground">BPM</Label>
            <Input
              placeholder="150-160"
              value={interval.bpmTarget || ''}
              onChange={(e) => updateInterval(interval.id, { bpmTarget: e.target.value })}
              className="h-9 text-sm"
            />
          </div>
          <div>
            <Label className="text-xs text-muted-foreground">RPE</Label>
            <Input
              placeholder="6-7"
              value={interval.rpeTarget || ''}
              onChange={(e) => updateInterval(interval.id, { rpeTarget: e.target.value })}
              className="h-9 text-sm"
            />
          </div>
        </div>

        {/* Compact repeat section */}
        <div className="flex items-center gap-3">
          <div className="flex items-center space-x-2">
            <Checkbox
              id={`repeat-${interval.id}`}
              checked={interval.repeat || false}
              onCheckedChange={(checked) => updateInterval(interval.id, { repeat: !!checked })}
            />
            <Label htmlFor={`repeat-${interval.id}`} className="text-xs">Repeat?</Label>
          </div>
          {interval.repeat && (
            <Input
              type="text"
              className="w-14 h-8 text-center text-sm"
              placeholder="2"
              value={interval.repeatCount === undefined ? '' : interval.repeatCount.toString()}
              onChange={(e) => {
                const value = e.target.value;
                if (value === '') {
                  updateInterval(interval.id, { repeatCount: undefined });
                } else {
                  handleNumericInput(value, (num) => {
                    updateInterval(interval.id, { repeatCount: num });
                  });
                }
              }}
              onFocus={(e) => e.target.select()}
            />
          )}
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-3">
      {/* Left-aligned Add Effort button only */}
      <div className="mb-3 text-center">
        <button 
          type="button" 
          onClick={addInterval} 
          className="px-4 py-2 text-black text-sm"
        >
          <Plus className="h-4 w-4 mr-2 inline" />
          Add effort
        </button>
      </div>

      {/* Segments */}
      <div className="space-y-3">
        {intervals.map((interval, index) => renderInterval(interval, index))}

        {intervals.length === 0 && (
          <div className="text-center py-6 text-muted-foreground border-2 border-dashed border-muted rounded-lg">
            <p className="text-sm">No segments yet</p>
            <p className="text-xs mt-1">            Click "Add effort" to get started</p>
          </div>
        )}


      </div>

      {/* Floating repeat menu - more compact */}
      {selectedIntervals.length > 0 && (
        <div className="fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-white border-2 border-gray-300 rounded-lg shadow-xl p-3 flex flex-col items-center gap-2 z-[60] max-w-xs w-full mx-4">
          <span className="text-xs font-medium text-gray-700">
            {selectedIntervals.length} segment{selectedIntervals.length > 1 ? 's' : ''} selected
          </span>
          <div className="flex items-center gap-2">
            <span className="text-xs text-gray-600">Repeat</span>
            <Input
              type="text"
              className="w-12 h-8 text-center text-sm font-semibold border-2"
              value={blockRepeatCount.toString()}
              onChange={(e) => {
                handleNumericInput(e.target.value, setBlockRepeatCount);
              }}
              onFocus={(e) => e.target.select()}
              placeholder="1"
            />
            <span className="text-xs text-gray-600">times</span>
          </div>
          <div className="flex gap-2 w-full">
            <Button
              type="button"
              onClick={() => setSelectedIntervals([])}
              size="sm"
              variant="outline"
              className="flex-1 h-8 text-xs"
            >
              Cancel
            </Button>
            <Button
              type="button"
              onClick={createBlock}
              size="sm"
              className="bg-gray-500 hover:bg-gray-600 flex-1 h-8 text-xs"
            >
              <Repeat className="h-3 w-3 mr-1" />
              Create
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/StrengthExerciseBuilder.tsx
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Plus, Copy, Trash2, GripVertical } from 'lucide-react';

export interface StrengthExercise {
  id: string;
  name: string;
  sets: number;
  reps: number;
  weight?: number;
  notes?: string;
  weightMode: 'same' | 'individual';
  individualWeights?: number[];
  completed_sets?: Array<{ reps: number; weight: number; rir?: number; completed: boolean }>;
}

interface StrengthExerciseBuilderProps {
  exercises: StrengthExercise[];
  onChange: (exercises: StrengthExercise[]) => void;
  isMetric: boolean;
  isCompleted?: boolean;
}

export default function StrengthExerciseBuilder({ exercises, onChange, isMetric, isCompleted = false }: StrengthExerciseBuilderProps) {
  const addExercise = (e: React.MouseEvent, afterIndex?: number) => {
    e.preventDefault();
    e.stopPropagation();
    const newExercise: StrengthExercise = {
      id: Date.now().toString(),
      name: '',
      sets: 1,
      reps: 1,
      weightMode: 'same',
      completed_sets: []
    };
    
    if (afterIndex !== undefined) {
      const newExercises = [...exercises];
      newExercises.splice(afterIndex + 1, 0, newExercise);
      onChange(newExercises);
    } else {
      onChange([...exercises, newExercise]);
    }
  };

  const updateExercise = (id: string, updates: Partial<StrengthExercise>) => {
    onChange(exercises.map(exercise => {
      if (exercise.id === id) {
        const updated = { ...exercise, ...updates };
        if (updates.sets && updates.sets !== exercise.sets) {
          updated.individualWeights = Array(updates.sets).fill(exercise.weight || 0);
          updated.completed_sets = Array(updates.sets).fill({ reps: 0, weight: 0, rir: 0, completed: false });
        }
        return updated;
      }
      return exercise;
    }));
  };

  const updateIndividualWeight = (exerciseId: string, setIndex: number, weight: number) => {
    const exercise = exercises.find(e => e.id === exerciseId);
    if (exercise && exercise.individualWeights) {
      const newWeights = [...exercise.individualWeights];
      newWeights[setIndex] = weight;
      updateExercise(exerciseId, { individualWeights: newWeights });
    }
  };

  const duplicateExercise = (id: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    const exercise = exercises.find(e => e.id === id);
    if (exercise) {
      const duplicate = { ...exercise, id: Date.now().toString() };
      onChange([...exercises, duplicate]);
    }
  };

  const deleteExercise = (id: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    onChange(exercises.filter(exercise => exercise.id !== id));
  };

  const updateCompletedSet = (exerciseId: string, setIndex: number, updates: { reps?: number; weight?: number; rir?: number }) => {
    const exercise = exercises.find(e => e.id === exerciseId);
    if (exercise && exercise.completed_sets) {
      const newCompletedSets = [...exercise.completed_sets];
      newCompletedSets[setIndex] = { ...newCompletedSets[setIndex], ...updates };
      updateExercise(exerciseId, { completed_sets: newCompletedSets });
    }
  };

  if (isCompleted) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Strength Session</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {exercises.map((exercise, index) => (
            <Card key={exercise.id} className="p-4">
              <h4 className="font-medium mb-4">{exercise.name || `Exercise ${index + 1}`}</h4>
              <div className="space-y-2">
                {Array.from({ length: exercise.sets }).map((_, setIndex) => {
                  const plannedWeight = exercise.weightMode === 'same' 
                    ? exercise.weight 
                    : exercise.individualWeights?.[setIndex];
                  const completedSet = exercise.completed_sets?.[setIndex];
                  
                  return (
                    <div key={setIndex} className="flex items-center gap-4 p-3 bg-muted rounded">
                      <span className="font-medium w-16">Set {setIndex + 1}:</span>
                      <div className="flex items-center gap-2">
                        <span className="text-sm">{exercise.reps} reps @ {plannedWeight || 0} {isMetric ? 'kg' : 'lbs'}</span>
                        <span className="text-muted-foreground">→</span>
                        <Input
                          type="number"
                          name={`completed-reps-${exercise.id}-${setIndex}`}
                          autoComplete="off"
                          placeholder="Reps"
                          value={completedSet?.reps || ''}
                          onChange={(e) => updateCompletedSet(exercise.id, setIndex, { reps: parseInt(e.target.value) || 0 })}
                          className="w-20 h-8"
                        />
                        <span className="text-sm">reps @</span>
                        <Input
                          type="number"
                          name={`completed-weight-${exercise.id}-${setIndex}`}
                          autoComplete="off"
                          placeholder="Weight"
                          value={completedSet?.weight || ''}
                          onChange={(e) => updateCompletedSet(exercise.id, setIndex, { weight: parseInt(e.target.value) || 0 })}
                          className="w-20 h-8"
                        />
                        <span className="text-sm">{isMetric ? 'kg' : 'lbs'}</span>
                        <Input
                          type="number"
                          name={`completed-rir-${exercise.id}-${setIndex}`}
                          autoComplete="off"
                          placeholder="0-5"
                          value={completedSet?.rir || ''}
                          onChange={(e) => updateCompletedSet(exercise.id, setIndex, { rir: parseInt(e.target.value) || 0 })}
                          className="w-16 h-8"
                        />
                      </div>
                    </div>
                  );
                })}
                <div className="text-xs text-muted-foreground mt-2">RIR = Reps left in tank</div>
              </div>
            </Card>
          ))}
          <Button type="button" className="w-full bg-black text-white hover:bg-gray-800">
            Save
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          Strength
          <Button type="button" onClick={(e) => addExercise(e)} size="sm" className="bg-black text-white hover:bg-gray-800">
            <Plus className="h-4 w-4 mr-2" />
            Add Exercise
          </Button>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {exercises.map((exercise, index) => (
          <Card key={exercise.id} className="p-4">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-2">
                <GripVertical className="h-4 w-4 text-muted-foreground" />
                <h4 className="font-medium">Exercise {index + 1}</h4>
              </div>
              <div className="flex gap-2">
                <Button type="button" onClick={(e) => duplicateExercise(exercise.id, e)} size="sm" variant="outline" className="border-black hover:bg-gray-100">
                  <Copy className="h-4 w-4" />
                </Button>
                <Button type="button" onClick={(e) => deleteExercise(exercise.id, e)} size="sm" variant="outline" className="border-black hover:bg-gray-100">
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div className="md:col-span-2">
                <Label>Exercise Name</Label>
                <Input
                  name={`exercise-name-${exercise.id}`}
                  autoComplete="off"
                  placeholder="e.g., Deadlift, Squats, Pull-ups"
                  value={exercise.name}
                  onChange={(e) => updateExercise(exercise.id, { name: e.target.value })}
                />
              </div>
              <div>
                <Label>Sets</Label>
                <Input
                  type="number"
                  min="1"
                  name={`exercise-sets-${exercise.id}`}
                  autoComplete="off"
                  value={exercise.sets}
                  onChange={(e) => updateExercise(exercise.id, { sets: parseInt(e.target.value) || 1 })}
                />
              </div>
              <div>
                <Label>Reps</Label>
                <Input
                  type="number"
                  min="1"
                  name={`exercise-reps-${exercise.id}`}
                  autoComplete="off"
                  value={exercise.reps}
                  onChange={(e) => updateExercise(exercise.id, { reps: parseInt(e.target.value) || 1 })}
                />
              </div>
            </div>

            <div className="mb-4">
              <Label>Weight Configuration</Label>
              <RadioGroup
                value={exercise.weightMode}
                onValueChange={(value: 'same' | 'individual') => {
                  updateExercise(exercise.id, { 
                    weightMode: value,
                    individualWeights: value === 'individual' ? Array(exercise.sets).fill(exercise.weight || 0) : undefined
                  });
                }}
                className="mt-2"
              >
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="same" id={`same-${exercise.id}`} />
                  <Label htmlFor={`same-${exercise.id}`}>Same weight for all sets</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="individual" id={`individual-${exercise.id}`} />
                  <Label htmlFor={`individual-${exercise.id}`}>Different weight for each set</Label>
                </div>
              </RadioGroup>
            </div>

            {exercise.weightMode === 'same' ? (
              <div className="mb-4">
                <Label>Weight ({isMetric ? 'kg' : 'lbs'})</Label>
                <Input
                  type="number"
                  name={`exercise-weight-${exercise.id}`}
                  autoComplete="off"
                  placeholder={isMetric ? '85' : '185'}
                  value={exercise.weight || ''}
                  onChange={(e) => updateExercise(exercise.id, { weight: parseInt(e.target.value) || undefined })}
                />
              </div>
            ) : (
              <div className="mb-4">
                <Label>Weight per Set ({isMetric ? 'kg' : 'lbs'})</Label>
                <div className="grid grid-cols-2 gap-2 mt-2">
                  {Array.from({ length: exercise.sets }).map((_, setIndex) => (
                    <div key={setIndex} className="flex items-center gap-2">
                      <span className="text-sm w-12">Set {setIndex + 1}:</span>
                      <Input
                        type="number"
                        name={`exercise-weight-set-${exercise.id}-${setIndex}`}
                        autoComplete="off"
                        placeholder={isMetric ? '85' : '185'}
                        value={exercise.individualWeights?.[setIndex] || ''}
                        onChange={(e) => updateIndividualWeight(exercise.id, setIndex, parseInt(e.target.value) || 0)}
                      />
                    </div>
                  ))}
                </div>
              </div>
            )}

            <div className="mb-4">
              <Label>Notes</Label>
              <Textarea
                name={`exercise-notes-${exercise.id}`}
                autoComplete="off"
                placeholder="Form cues, rest time, etc."
                value={exercise.notes || ''}
                onChange={(e) => updateExercise(exercise.id, { notes: e.target.value })}
                rows={2}
              />
            </div>
            
            <Button type="button" onClick={(e) => addExercise(e, index)} size="sm" variant="outline" className="w-full border-black hover:bg-gray-100">
              <Plus className="h-4 w-4 mr-2" />
              Add Exercise
            </Button>
          </Card>
        ))}
        
        {exercises.length === 0 && (
          <div className="text-center py-8 text-muted-foreground">
            No exercises added yet. Click "Add Exercise" to get started.
          </div>
        )}
      </CardContent>
    </Card>
  );
}

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/StrengthLogger.tsx
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Plus, Trash2 } from 'lucide-react';
import { useAppContext } from '@/contexts/AppContext';

interface LoggedSet {
  reps: number;
  weight: number;
  rir?: number;
  completed: boolean;
}

interface LoggedExercise {
  id: string;
  name: string;
  sets: LoggedSet[];
}

interface StrengthLoggerProps {
  onClose: () => void;
}

export default function StrengthLogger({ onClose }: StrengthLoggerProps) {
  const [exercises, setExercises] = useState<LoggedExercise[]>([]);
  const [currentExercise, setCurrentExercise] = useState('');
  const [showSuggestions, setShowSuggestions] = useState(false);

  // Comprehensive exercise database
  const commonExercises = [
    'Deadlift', 'Squat', 'Bench Press', 'Overhead Press', 'Barbell Row',
    'Romanian Deadlift', 'Front Squat', 'Incline Bench Press', 'Decline Bench Press',
    'Barbell Curl', 'Close Grip Bench Press', 'Bent Over Row', 'Sumo Deadlift',
    'Dumbbell Press', 'Dumbbell Row', 'Dumbbell Curls', 'Dumbbell Flyes',
    'Lateral Raises', 'Tricep Extensions', 'Hammer Curls', 'Chest Flyes',
    'Shoulder Press', 'Single Arm Row', 'Bulgarian Split Squats',
    'Push-ups', 'Pull-ups', 'Chin-ups', 'Dips', 'Planks', 'Burpees',
    'Mountain Climbers', 'Lunges', 'Squats', 'Jump Squats', 'Pike Push-ups',
    'Handstand Push-ups', 'L-Sits', 'Pistol Squats', 'Ring Dips',
    'Lat Pulldown', 'Cable Row', 'Leg Press', 'Leg Curls', 'Leg Extensions',
    'Cable Crossover', 'Tricep Pushdown', 'Face Pulls', 'Cable Curls',
    'Kettlebell Swings', 'Turkish Get-ups', 'Kettlebell Snatches',
    'Goblet Squats', 'Kettlebell Press', 'Kettlebell Rows'
  ];

  const getFilteredExercises = (searchTerm: string) => {
    return searchTerm.length > 0 
      ? commonExercises
          .filter(exercise => exercise.toLowerCase().includes(searchTerm.toLowerCase()))
          .slice(0, 8)
      : [];
  };

  const filteredExercises = getFilteredExercises(currentExercise);

  const addExercise = (exerciseName?: string) => {
    const nameToAdd = exerciseName || currentExercise.trim();
    
    if (!nameToAdd) return;
    
    const newExercise: LoggedExercise = {
      id: Date.now().toString(),
      name: nameToAdd,
      sets: []
    };
    
    setExercises([...exercises, newExercise]);
    setCurrentExercise('');
    setShowSuggestions(false);
  };

  const deleteExercise = (exerciseId: string) => {
    setExercises(exercises.filter(exercise => exercise.id !== exerciseId));
  };

  const updateSet = (exerciseId: string, setIndex: number, updates: Partial<LoggedSet>) => {
    setExercises(exercises.map(exercise => {
      if (exercise.id === exerciseId) {
        const newSets = [...exercise.sets];
        newSets[setIndex] = { ...newSets[setIndex], ...updates };
        return { ...exercise, sets: newSets };
      }
      return exercise;
    }));
  };

  const addSet = (exerciseId: string) => {
    setExercises(exercises.map(exercise => {
      if (exercise.id === exerciseId) {
        const lastSet = exercise.sets[exercise.sets.length - 1];
        const newSet: LoggedSet = {
          reps: lastSet?.reps || 0,
          weight: lastSet?.weight || 0,
          rir: undefined,
          completed: false
        };
        return { ...exercise, sets: [...exercise.sets, newSet] };
      }
      return exercise;
    }));
  };

  const saveWorkout = () => {
    const completedWorkout = {
      id: Date.now().toString(),
      name: `Strength - ${new Date().toLocaleDateString()}`,
      type: 'strength',
      date: new Date().toISOString().split('T')[0],
      description: exercises.map(ex => `${ex.name}: ${ex.sets.length} sets`).join(', '),
      duration: 0,
      completed_exercises: exercises.filter(ex => ex.sets.length > 0),
      workout_status: 'completed'
    };

    const savedWorkouts = JSON.parse(localStorage.getItem('completedWorkouts') || '[]');
    savedWorkouts.push(completedWorkout);
    localStorage.setItem('completedWorkouts', JSON.stringify(savedWorkouts));

    alert('Workout saved to completed!');
    onClose();
  };

  const handleInputChange = (value: string) => {
    setCurrentExercise(value);
    setShowSuggestions(value.length > 0);
  };

  const handleSuggestionClick = (exercise: string) => {
    addExercise(exercise);
  };

  const handleAddClick = () => {
    addExercise();
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      addExercise();
    }
    if (e.key === 'Escape') {
      setShowSuggestions(false);
    }
  };

  return (
    <>
      {/* Header - Dashboard button handled by AppLayout */}
      <div className="bg-white border-b border-gray-200 pb-4 mb-4">
        <div className="flex items-center w-full">
          <h1 className="text-xl font-semibold">Strength Log</h1>
        </div>
      </div>

      {/* Mobile-first responsive container */}
      <div className="space-y-4 w-full max-w-full overflow-hidden">
        {exercises.length === 0 && (
          <div className="text-center px-4">
            <div className="w-full max-w-sm mx-auto">
              <div className="flex flex-col gap-2 sm:flex-row">
                <Input
                  placeholder="Exercise name (type to search)"
                  value={currentExercise}
                  onChange={(e) => handleInputChange(e.target.value)}
                  onKeyDown={handleKeyDown}
                  className="h-12 w-full text-base"
                  autoFocus
                  autoComplete="off"
                  autoCorrect="off"
                  autoCapitalize="off"
                  spellCheck="false"
                  data-form-type="other"
                  style={{ fontSize: '16px' }} // Prevents zoom on iOS
                />
                <Button 
                  onClick={handleAddClick}
                  disabled={!currentExercise.trim()} 
                  className="h-12 w-full sm:w-auto min-w-[44px]"
                >
                  <Plus className="h-4 w-4" />
                </Button>
              </div>
            </div>
            
            {showSuggestions && filteredExercises.length > 0 && (
              <div className="absolute left-4 right-4 sm:left-1/2 sm:right-auto sm:transform sm:-translate-x-1/2 sm:w-80 bg-white border border-gray-200 rounded-lg shadow-lg z-10 max-h-64 overflow-y-auto mt-2">
                {filteredExercises.map((exercise, index) => (
                  <button
                    key={index}
                    onMouseDown={(e) => e.preventDefault()}
                    onClick={() => handleSuggestionClick(exercise)}
                    className="w-full text-left px-4 py-3 hover:bg-gray-50 border-b last:border-b-0 text-sm min-h-[44px]"
                  >
                    {exercise}
                  </button>
                ))}
              </div>
            )}
            
            <p className="text-gray-600 mt-4 text-sm">Add an exercise to begin your workout</p>
          </div>
        )}

        {exercises.map((exercise) => (
          <Card key={exercise.id} className="mx-0">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <CardTitle className="text-lg break-words pr-2">{exercise.name}</CardTitle>
                <Button 
                  onClick={() => deleteExercise(exercise.id)} 
                  variant="ghost" 
                  size="sm"
                  className="text-gray-600 hover:text-gray-800 min-w-[44px] min-h-[44px] flex-shrink-0"
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-3">
              {exercise.sets.map((set, setIndex) => (
                <div key={setIndex} className="p-3 sm:p-4 bg-gray-50 rounded-lg">
                  <div className="flex items-center justify-between mb-3">
                    <span className="font-medium text-base">Set {setIndex + 1}</span>
                  </div>
                  
                  {/* Mobile-optimized grid with proper spacing */}
                  <div className="grid grid-cols-1 gap-3 sm:grid-cols-3">
                    <div>
                      <label className="text-sm text-gray-600 mb-1 block">Reps</label>
                      <Input
                        type="number"
                        inputMode="numeric"
                        pattern="[0-9]*"
                        value={set.reps || ''}
                        onChange={(e) => updateSet(exercise.id, setIndex, { reps: parseInt(e.target.value) || 0 })}
                        className="h-12 text-center text-base sm:text-lg"
                        style={{ fontSize: '16px' }} // Prevents zoom on iOS
                      />
                    </div>
                    <div>
                      <label className="text-sm text-gray-600 mb-1 block">Weight (lbs)</label>
                      <Input
                        type="number"
                        inputMode="numeric"
                        pattern="[0-9]*"
                        value={set.weight || ''}
                        onChange={(e) => updateSet(exercise.id, setIndex, { weight: parseInt(e.target.value) || 0 })}
                        className="h-12 text-center text-base sm:text-lg"
                        style={{ fontSize: '16px' }} // Prevents zoom on iOS
                      />
                    </div>
                    <div>
                      <label className="text-sm text-gray-600 mb-1 block">RIR</label>
                      <Input
                        type="number"
                        inputMode="numeric"
                        pattern="[0-9]*"
                        value={set.rir || ''}
                        onChange={(e) => updateSet(exercise.id, setIndex, { rir: parseInt(e.target.value) || undefined })}
                        className="h-12 text-center text-base sm:text-lg"
                        min="0"
                        max="5"
                        style={{ fontSize: '16px' }} // Prevents zoom on iOS
                      />
                    </div>
                  </div>
                </div>
              ))}
              
              <Button 
                onClick={() => addSet(exercise.id)} 
                variant="ghost"
                size="lg" 
                className="w-full h-12 text-base text-gray-600 hover:text-gray-800 hover:bg-gray-50 min-h-[44px]"
              >
                <Plus className="h-5 w-5 mr-2" />
                Add Set
              </Button>
            </CardContent>
          </Card>
        ))}

        {exercises.length > 0 && (
          <Card className="mx-0">
            <CardContent className="pt-4">
              <div className="relative">
                <div className="flex flex-col gap-2 sm:flex-row">
                  <Input
                    placeholder="Next exercise name"
                    value={currentExercise}
                    onChange={(e) => handleInputChange(e.target.value)}
                    onKeyDown={handleKeyDown}
                    className="flex-1 h-12 text-base"
                    autoComplete="off"
                    autoCorrect="off"
                    autoCapitalize="off"
                    spellCheck="false"
                    data-form-type="other"
                    style={{ fontSize: '16px' }} // Prevents zoom on iOS
                  />
                  <Button 
                    onClick={handleAddClick}
                    disabled={!currentExercise.trim()} 
                    className="h-12 w-full sm:w-auto min-w-[44px]"
                  >
                    <Plus className="h-4 w-4" />
                  </Button>
                </div>
                
                {showSuggestions && filteredExercises.length > 0 && (
                  <div className="absolute top-14 left-0 right-0 bg-white border border-gray-200 rounded-lg shadow-lg z-10 max-h-64 overflow-y-auto">
                    {filteredExercises.map((exercise, index) => (
                      <button
                        key={index}
                        onMouseDown={(e) => e.preventDefault()}
                        onClick={() => handleSuggestionClick(exercise)}
                        className="w-full text-left px-4 py-3 hover:bg-gray-50 border-b last:border-b-0 text-sm min-h-[44px]"
                      >
                        {exercise}
                      </button>
                    ))}
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        )}

        {exercises.length > 0 && (
          <div className="pt-4 text-center sm:text-right px-4">
            <button 
              onClick={saveWorkout}
              className="text-lg font-medium text-black hover:text-gray-600 min-h-[44px] px-4 py-2"
              style={{fontFamily: 'Inter, sans-serif'}}
            >
              Completed
            </button>
          </div>
        )}
      </div>
    </>
  );
}

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/StrengthTracker.tsx
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Plus, Check, X } from 'lucide-react';

interface Exercise {
  id: string;
  name: string;
  sets: number;
  reps: number;
  weight?: number;
  completed_sets: Array<{ reps: number; weight: number; completed: boolean }>;
}

interface StrengthTrackerProps {
  exercises: Exercise[];
  onUpdateExercise: (exerciseId: string, setIndex: number, data: { reps: number; weight: number }) => void;
  onCompleteSet: (exerciseId: string, setIndex: number) => void;
}

const StrengthTracker: React.FC<StrengthTrackerProps> = ({ exercises, onUpdateExercise, onCompleteSet }) => {
  const [completedData, setCompletedData] = useState<Record<string, Array<{reps: string; weight: string}>>>({});

  const updateCompletedData = (exerciseId: string, setIndex: number, field: 'reps' | 'weight', value: string) => {
    setCompletedData(prev => {
      const exerciseData = prev[exerciseId] || Array(exercises.find(e => e.id === exerciseId)?.sets || 0).fill({reps: '', weight: ''});
      const newData = [...exerciseData];
      newData[setIndex] = { ...newData[setIndex], [field]: value };
      return { ...prev, [exerciseId]: newData };
    });
  };

  return (
    <div className="space-y-4">
      {exercises.map((exercise) => (
        <Card key={exercise.id}>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span>{exercise.name}</span>
              <Badge variant="outline">
                {exercise.completed_sets.filter(s => s.completed).length} / {exercise.sets} sets
              </Badge>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {Array.from({ length: exercise.sets }, (_, index) => {
                const completedSet = exercise.completed_sets[index];
                const exerciseCompletedData = completedData[exercise.id] || [];
                const setCompletedData = exerciseCompletedData[index] || {reps: '', weight: ''};
                
                return (
                  <div key={index} className="border rounded-lg p-4">
                    <div className="flex items-center justify-between mb-3">
                      <div className="text-sm font-medium">Set {index + 1}</div>
                      {completedSet?.completed && (
                        <Badge className="bg-green-100 text-green-800">✓ Completed</Badge>
                      )}
                    </div>
                    
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <div className="text-sm text-muted-foreground mb-1">Planned</div>
                        <div className="text-sm font-medium">
                          {exercise.reps} reps @ {exercise.weight}kg
                        </div>
                      </div>
                      <div>
                        <div className="text-sm text-muted-foreground mb-1">Completed</div>
                        <div className="flex gap-2 items-center">
                          <Input
                            type="number"
                            placeholder={exercise.reps.toString()}
                            value={setCompletedData.reps}
                            onChange={(e) => updateCompletedData(exercise.id, index, 'reps', e.target.value)}
                            className="h-8 w-16 text-center"
                          />
                          <span className="text-xs text-muted-foreground">reps @</span>
                          <Input
                            type="number"
                            step="0.5"
                            placeholder={exercise.weight?.toString() || '0'}
                            value={setCompletedData.weight}
                            onChange={(e) => updateCompletedData(exercise.id, index, 'weight', e.target.value)}
                            className="h-8 w-16 text-center"
                          />
                          <span className="text-xs text-muted-foreground">kg</span>
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
};

export default StrengthTracker;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/SwimExport.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Smartphone, Watch, Waves } from 'lucide-react';
import { SwimWorkoutData } from '@/contexts/AppContext';

interface SwimExportProps {
  workoutName: string;
  swimData: SwimWorkoutData;
}

const SwimExport: React.FC<SwimExportProps> = ({ workoutName, swimData }) => {
  const handleGarminExport = () => {
    const garminData = {
      name: workoutName,
      type: 'swim',
      distance: swimData.totalDistance,
      strokeType: swimData.strokeType,
      targetPace: swimData.targetPacePer100,
      equipment: swimData.equipmentUsed
    };
    console.log('Exporting to Garmin:', garminData);
    alert('Swim workout exported to Garmin Connect!');
  };

  const handleAppleWatchExport = () => {
    console.log('Exporting to Apple Watch:', { workoutName, swimData });
    alert('Swim workout exported to Apple Watch!');
  };

  const handleFormGogglesExport = () => {
    console.log('Exporting to Form Goggles:', { workoutName, swimData });
    alert('Swim workout exported to Form Goggles!');
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Waves className="h-5 w-5" />
          Export Swim Workout
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="p-4 bg-gray-50 rounded-lg">
          <h4 className="font-medium mb-2">{workoutName}</h4>
          <div className="space-y-1 text-sm text-gray-600">
            <p>Distance: {swimData.totalDistance}m</p>
            <p>Stroke: {swimData.strokeType}</p>
            {swimData.targetPacePer100 && <p>Target Pace: {swimData.targetPacePer100}/100m</p>}
            {swimData.equipmentUsed.length > 0 && (
              <div className="flex gap-1 flex-wrap">
                <span>Equipment:</span>
                {swimData.equipmentUsed.map(eq => (
                  <Badge key={eq} variant="outline" className="text-xs">{eq}</Badge>
                ))}
              </div>
            )}
          </div>
        </div>
        
        <div className="grid gap-3">
          <Button onClick={handleGarminExport} className="flex items-center gap-2">
            <Watch className="h-4 w-4" />
            Export to Garmin Connect
          </Button>
          
          <Button onClick={handleAppleWatchExport} variant="outline" className="flex items-center gap-2">
            <Smartphone className="h-4 w-4" />
            Export to Apple Watch
          </Button>
          
          <Button onClick={handleFormGogglesExport} variant="outline" className="flex items-center gap-2">
            <Waves className="h-4 w-4" />
            Export to Form Goggles
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default SwimExport;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/SwimIntervalBuilder.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Plus, Copy, Trash2, GripVertical } from 'lucide-react';

export interface SwimInterval {
  id: string;
  distance: string;
  targetRPE?: number;
  equipment: string;
  recoveryType: 'time' | 'distance';
  recovery: string;
  repeatCount: number;
  duration?: number;
}

interface SwimIntervalBuilderProps {
  intervals: SwimInterval[];
  onChange: (intervals: SwimInterval[]) => void;
  isMetric: boolean;
}

export default function SwimIntervalBuilder({ intervals, onChange, isMetric }: SwimIntervalBuilderProps) {
  const addInterval = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    const newInterval: SwimInterval = {
      id: Date.now().toString(),
      distance: '',
      equipment: 'None',
      recoveryType: 'time',
      recovery: '',
      repeatCount: 1,
      duration: 0
    };
    onChange([...intervals, newInterval]);
  };

  const updateInterval = (id: string, updates: Partial<SwimInterval>) => {
    onChange(intervals.map(interval =>
      interval.id === id ? { ...interval, ...updates } : interval
    ));
  };

  const duplicateInterval = (id: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    const interval = intervals.find(i => i.id === id);
    if (interval) {
      const duplicate = { ...interval, id: Date.now().toString() };
      onChange([...intervals, duplicate]);
    }
  };

  const deleteInterval = (id: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    onChange(intervals.filter(interval => interval.id !== id));
  };

  const generatePreview = (interval: SwimInterval) => {
    const rpe = interval.targetRPE ? ` @ RPE ${interval.targetRPE}` : '';
    const equipment = interval.equipment !== 'None' ? ` w/ ${interval.equipment.toLowerCase()}` : '';
    const distanceUnit = isMetric ? 'm' : 'yd';
    const recovery = interval.recoveryType === 'time' ?
      `${interval.recovery} rest` :
      `${interval.recovery}${distanceUnit} recovery`;
    
    return `${interval.repeatCount} x ${interval.distance}${distanceUnit}${rpe}${equipment} + ${recovery}`;
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          Segments
          <Button type="button" onClick={addInterval} size="sm" className="bg-gray-500 hover:bg-gray-600">
            <Plus className="h-4 w-4 mr-2" />
            Add Segment
          </Button>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {intervals.map((interval, index) => (
          <Card key={interval.id} className="p-4">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-2">
                <GripVertical className="h-4 w-4 text-muted-foreground" />
                <h4 className="font-medium">Segment {index + 1}</h4>
              </div>
              <div className="flex gap-2">
                <Button type="button" onClick={(e) => duplicateInterval(interval.id, e)} size="sm" variant="outline" className="border-gray-400 hover:bg-gray-100">
                  <Copy className="h-4 w-4" />
                </Button>
                <Button type="button" onClick={(e) => deleteInterval(interval.id, e)} size="sm" variant="outline" className="border-gray-400 hover:bg-gray-100">
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </div>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
              <div>
                <Label>Distance ({isMetric ? 'meters' : 'yards'})</Label>
                <Input
                  name={`swim-distance-${interval.id}`}
                  autoComplete="off"
                  placeholder="200"
                  value={interval.distance}
                  onChange={(e) => updateInterval(interval.id, { distance: e.target.value })}
                />
              </div>
              <div>
                <Label>Target RPE (1-10)</Label>
                <Input
                  type="number"
                  min="1"
                  max="10"
                  name={`swim-rpe-${interval.id}`}
                  autoComplete="off"
                  placeholder="5"
                  value={interval.targetRPE || ''}
                  onChange={(e) => updateInterval(interval.id, { targetRPE: parseInt(e.target.value) || undefined })}
                />
              </div>
              <div>
                <Label>Equipment</Label>
                <Select value={interval.equipment} onValueChange={(value) =>
                  updateInterval(interval.id, { equipment: value })
                }>
                  <SelectTrigger name={`swim-equipment-${interval.id}`}>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="None">None</SelectItem>
                    <SelectItem value="Fins">Fins</SelectItem>
                    <SelectItem value="Pull Buoy">Pull Buoy</SelectItem>
                    <SelectItem value="Snorkel">Snorkel</SelectItem>
                    <SelectItem value="Kickboard">Kickboard</SelectItem>
                    <SelectItem value="Paddles">Paddles</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label>Repeat Count</Label>
                <Input
                  type="number"
                  min="1"
                  name={`swim-repeat-${interval.id}`}
                  autoComplete="off"
                  value={interval.repeatCount}
                  onChange={(e) => updateInterval(interval.id, { repeatCount: parseInt(e.target.value) || 1 })}
                />
              </div>
            </div>
            
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-4">
              <div>
                <Label>Recovery Type</Label>
                <Select value={interval.recoveryType} onValueChange={(value: 'time' | 'distance') =>
                  updateInterval(interval.id, { recoveryType: value })
                }>
                  <SelectTrigger name={`swim-recovery-type-${interval.id}`}>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="time">Time</SelectItem>
                    <SelectItem value="distance">Distance</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label>
                  {interval.recoveryType === 'time'
                    ? 'Recovery Time (mm:ss)'
                    : `Recovery Distance (${isMetric ? 'm' : 'yd'})`
                  }
                </Label>
                <Input
                  name={`swim-recovery-${interval.id}`}
                  autoComplete="off"
                  placeholder={interval.recoveryType === 'time' ? '1:00' : '50'}
                  value={interval.recovery}
                  onChange={(e) => updateInterval(interval.id, { recovery: e.target.value })}
                />
              </div>
            </div>
            
            <div className="bg-muted p-3 rounded text-sm">
              <strong>Preview:</strong> {generatePreview(interval)}
            </div>
          </Card>
        ))}
        
        {intervals.length === 0 && (
          <div className="text-center py-8 text-muted-foreground">
            No segments added yet. Click "Add Segment" to get started.
          </div>
        )}
      </CardContent>
    </Card>
  );
}

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/SwimWorkoutForm.tsx
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { SwimWorkoutData } from '@/contexts/AppContext';
import { Waves } from 'lucide-react';

interface SwimWorkoutFormProps {
  swimData: SwimWorkoutData;
  onChange: (data: SwimWorkoutData) => void;
}

const STROKE_TYPES = [
  'Freestyle',
  'Backstroke', 
  'Breaststroke',
  'Butterfly',
  'Kick-Only'
] as const;

const EQUIPMENT_OPTIONS = [
  'Fins',
  'Snorkel',
  'Pull Buoy',
  'Paddles',
  'Kickboard'
];

const SwimWorkoutForm: React.FC<SwimWorkoutFormProps> = ({ swimData, onChange }) => {
  const handleEquipmentChange = (equipment: string, checked: boolean) => {
    const newEquipment = checked 
      ? [...swimData.equipmentUsed, equipment]
      : swimData.equipmentUsed.filter(e => e !== equipment);
    
    onChange({ ...swimData, equipmentUsed: newEquipment });
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Waves className="h-5 w-5" />
          Swim Workout Details
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <Label htmlFor="swim-total-distance">Total Distance (meters)</Label>
          <Input
            id="swim-total-distance"
            name="swim-total-distance"
            type="number"
            autoComplete="off"
            value={swimData.totalDistance}
            onChange={(e) => onChange({ 
              ...swimData, 
              totalDistance: parseInt(e.target.value) || 0 
            })}
            placeholder="1500"
            min="0"
          />
        </div>

        <div>
          <Label htmlFor="swim-target-pace">Target Pace per 100m</Label>
          <Input
            id="swim-target-pace"
            name="swim-target-pace"
            autoComplete="off"
            value={swimData.targetPacePer100}
            onChange={(e) => onChange({ 
              ...swimData, 
              targetPacePer100: e.target.value 
            })}
            placeholder="1:30"
          />
        </div>

        <div>
          <Label htmlFor="swim-stroke-type">Stroke Type</Label>
          <Select 
            value={swimData.strokeType} 
            onValueChange={(value: typeof STROKE_TYPES[number]) => 
              onChange({ ...swimData, strokeType: value })
            }
          >
            <SelectTrigger id="swim-stroke-type" name="swim-stroke-type">
              <SelectValue placeholder="Select stroke type" />
            </SelectTrigger>
            <SelectContent>
              {STROKE_TYPES.map(stroke => (
                <SelectItem key={stroke} value={stroke}>
                  {stroke}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        <div>
          <Label>Equipment Used</Label>
          <div className="grid grid-cols-2 gap-2 mt-2">
            {EQUIPMENT_OPTIONS.map(equipment => (
              <div key={equipment} className="flex items-center space-x-2">
                <Checkbox
                  id={equipment}
                  checked={swimData.equipmentUsed.includes(equipment)}
                  onCheckedChange={(checked) => 
                    handleEquipmentChange(equipment, checked as boolean)
                  }
                />
                <Label htmlFor={equipment} className="text-sm">
                  {equipment}
                </Label>
              </div>
            ))}
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default SwimWorkoutForm;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/TodaysEffort.tsx
import React, { useState, useEffect } from 'react';
import { useAppContext } from '@/contexts/AppContext';
import { Button } from '@/components/ui/button';
import { Plus, ChevronDown, ChevronRight, ChevronLeft, Clock } from 'lucide-react';

interface TodaysEffortProps {
  selectedDate?: string;
  onAddEffort: () => void;
  onViewCompleted: () => void;
  onEditEffort?: (workout: any) => void;
}

const TodaysEffort: React.FC<TodaysEffortProps> = ({ 
  selectedDate, 
  onAddEffort, 
  onViewCompleted, 
  onEditEffort 
}) => {
  const { useImperial, workouts, loading } = useAppContext();
  const [displayWorkouts, setDisplayWorkouts] = useState<any[]>([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [showIntervals, setShowIntervals] = useState(false);

  const today = new Date().toLocaleDateString('en-CA');
  const activeDate = selectedDate || today;

  // FIXED: Consistent date formatting with timezone fix
  const formatDateDisplay = (dateStr: string) => {
    const [year, month, day] = dateStr.split('-').map(Number);
    const date = new Date(year, month - 1, day);
    
    return `${date.toLocaleDateString('en-US', { 
      weekday: 'short',
      month: 'short', 
      day: 'numeric' 
    })} effort`.replace(',', '');
  };

  const loadWorkoutsForDate = () => {
    if (workouts && workouts.length > 0) {
      const dateWorkouts = workouts.filter((w: any) => w.date === activeDate);
      setDisplayWorkouts(dateWorkouts);
      setCurrentIndex(0);
    } else {
      setDisplayWorkouts([]);
      setCurrentIndex(0);
    }
  };

  useEffect(() => {
    loadWorkoutsForDate();
  }, [workouts, activeDate]);

  const currentWorkout = displayWorkouts[currentIndex] || null;
  const totalWorkouts = displayWorkouts.length;

  const formatWorkoutType = (type: string) => {
    return type.charAt(0).toUpperCase() + type.slice(1);
  };

  const formatTime = (seconds: number) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;

    if (hours > 0) {
      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
    return `${minutes}:${secs.toString().padStart(2, '0')}`;
  };

  const formatIntervals = () => {
    if (!currentWorkout) return null;

    if (currentWorkout.type === 'strength' && currentWorkout.strength_exercises) {
      return currentWorkout.strength_exercises.map((ex: any, idx: number) => (
        <div key={idx} className="text-xs md:text-sm text-gray-600 ml-3 md:ml-4 leading-snug">
          {ex.name}: {ex.sets}x{ex.reps} @ {ex.weight} {useImperial ? 'lbs' : 'kg'}
        </div>
      ));
    }

    if (currentWorkout.intervals) {
      return currentWorkout.intervals.map((interval: any, idx: number) => (
        <div key={idx} className="text-xs md:text-sm text-gray-600 ml-3 md:ml-4 leading-snug">
          {interval.time && `${interval.time}`}
          {interval.distance && ` ${interval.distance} ${useImperial ? 'mi' : 'km'}`}
          {interval.effortLabel && ` @ ${interval.effortLabel}`}
          {!interval.effortLabel && interval.powerTarget && ` @ ${interval.powerTarget}`}
          {!interval.effortLabel && !interval.powerTarget && interval.paceTarget && ` @ ${interval.paceTarget}`}
          {interval.rpeTarget && `, RPE ${interval.rpeTarget}`}
        </div>
      ));
    }

    return <p className="text-xs md:text-sm text-gray-500 ml-3 md:ml-4">No segments</p>;
  };

  if (loading) {
    return (
      <div className="w-full bg-white p-2 sm:p-3" style={{fontFamily: 'Inter, sans-serif'}}>
        <div className="pb-2 md:pb-3">
          <h2 className="text-base md:text-lg font-normal text-black flex items-center gap-2">
            {formatDateDisplay(activeDate)}
            {activeDate !== today && workouts && workouts.length > 0 && (
              (() => {
                const todaysWorkouts = workouts.filter((w: any) => w.date === today);
                if (todaysWorkouts.length > 0) {
                  const types = [...new Set(todaysWorkouts.map((w: any) => w.type))];
                  return (
                    <span className="text-xs md:text-sm text-gray-500 font-normal">
                      · today: {types.join(' ')}
                    </span>
                  );
                }
                return null;
              })()
            )}
          </h2>
        </div>
        <div className="py-3 md:py-4">
          <div className="text-center py-3 md:py-4">
            <p className="text-[#666666] text-sm">Loading...</p>
          </div>
        </div>
      </div>
    );
  }

  if (!currentWorkout) {
    return (
      <div className="w-full bg-white p-4 sm:p-6" style={{fontFamily: 'Inter, sans-serif'}}>
        <div className="pb-2 md:pb-3">
          <h2 className="text-base md:text-lg font-normal text-black flex items-center gap-2">
            {formatDateDisplay(activeDate)}
            {activeDate !== today && workouts && workouts.length > 0 && (
              (() => {
                const todaysWorkouts = workouts.filter((w: any) => w.date === today);
                if (todaysWorkouts.length > 0) {
                  const types = [...new Set(todaysWorkouts.map((w: any) => w.type))];
                  return (
                    <span className="text-xs md:text-sm text-gray-500 font-normal">
                      · today: {types.join(' ')}
                    </span>
                  );
                }
                return null;
              })()
            )}
          </h2>
        </div>
        <div className="py-3 md:py-4">
          <div className="text-center py-3 md:py-4">
            <p className="text-[#666666] mb-3 text-sm">
              No effort scheduled for this date
            </p>
            <Button 
              onClick={() => {
                console.log('🆕 Add effort clicked for date:', activeDate);
                onAddEffort();
              }} 
              size="sm" 
              className="gap-2 bg-gray-600 text-white hover:bg-gray-700 border-gray-600 hover:border-gray-700 rounded-md transition-all duration-150 hover:transform hover:-translate-y-0.5 hover:shadow-md font-medium text-sm px-4 py-2 min-h-[36px]"
            >
              <Plus className="h-4 w-4" />
              Add effort
            </Button>
          </div>
        </div>
      </div>
    );
  }

  const intervalCount = currentWorkout.type === 'strength'
    ? (currentWorkout.strength_exercises?.length || 0)
    : (currentWorkout.intervals?.length || 0);

  return (
    <div
      className="w-full bg-white p-4 sm:p-6 cursor-pointer hover:bg-gray-50 transition-colors"
      style={{fontFamily: 'Inter, sans-serif'}}
      onClick={() => {
        console.log('🔧 TodaysEffort clicked:', currentWorkout);
        onEditEffort && onEditEffort(currentWorkout);
      }}
    >
      <div className="pb-2 md:pb-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3 md:gap-4">
            <h2 className="text-base md:text-lg font-normal text-black flex items-center gap-2">
              {formatDateDisplay(activeDate)}
              {activeDate !== today && workouts && workouts.length > 0 && (
                (() => {
                  const todaysWorkouts = workouts.filter((w: any) => w.date === today);
                  if (todaysWorkouts.length > 0) {
                    const types = [...new Set(todaysWorkouts.map((w: any) => w.type))];
                    return (
                      <span className="text-xs md:text-sm text-gray-500 font-normal">
                        · today: {types.join(' ')}
                      </span>
                    );
                  }
                  return null;
                })()
              )}
            </h2>
            {totalWorkouts > 1 && (
              <div className="flex items-center gap-1 md:gap-2">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    setCurrentIndex(prev => prev > 0 ? prev - 1 : totalWorkouts - 1);
                  }}
                  className="p-1 hover:text-black transition-colors text-gray-400 hover:bg-gray-50 rounded min-w-[32px] min-h-[32px] flex items-center justify-center"
                >
                  <ChevronLeft className="h-4 w-4" />
                </button>
                <span className="text-xs md:text-sm font-normal text-gray-500 px-1 md:px-2">
                  {currentIndex + 1} of {totalWorkouts}
                </span>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    setCurrentIndex(prev => prev < totalWorkouts - 1 ? prev + 1 : 0);
                  }}
                  className="p-1 hover:text-black transition-colors text-gray-400 hover:bg-gray-50 rounded min-w-[32px] min-h-[32px] flex items-center justify-center"
                >
                  <ChevronRight className="h-4 w-4" />
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
      <div className="space-y-3 md:space-y-4 py-3 md:py-4">
        {/* Workout Title and Type */}
        <div className="space-y-1">
          <h3 className="font-medium text-base md:text-lg leading-tight">{currentWorkout.name || formatWorkoutType(currentWorkout.type)}</h3>
          <p className="text-xs md:text-sm text-gray-600">{formatWorkoutType(currentWorkout.type)}</p>
        </div>

        {/* Total Time Display */}
        {currentWorkout.duration && currentWorkout.duration > 0 && (
          <div className="flex items-center gap-2 text-xs md:text-sm text-gray-600">
            <Clock className="h-3 w-3 md:h-4 md:w-4" />
            <span className="font-medium">Total Time:</span>
            <span>{formatTime(currentWorkout.duration)}</span>
          </div>
        )}

        {/* Collapsible Segments */}
        {intervalCount > 0 && (
          <div>
            <button
              onClick={(e) => {
                e.stopPropagation();
                setShowIntervals(!showIntervals);
              }}
              className="flex items-center gap-2 text-xs md:text-sm font-medium hover:text-gray-600 transition-colors"
            >
              {showIntervals ? <ChevronDown className="h-3 w-3 md:h-4 md:w-4" /> : <ChevronRight className="h-3 w-3 md:h-4 md:w-4" />}
              {currentWorkout.type === 'strength' ? 'Exercises' : 'Segments'} ({intervalCount})
            </button>
            {showIntervals && (
              <div className="mt-1 md:mt-2 space-y-1">
                {formatIntervals()}
              </div>
            )}
          </div>
        )}

        {/* Notes */}
        {currentWorkout.userComments && (
          <div className="space-y-1">
            <p className="text-xs md:text-sm font-medium">Notes</p>
            <p className="text-xs md:text-sm text-gray-600 leading-relaxed">{currentWorkout.userComments}</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default TodaysEffort;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/WorkoutBuilder.tsx
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { ArrowLeft, Save, Clock, Trash2, Check } from 'lucide-react';
import RunIntervalBuilder, { RunInterval } from './RunIntervalBuilder';
import RideIntervalBuilder, { RideInterval } from './RideIntervalBuilder';
import SwimIntervalBuilder, { SwimInterval } from './SwimIntervalBuilder';
import StrengthExerciseBuilder, { StrengthExercise } from './StrengthExerciseBuilder';
import { useAppContext } from '@/contexts/AppContext';

interface WorkoutBuilderProps {
  onClose: () => void;
  initialType?: string;
  existingWorkout?: any;
  initialDate?: string;
}

export default function WorkoutBuilder({ onClose, initialType, existingWorkout, initialDate }: WorkoutBuilderProps) {
  const { addWorkout, updateWorkout, deleteWorkout } = useAppContext();
  const [showCompleted, setShowCompleted] = useState(false);
  const [showSaveOptions, setShowSaveOptions] = useState(false);
  const [showNotes, setShowNotes] = useState(false);
  
  const [currentWorkout, setCurrentWorkout] = useState<any>(existingWorkout || null);

  const getLocalDateString = () => {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  };

  const getInitialDate = () => {
    if (existingWorkout?.date) {
      return existingWorkout.date;
    }
    if (initialDate) {
      return initialDate;
    }
    return getLocalDateString();
  };

  const [formData, setFormData] = useState({
    name: '',
    type: (initialType as 'run' | 'ride' | 'strength' | 'swim') || 'run',
    date: getInitialDate(),
    description: '',
    userComments: '',
    completedManually: false
  });

  const [runIntervals, setRunIntervals] = useState<RunInterval[]>([]);
  const [rideIntervals, setRideIntervals] = useState<RideInterval[]>([]);
  const [swimIntervals, setSwimIntervals] = useState<SwimInterval[]>([]);
  const [strengthExercises, setStrengthExercises] = useState<StrengthExercise[]>([]);
  const [isMetric, setIsMetric] = useState(false);

  useEffect(() => {
    console.log('🔄 WorkoutBuilder initialized with:', { existingWorkout, initialType, initialDate });
    
    if (existingWorkout) {
      console.log('📝 Loading existing workout into form');
      setCurrentWorkout(existingWorkout);
      
      setFormData({
        name: existingWorkout.name || '',
        type: existingWorkout.type,
        date: existingWorkout.date,
        description: existingWorkout.description || '',
        userComments: existingWorkout.userComments || '',
        completedManually: existingWorkout.completedManually || false
      });

      if (existingWorkout.type === 'run' && existingWorkout.intervals) {
        setRunIntervals(existingWorkout.intervals);
      } else if (existingWorkout.type === 'ride' && existingWorkout.intervals) {
        setRideIntervals(existingWorkout.intervals);
      } else if (existingWorkout.type === 'swim' && existingWorkout.intervals) {
        setSwimIntervals(existingWorkout.intervals);
      } else if (existingWorkout.type === 'strength' && existingWorkout.strength_exercises) {
        setStrengthExercises(existingWorkout.strength_exercises);
      }
    } else {
      console.log('✨ Creating new workout for date:', initialDate || 'today');
      setCurrentWorkout(null);
      
      if (initialDate) {
        setFormData(prev => ({ ...prev, date: initialDate }));
      }
    }
  }, [existingWorkout, initialDate]);

  useEffect(() => {
    if (initialType) {
      setFormData(prev => ({ ...prev, type: initialType as any }));
    }
  }, [initialType]);

  useEffect(() => {
    const autoDescription = generateWorkoutDescription();
    if (autoDescription && autoDescription !== formData.description) {
      setFormData(prev => ({ ...prev, description: autoDescription }));
    }
  }, [runIntervals, rideIntervals, swimIntervals, strengthExercises]);

  const calculateTotalTime = () => {
    let total = 0;
    switch (formData.type) {
      case 'run':
        total = runIntervals.reduce((sum, interval) => {
          if (interval.isRepeatBlock) {
            return sum + (interval.duration || 0);
          }
          return sum + (interval.duration || 0) * (interval.repeatCount || 1);
        }, 0);
        break;
      case 'ride':
        total = rideIntervals.reduce((sum, interval) => {
          if (interval.isRepeatBlock) {
            return sum + (interval.duration || 0);
          }
          return sum + (interval.duration || 0) * (interval.repeatCount || 1);
        }, 0);
        break;
      case 'swim':
        total = swimIntervals.reduce((sum, interval) => {
          if (interval.isRepeatBlock) {
            return sum + (interval.duration || 0);
          }
          return sum + (interval.duration || 0) * (interval.repeatCount || 1);
        }, 0);
        break;
    }
    return total;
  };

  const formatTime = (seconds: number) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;

    if (hours > 0) {
      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
    return `${minutes}:${secs.toString().padStart(2, '0')}`;
  };

  const handleTrashClick = async (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();

    if (!confirm('Clear all workout data and start fresh?')) return;

    // Always clear everything and stay in builder
    setFormData({
      name: '',
      type: 'run',
      date: initialDate || getLocalDateString(),
      description: '',
      userComments: '',
      completedManually: false
    });

    setRunIntervals([]);
    setRideIntervals([]);
    setSwimIntervals([]);
    setStrengthExercises([]);
    setShowNotes(false);
    setCurrentWorkout(null);
  };

  const generateWorkoutDescription = () => {
    const parts: string[] = [];
    switch (formData.type) {
      case 'run':
        runIntervals.forEach((interval) => {
          if (!interval.time && !interval.distance) return;

          let segmentDesc = '';

          if (interval.isRepeatBlock && interval.time) {
            segmentDesc = interval.time;
          } else {
            if (interval.time) segmentDesc += interval.time;
            if (interval.distance) segmentDesc += ` (${interval.distance}${isMetric ? 'km' : 'mi'})`;

            if (interval.effortLabel && interval.effortLabel !== `Segment ${runIntervals.indexOf(interval) + 1}`) {
              segmentDesc += ` @ ${interval.effortLabel}`;
            } else if (interval.paceTarget) {
              segmentDesc += ` @ ${interval.paceTarget}`;
            } else if (interval.bpmTarget) {
              segmentDesc += ` @ ${interval.bpmTarget}`;
            } else if (interval.rpeTarget) {
              segmentDesc += ` @ RPE ${interval.rpeTarget}`;
            }

            if (interval.repeat && interval.repeatCount && interval.repeatCount > 1) {
              segmentDesc = `${interval.repeatCount}x(${segmentDesc})`;
            }
          }

          if (segmentDesc.trim()) parts.push(segmentDesc.trim());
        });
        break;
      case 'ride':
        rideIntervals.forEach((interval) => {
          if (interval.time || interval.distance) {
            let segmentDesc = '';

            if (interval.isRepeatBlock || (interval.time && (interval.time.includes('[') || interval.time.includes('x(')))) {
              segmentDesc = interval.time || '';
            } else {
              if (interval.time) segmentDesc += interval.time;
              if (interval.distance) segmentDesc += ` (${interval.distance}${isMetric ? 'km' : 'mi'})`;
              if (interval.powerTarget) segmentDesc += ` @ ${interval.powerTarget}`;
              if (interval.speedTarget) segmentDesc += ` @ ${interval.speedTarget}`;
              if (interval.rpeTarget) segmentDesc += ` RPE ${interval.rpeTarget}`;

              if (interval.repeat && interval.repeatCount && interval.repeatCount > 1) {
                segmentDesc = `${interval.repeatCount}x(${segmentDesc})`;
              }
            }

            if (segmentDesc.trim()) parts.push(segmentDesc);
          }
        });
        break;
      case 'swim':
        swimIntervals.forEach((interval) => {
          if (interval.distance) {
            let segmentDesc = '';

            if (interval.repeatCount > 1) {
              segmentDesc = `${interval.repeatCount}x${interval.distance}${isMetric ? 'm' : 'yd'}`;
            } else {
              segmentDesc = `${interval.distance}${isMetric ? 'm' : 'yd'}`;
            }

            if (interval.targetRPE) segmentDesc += ` @ RPE ${interval.targetRPE}`;
            if (interval.equipment && interval.equipment !== 'None') {
              segmentDesc += ` w/${interval.equipment.toLowerCase()}`;
            }

            if (segmentDesc.trim()) parts.push(segmentDesc);
          }
        });
        break;
      case 'strength':
        strengthExercises.forEach((exercise) => {
          if (exercise.name) {
            let exerciseDesc = exercise.name;
            if (exercise.sets && exercise.reps) {
              exerciseDesc += ` ${exercise.sets}x${exercise.reps}`;
            }
            if (exercise.weight) {
              exerciseDesc += ` @ ${exercise.weight}${isMetric ? 'kg' : 'lbs'}`;
            }
            parts.push(exerciseDesc);
          }
        });
        break;
    }
    return parts.length > 0 ? parts.join(' + ') : '';
  };

  const handleSaveAsRoutine = async () => {
    console.log('💾 Saving as routine...');
    // TODO: Implement routine saving logic
    // This would save the workout structure as a reusable template
    alert('Save as routine feature coming soon!');
  };

  const handleSave = async (navigateAfterSave: boolean = false) => {
    console.log('🚀 Save function called!');
    console.log('📊 Form data:', formData);
    console.log('🏃 Run intervals:', runIntervals);
    console.log('🚴 Ride intervals:', rideIntervals);
    console.log('🏊 Swim intervals:', swimIntervals);
    console.log('💪 Strength exercises:', strengthExercises);
    console.log('📝 Current workout:', currentWorkout);

    try {
      const workoutTitle = formData.name.trim() || 
        `${formData.type.charAt(0).toUpperCase() + formData.type.slice(1)} - ${new Date(formData.date).toLocaleDateString()}`;
      const finalDescription = formData.description.trim() || generateWorkoutDescription();

      const workoutData = {
        ...formData,
        name: workoutTitle,
        description: formData.description || generateWorkoutDescription(),
        duration: calculateTotalTime(),
        intervals: formData.type === 'run' ? runIntervals :
                  formData.type === 'ride' ? rideIntervals :
                  formData.type === 'swim' ? swimIntervals : undefined,
        strength_exercises: formData.type === 'strength' ? strengthExercises : undefined,
        workout_status: 'planned'
      };

      console.log('💾 Final workout data to save:', workoutData);
      console.log('🔄 About to call addWorkout...');

      let savedWorkout;

      if (currentWorkout && currentWorkout.id) {
        console.log('📝 UPDATING existing workout with ID:', currentWorkout.id);
        savedWorkout = await updateWorkout(currentWorkout.id, workoutData);
      } else {
        console.log('➕ CREATING new workout');
        savedWorkout = await addWorkout(workoutData);
      }

      console.log('✅ Workout saved successfully! Result:', savedWorkout);

      setCurrentWorkout(savedWorkout);

      setShowSaveOptions(true);
      setTimeout(() => setShowSaveOptions(false), 3000);

      if (navigateAfterSave) {
        console.log('🔄 Navigating after save...');
        onClose();
      } else {
        console.log('🔄 Staying in builder for continued editing...');
      }
    } catch (error) {
      console.error('Error saving workout:', error);
      alert('Error saving workout. Please try again.');
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { 
      weekday: 'short', 
      month: 'short', 
      day: 'numeric' 
    }).replace(',', '');
  };

  return (
    <div className="min-h-screen bg-white">
      {/* Save Success Banner */}
      {showSaveOptions && (
        <div className="fixed top-4 left-1/2 transform -translate-x-1/2 bg-gray-100 text-gray-700 px-6 py-3 border border-gray-200 z-50 flex items-center gap-4">
          <Check className="h-5 w-5" />
          <span>{currentWorkout ? 'effort Updated' : 'effort saved'}</span>
        </div>
      )}

      {/* Clean Header - matches calendar style */}
      <header className="bg-white border-b border-[#E5E5E5]">
        <div className="max-w-7xl mx-auto px-6">
          <div className="flex justify-end items-center h-8">
            <div className="flex items-center gap-3">
              <span className="text-xs text-gray-600">Imperial</span>
              <Switch
                checked={isMetric}
                onCheckedChange={setIsMetric}
              />
              <span className="text-xs text-gray-600">Metric</span>
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-6 py-2">
        {/* Back Button */}
        <div className="mb-4">
          <button 
            onClick={onClose}
            className="flex items-center text-black hover:text-gray-600 text-base font-medium transition-colors"
            style={{fontFamily: 'Inter, sans-serif'}}
          >
            <ArrowLeft className="h-5 w-5 mr-2" />
            Back
          </button>
        </div>

        {/* Tab Toggle - simplified */}
        <div className="flex gap-1 mb-4">
          <button
            onClick={() => setShowCompleted(false)}
            className={`px-4 py-2 text-sm font-medium transition-colors ${
              !showCompleted 
                ? 'text-black border-b-2 border-black' 
                : 'text-gray-500 hover:text-gray-700'
            }`}
            style={{fontFamily: 'Inter, sans-serif'}}
          >
            Build effort
          </button>
          <button
            onClick={() => setShowCompleted(true)}
            className={`px-4 py-2 text-sm font-medium transition-colors ${
              showCompleted 
                ? 'text-black border-b-2 border-black' 
                : 'text-gray-500 hover:text-gray-700'
            }`}
            style={{fontFamily: 'Inter, sans-serif'}}
          >
            Completed
          </button>
        </div>

        {!showCompleted ? (
          <div className="space-y-4">
            {/* Simplified Form - cleaner layout */}
            <div className="border border-[#E5E5E5] p-3" style={{borderRadius: 0}}>
              <div className="flex justify-end mb-2">
                <button
                  onClick={handleTrashClick}
                  className="text-gray-400 hover:text-red-500 transition-colors"
                >
                  <Trash2 className="h-4 w-4" />
                </button>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mb-3">
                <div className="md:col-span-2">
                  <Label className="text-sm font-medium text-gray-700 mb-2 block">Effort title</Label>
                  <Input
                    value={formData.name}
                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                    placeholder=""
                    className="border-gray-300 min-h-[44px]"
                    style={{borderRadius: 0, fontFamily: 'Inter, sans-serif'}}
                  />
                </div>
                <div>
                  <Label className="text-sm font-medium text-gray-700 mb-2 block">Date</Label>
                  <Input
                    type="date"
                    value={formData.date}
                    onChange={(e) => setFormData(prev => ({ ...prev, date: e.target.value }))}
                    className="border-gray-300 min-h-[44px]"
                    style={{borderRadius: 0, fontFamily: 'Inter, sans-serif'}}
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mb-3">
                <div>
                  <Label className="text-sm font-medium text-gray-700 mb-2 block">Discipline</Label>
                  <Select value={formData.type} onValueChange={(value: 'run' | 'ride' | 'strength' | 'swim') =>
                    setFormData(prev => ({ ...prev, type: value }))
                  }>
                    <SelectTrigger className="border-gray-300 min-h-[44px]" style={{borderRadius: 0, fontFamily: 'Inter, sans-serif'}}>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="run">Run</SelectItem>
                      <SelectItem value="ride">Ride</SelectItem>
                      <SelectItem value="swim">Swim</SelectItem>
                      <SelectItem value="strength">Strength</SelectItem>
                    </SelectContent>
                  </Select>
                  
                  {/* Notes right under Discipline */}
                  <div className="mt-2">
                    <button
                      type="button"
                      onClick={() => setShowNotes(!showNotes)}
                      className="flex items-center gap-1 text-xs font-medium text-gray-700 hover:text-gray-900"
                    >
                      <span className={`transform transition-transform ${showNotes ? 'rotate-90' : ''}`}>
                        ▶
                      </span>
                      Notes
                    </button>

                    {showNotes && (
                      <Textarea
                        value={formData.userComments}
                        onChange={(e) => setFormData(prev => ({ ...prev, userComments: e.target.value }))}
                        placeholder=""
                        rows={2}
                        className="border-gray-300 min-h-[44px] mt-1"
                        style={{borderRadius: 0, fontFamily: 'Inter, sans-serif'}}
                      />
                    )}
                  </div>
                </div>
                <div>
                  <Label className="text-sm font-medium text-gray-700 mb-2 block">Description</Label>
                  <div className="relative">
                    <Textarea
                      value={formData.description}
                      onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                      placeholder=""
                      rows={3}
                      className="border-gray-300 min-h-[44px] pb-8"
                      style={{borderRadius: 0, fontFamily: 'Inter, sans-serif'}}
                    />
                    <div className="absolute bottom-2 right-3 flex items-center gap-2 text-gray-500 text-sm">
                      <Clock className="h-3 w-3" />
                      <span>Total Time: {formatTime(calculateTotalTime())}</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Structure Section - clean container */}
            <div className="border border-[#E5E5E5] p-3" style={{borderRadius: 0}}>
              <h3 className="text-lg font-medium text-black mb-3" style={{fontFamily: 'Inter, sans-serif'}}>Structure</h3>
              
              {formData.type === 'run' && (
                <RunIntervalBuilder intervals={runIntervals} onChange={setRunIntervals} isMetric={isMetric} />
              )}
              {formData.type === 'ride' && (
                <RideIntervalBuilder intervals={rideIntervals} onChange={setRideIntervals} isMetric={isMetric} />
              )}
              {formData.type === 'swim' && (
                <SwimIntervalBuilder intervals={swimIntervals} onChange={setSwimIntervals} isMetric={isMetric} />
              )}
              {formData.type === 'strength' && (
                <StrengthExerciseBuilder exercises={strengthExercises} onChange={setStrengthExercises} isMetric={isMetric} />
              )}
            </div>

            {/* Auto-generated Preview - if content exists */}
            {(runIntervals.length > 0 || rideIntervals.length > 0 || swimIntervals.length > 0 || strengthExercises.length > 0) && (
              <div className="bg-gray-50 p-3 border border-[#E5E5E5]" style={{borderRadius: 0}}>
                <p className="text-sm text-gray-900" style={{fontFamily: 'Inter, sans-serif'}}>
                  {generateWorkoutDescription() || 'Add segments to see workout summary...'}
                </p>
                {calculateTotalTime() > 0 && (
                  <p className="text-xs text-gray-600 mt-1" style={{fontFamily: 'Inter, sans-serif'}}>
                    Total Time: {formatTime(calculateTotalTime())}
                  </p>
                )}
              </div>
            )}
          </div>
        ) : (
          /* Completed Tab Content - simplified */
          <div className="border border-[#E5E5E5] p-3" style={{borderRadius: 0}}>
            {formData.type === 'strength' ? (
              <div>
                <h3 className="text-lg font-medium text-black mb-3" style={{fontFamily: 'Inter, sans-serif'}}>Log Completed Strength Training</h3>
                <StrengthExerciseBuilder
                  exercises={strengthExercises}
                  onChange={setStrengthExercises}
                  isMetric={isMetric}
                  isCompleted={true}
                />
              </div>
            ) : (
              <div>
                <h3 className="text-lg font-medium text-black mb-3" style={{fontFamily: 'Inter, sans-serif'}}>Completed Session Data</h3>
                <div className="text-center py-12">
                  <p className="text-gray-500 mb-2">No completed session data available</p>
                  <p className="text-sm text-gray-400">Connect your device or manually mark as completed</p>
                </div>
              </div>
            )}
          </div>
        )}

        {/* Enhanced Save Button with Hover */}
        <div className="flex justify-end mt-6">
          <div className="relative group">
            <button
              onClick={() => handleSave(false)}
              className="px-8 py-4 text-black hover:text-gray-600 text-lg font-medium transition-colors"
              style={{fontFamily: 'Inter, sans-serif'}}
            >
              Save
            </button>
            
            {/* Hover reveal for "Save as routine" - light gray and clickable */}
            <div className="absolute bottom-full right-0 mb-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none group-hover:pointer-events-auto">
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  handleSaveAsRoutine();
                }}
                className="whitespace-nowrap px-4 py-2 bg-gray-100 text-gray-700 text-sm border border-gray-200 hover:bg-gray-200 transition-colors pointer-events-auto"
                style={{fontFamily: 'Inter, sans-serif'}}
              >
                Save as routine
              </button>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/WorkoutCalendar.tsx
import React, { useState } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { useAppContext } from '@/contexts/AppContext';
import NewEffortDropdown from './NewEffortDropdown';
import LogEffortDropdown from './LogEffortDropdown';
import RoutinesDropdown from './RoutinesDropdown';
import AllEffortsDropdown from './AllEffortsDropdown';

const DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
const MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

const DISCIPLINE_COLORS = {
  run: 'bg-red-500',
  ride: 'bg-green-500', 
  swim: 'bg-blue-500',
  strength: 'bg-orange-500'
};

interface WorkoutCalendarProps {
  onAddEffort: () => void;
  onSelectType: (type: string) => void;
  onSelectWorkout: (workout: any) => void;
  onViewCompleted: () => void;
  onEditEffort: (workout: any) => void;
  onDateSelect?: (dateString: string) => void;
  onSelectRoutine?: (type: string) => void;
}

export default function WorkoutCalendar({ 
  onAddEffort, 
  onSelectType, 
  onSelectWorkout, 
  onViewCompleted,
  onEditEffort,
  onDateSelect,
  onSelectRoutine
}: WorkoutCalendarProps) {
  const { workouts } = useAppContext();
  const [currentDate, setCurrentDate] = useState(new Date());


  const navigateMonth = (direction: number) => {
    setCurrentDate(prev => {
      const newDate = new Date(prev);
      newDate.setMonth(prev.getMonth() + direction);
      return newDate;
    });
  };

  const getDaysInMonth = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();
    const startingDayOfWeek = firstDay.getDay();
    
    const days = [];
    
    for (let i = 0; i < startingDayOfWeek; i++) {
      days.push(null);
    }
    
    for (let day = 1; day <= daysInMonth; day++) {
      days.push(day);
    }
    
    return days;
  };

  const getWorkoutsForDate = (day: number) => {
    if (!day) return [];
    const year = currentDate.getFullYear();
    const month = String(currentDate.getMonth() + 1).padStart(2, '0');
    const dayStr = String(day).padStart(2, '0');
    const dateStr = `${year}-${month}-${dayStr}`;
    return workouts.filter(w => w.date === dateStr);
  };

  const handleDateClick = (day: number) => {
    if (!day) return;
    
    const year = currentDate.getFullYear();
    const month = String(currentDate.getMonth() + 1).padStart(2, '0');
    const dayStr = String(day).padStart(2, '0');
    const dateStr = `${year}-${month}-${dayStr}`;
    
    console.log('📅 Calendar date clicked:', day, 'Date string:', dateStr);
    
    if (onDateSelect) {
      onDateSelect(dateStr);
    } else {
      const dayWorkouts = getWorkoutsForDate(day);
      console.log('📅 Date clicked:', day, 'Workouts found:', dayWorkouts);
      
      if (dayWorkouts.length === 1) {
        console.log('✏️ Opening workout for editing:', dayWorkouts[0]);
        onEditEffort(dayWorkouts[0]);
      } else if (dayWorkouts.length > 1) {
        console.log('📝 Multiple workouts, opening first:', dayWorkouts[0]);
        onEditEffort(dayWorkouts[0]);
      } else {
        console.log('➕ No workouts, creating new one for date');
        onAddEffort();
      }
    }
  };

  const days = getDaysInMonth();

  return (
    <div className="w-full">
      <div className="w-full flex justify-center items-center mb-2 gap-1 flex-nowrap">
        <NewEffortDropdown onSelectType={onSelectType} />
        <LogEffortDropdown onSelectType={onSelectType} />
        <RoutinesDropdown onSelectRoutine={onSelectRoutine} />
        <AllEffortsDropdown onSelectWorkout={onSelectWorkout} />
      </div>
      
      <div className="w-full bg-white">
        <div className="p-1">
          <div className="flex items-center justify-center gap-6 mb-3">
            <Button 
              className="bg-transparent text-gray-700 border-none hover:bg-gray-100 hover:text-black p-3 transition-all duration-150 min-h-[44px] min-w-[44px]" 
              style={{borderRadius: '8px'}}
              onClick={() => navigateMonth(-1)}
            >
              <ChevronLeft className="h-5 w-5" strokeWidth={2.5} />
            </Button>
            <h3 className="text-lg sm:text-xl font-semibold mx-4 min-w-[180px] text-center" style={{fontFamily: 'Inter, sans-serif'}}>
              {MONTHS[currentDate.getMonth()]} {currentDate.getFullYear()}
            </h3>
            <Button 
              className="bg-transparent text-gray-700 border-none hover:bg-gray-100 hover:text-black p-3 transition-all duration-150 min-h-[44px] min-w-[44px]"
              style={{borderRadius: '8px'}}
              onClick={() => navigateMonth(1)}
            >
              <ChevronRight className="h-5 w-5" strokeWidth={2.5} />
            </Button>
          </div>
          
          <div className="grid gap-0 grid-cols-7 mb-3">
            {DAYS.map(day => (
              <div key={day} className="p-1 text-center font-semibold text-xs text-gray-600" style={{fontFamily: 'Inter, sans-serif'}}>
                {day}
              </div>
            ))}
            {days.map((day, index) => {
              const dayWorkouts = day ? getWorkoutsForDate(day) : [];
              return (
                <div
                  key={index}
                  className="min-h-[60px] p-1 bg-white hover:bg-gray-50 active:bg-gray-100 cursor-pointer transition-all duration-200 hover:shadow-md rounded-md"
                  onClick={() => day && handleDateClick(day)}
                >
                  {day && (
                    <>
                      <div className="text-sm font-semibold mb-1 text-gray-900" style={{fontFamily: 'Inter, sans-serif'}}>{day}</div>
                      
                      {dayWorkouts.length > 0 && (
                        <div className="flex justify-center items-center space-x-1 mt-1">
                          {dayWorkouts.slice(0, 4).map((workout, idx) => (
                            <div
                              key={workout.id}
                              className={`w-2 h-2 rounded-full shadow-sm ${DISCIPLINE_COLORS[workout.type as keyof typeof DISCIPLINE_COLORS]}`}
                              title={workout.name}
                            />
                          ))}
                          {dayWorkouts.length > 4 && (
                            <div className="text-xs text-gray-500 font-medium">
                              +{dayWorkouts.length - 4}
                            </div>
                          )}
                        </div>
                      )}
                    </>
                  )}
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
}

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/WorkoutCharts.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ChartContainer, ChartTooltip, ChartTooltipContent } from '@/components/ui/chart';
import { LineChart, Line, XAxis, YAxis, BarChart, Bar, ResponsiveContainer } from 'recharts';

interface WorkoutChartsProps {
  timeSeriesData?: {
    heartRate?: Array<{ time: number; value: number }>;
    power?: Array<{ time: number; value: number }>;
    cadence?: Array<{ time: number; value: number }>;
    elevation?: Array<{ distance: number; value: number }>;
    speed?: Array<{ time: number; value: number }>;
  };
  heartRateZones?: Array<{ zone: string; time: number; percentage: number }>;
}

const WorkoutCharts: React.FC<WorkoutChartsProps> = ({ timeSeriesData, heartRateZones }) => {
  const chartConfig = {
    value: {
      label: "Value",
      color: "hsl(var(--chart-1))",
    },
  };

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      {timeSeriesData?.heartRate && (
        <Card>
          <CardHeader>
            <CardTitle>Heart Rate vs Time</CardTitle>
          </CardHeader>
          <CardContent>
            <ChartContainer config={chartConfig}>
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={timeSeriesData.heartRate}>
                  <XAxis dataKey="time" />
                  <YAxis />
                  <ChartTooltip content={<ChartTooltipContent />} />
                  <Line type="monotone" dataKey="value" stroke="var(--color-value)" strokeWidth={2} />
                </LineChart>
              </ResponsiveContainer>
            </ChartContainer>
          </CardContent>
        </Card>
      )}

      {timeSeriesData?.power && (
        <Card>
          <CardHeader>
            <CardTitle>Power vs Time</CardTitle>
          </CardHeader>
          <CardContent>
            <ChartContainer config={chartConfig}>
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={timeSeriesData.power}>
                  <XAxis dataKey="time" />
                  <YAxis />
                  <ChartTooltip content={<ChartTooltipContent />} />
                  <Line type="monotone" dataKey="value" stroke="var(--color-value)" strokeWidth={2} />
                </LineChart>
              </ResponsiveContainer>
            </ChartContainer>
          </CardContent>
        </Card>
      )}

      {timeSeriesData?.elevation && (
        <Card>
          <CardHeader>
            <CardTitle>Elevation vs Distance</CardTitle>
          </CardHeader>
          <CardContent>
            <ChartContainer config={chartConfig}>
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={timeSeriesData.elevation}>
                  <XAxis dataKey="distance" />
                  <YAxis />
                  <ChartTooltip content={<ChartTooltipContent />} />
                  <Line type="monotone" dataKey="value" stroke="var(--color-value)" strokeWidth={2} />
                </LineChart>
              </ResponsiveContainer>
            </ChartContainer>
          </CardContent>
        </Card>
      )}

      {heartRateZones && (
        <Card>
          <CardHeader>
            <CardTitle>Heart Rate Zones</CardTitle>
          </CardHeader>
          <CardContent>
            <ChartContainer config={chartConfig}>
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={heartRateZones}>
                  <XAxis dataKey="zone" />
                  <YAxis />
                  <ChartTooltip content={<ChartTooltipContent />} />
                  <Bar dataKey="percentage" fill="var(--color-value)" />
                </BarChart>
              </ResponsiveContainer>
            </ChartContainer>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default WorkoutCharts;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/WorkoutDetail.tsx
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Upload, Activity, Dumbbell } from 'lucide-react';
import WorkoutMetrics from './WorkoutMetrics';
import CompletedTab from './CompletedTab';
import StrengthExerciseBuilder from './StrengthExerciseBuilder';

interface WorkoutDetailProps {
  workout: {
    id: string;
    name: string;
    type: 'endurance' | 'strength';
    date: string;
    workout_status?: string;
    strength_exercises?: any[];
    garmin_data?: any;
    time_series_data?: any;
    heart_rate_zones?: any[];
    distance?: number;
    elapsed_time?: number;
    moving_time?: number;
    avg_speed?: number;
    max_speed?: number;
    avg_pace?: number;
    avg_heart_rate?: number;
    max_heart_rate?: number;
    hrv?: number;
    avg_power?: number;
    max_power?: number;
    normalized_power?: number;
    avg_cadence?: number;
    max_cadence?: number;
    elevation_gain?: number;
    elevation_loss?: number;
    calories?: number;
    tss?: number;
    intensity_factor?: number;
    comments?: string;
  };
  onUpdateWorkout: (workoutId: string, updates: any) => void;
  activeTab?: string;
  onTabChange?: (tab: string) => void;
}

const WorkoutDetail: React.FC<WorkoutDetailProps> = ({ workout, onUpdateWorkout, activeTab = 'summary', onTabChange }) => {
  const [comments, setComments] = useState(workout.comments || '');
  const [strengthExercises, setStrengthExercises] = useState(workout.strength_exercises || []);

  const handleCommentsChange = (value: string) => {
    setComments(value);
    onUpdateWorkout(workout.id, { comments: value });
  };

  const handleStrengthExercisesChange = (exercises: any[]) => {
    setStrengthExercises(exercises);
    onUpdateWorkout(workout.id, { strength_exercises: exercises });
  };

  const getWorkoutType = () => {
    if (workout.name.toLowerCase().includes('run')) return 'running';
    if (workout.name.toLowerCase().includes('cycle') || workout.name.toLowerCase().includes('ride')) return 'cycling';
    return 'cycling'; // default
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-2">
                {workout.type === 'endurance' ? <Activity className="h-5 w-5" /> : <Dumbbell className="h-5 w-5" />}
                {workout.name}
              </CardTitle>
              <p className="text-sm text-muted-foreground">{new Date(workout.date).toLocaleDateString()}</p>
            </div>
            <Badge variant={workout.workout_status === 'completed' ? 'default' : 'secondary'}>
              {workout.workout_status || 'planned'}
            </Badge>
          </div>
        </CardHeader>
      </Card>

      <Tabs value={activeTab} onValueChange={onTabChange} className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="summary">Summary</TabsTrigger>
          <TabsTrigger value="completed">Completed</TabsTrigger>
        </TabsList>

        <TabsContent value="summary" className="space-y-4">
          <WorkoutMetrics workout={workout} />
          
          <Card>
            <CardHeader>
              <CardTitle>Comments</CardTitle>
            </CardHeader>
            <CardContent>
              <Textarea
                placeholder="Add your comments about this workout..."
                value={comments}
                onChange={(e) => handleCommentsChange(e.target.value)}
                rows={4}
              />
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="completed" className="space-y-4">
          {workout.type === 'endurance' ? (
            <CompletedTab 
              workoutType={getWorkoutType()}
              workoutData={workout}
            />
          ) : (
            <StrengthExerciseBuilder
              exercises={strengthExercises}
              onChange={handleStrengthExercisesChange}
              isMetric={true}
              isCompleted={true}
            />
          )}
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default WorkoutDetail;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/WorkoutForm.tsx
import React, { useState } from 'react';
import { useAppContext } from '@/contexts/AppContext';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Plus } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import WorkoutIntervals, { WorkoutInterval } from './WorkoutIntervals';
import SwimWorkoutForm from './SwimWorkoutForm';
import GarminExport from './GarminExport';
import { SwimWorkoutData } from '@/contexts/AppContext';

interface WorkoutFormProps {
  onClose: () => void;
}

export default function WorkoutForm({ onClose }: WorkoutFormProps) {
  const { addWorkout, useImperial } = useAppContext();
  const [formData, setFormData] = useState({
    name: '',
    type: 'run' as 'run' | 'ride' | 'strength' | 'swim',
    duration: 0,
    date: new Date().toISOString().split('T')[0],
    description: '',
    comments: ''
  });
  const [intervals, setIntervals] = useState<WorkoutInterval[]>([]);
  const [swimData, setSwimData] = useState<SwimWorkoutData>({
    totalDistance: 0,
    targetPacePer100: '',
    strokeType: 'Freestyle',
    equipmentUsed: []
  });
  const [strengthExercises, setStrengthExercises] = useState([
    { id: '1', name: 'Squats', sets: 5, reps: 5, weight: 100, weightMode: 'same', completed_sets: Array(5).fill({ reps: 0, weight: 0, rir: 0, completed: false }) },
    { id: '2', name: 'Overhead Press', sets: 5, reps: 5, weight: 60, weightMode: 'same', completed_sets: Array(5).fill({ reps: 0, weight: 0, rir: 0, completed: false }) },
    { id: '3', name: 'Barbell Rows', sets: 5, reps: 5, weight: 80, weightMode: 'same', completed_sets: Array(5).fill({ reps: 0, weight: 0, rir: 0, completed: false }) }
  ]);

  const handleSave = (e: React.FormEvent) => {
    e.preventDefault();
    
    const workoutData = {
      ...formData,
      intervals: (formData.type === 'run' || formData.type === 'ride') ? intervals : undefined,
      swimData: formData.type === 'swim' ? swimData : undefined,
      strength_exercises: formData.type === 'strength' ? strengthExercises : undefined,
      workout_status: 'planned'
    };
    
    // Save to localStorage
    const storageKey = `workout_${formData.date}`;
    localStorage.setItem(storageKey, JSON.stringify(workoutData));
    
    toast({
      title: "Success!",
      description: "Effort saved successfully!",
    });
    
    // Also add to context for immediate UI update
    addWorkout(workoutData);
    onClose();
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (formData.name && formData.duration > 0) {
      const workoutData = {
        ...formData,
        intervals: (formData.type === 'run' || formData.type === 'ride') ? intervals : undefined,
        swimData: formData.type === 'swim' ? swimData : undefined,
        strength_exercises: formData.type === 'strength' ? strengthExercises : undefined,
        workout_status: 'planned'
      };
      addWorkout(workoutData);
      onClose();
    }
  };

  const getTabsList = () => {
    if (formData.type === 'swim') {
      return (
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="basic">Basic Info</TabsTrigger>
          <TabsTrigger value="swim">Swim Details</TabsTrigger>
          <TabsTrigger value="completed">Completed</TabsTrigger>
          <TabsTrigger value="export">Export</TabsTrigger>
        </TabsList>
      );
    }
    return (
      <TabsList className="grid w-full grid-cols-4">
        <TabsTrigger value="basic">Basic Info</TabsTrigger>
        <TabsTrigger value="intervals">Details</TabsTrigger>
        <TabsTrigger value="completed">Completed</TabsTrigger>
        <TabsTrigger value="export">Export</TabsTrigger>
      </TabsList>
    );
  };

  return (
    <div className="w-full max-w-4xl mx-auto">
      <form autoComplete="off">
        <Tabs defaultValue="basic" className="w-full">
          {getTabsList()}
          
          <TabsContent value="basic">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Plus className="h-5 w-5" />
                  New Workout
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="workout-name">Workout Name</Label>
                    <Input
                      id="workout-name"
                      name="workout-name"
                      autoComplete="off"
                      value={formData.name}
                      onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                      placeholder="Morning Run or Swim Session"
                      required
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="workout-type">Type</Label>
                    <Select value={formData.type} onValueChange={(value: 'run' | 'ride' | 'strength' | 'swim') => 
                      setFormData(prev => ({ ...prev, type: value }))
                    }>
                      <SelectTrigger id="workout-type" name="workout-type">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="run">Run</SelectItem>
                        <SelectItem value="ride">Ride</SelectItem>
                        <SelectItem value="strength">Strength</SelectItem>
                        <SelectItem value="swim">Swim</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="workout-duration">Duration (minutes)</Label>
                    <Input
                      id="workout-duration"
                      name="workout-duration"
                      type="number"
                      autoComplete="off"
                      value={formData.duration}
                      onChange={(e) => setFormData(prev => ({ ...prev, duration: parseInt(e.target.value) || 0 }))}
                      min="1"
                      required
                    />
                  </div>

                  <div>
                    <Label htmlFor="workout-date">Date</Label>
                    <Input
                      id="workout-date"
                      name="workout-date"
                      type="date"
                      autoComplete="off"
                      value={formData.date}
                      onChange={(e) => setFormData(prev => ({ ...prev, date: e.target.value }))}
                      required
                    />
                  </div>

                  <div>
                    <Label htmlFor="workout-description">Description</Label>
                    <Textarea
                      id="workout-description"
                      name="workout-description"
                      autoComplete="off"
                      value={formData.description}
                      onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                      placeholder="Workout details..."
                    />
                  </div>

                  <div>
                    <Label htmlFor="workout-comments">Comments</Label>
                    <Textarea
                      id="workout-comments"
                      name="workout-comments"
                      autoComplete="off"
                      value={formData.comments}
                      onChange={(e) => setFormData(prev => ({ ...prev, comments: e.target.value }))}
                      placeholder="How did it feel? Notes..."
                    />
                  </div>

                  <div className="flex gap-2">
                    <Button type="button" onClick={handleSave} className="flex-1 bg-black text-white hover:bg-gray-800">Save</Button>
                    <Button type="button" variant="outline" onClick={onClose} className="border-black hover:bg-gray-100">Cancel</Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          {formData.type === 'swim' ? (
            <TabsContent value="swim">
              <SwimWorkoutForm swimData={swimData} onChange={setSwimData} />
            </TabsContent>
          ) : (
            <TabsContent value="intervals">
              <WorkoutIntervals intervals={intervals} onChange={setIntervals} workoutType={formData.type} />
            </TabsContent>
          )}
          
          <TabsContent value="completed">
            <Card>
              <CardHeader>
                <CardTitle>Completed Workout</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8 text-muted-foreground">
                  Complete your workout and track your results here.
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="export">
            <GarminExport workoutName={formData.name} intervals={intervals} />
          </TabsContent>
        </Tabs>
      </form>
    </div>
  );
}

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/WorkoutIntervals.tsx
import React from 'react';
import { useAppContext } from '@/contexts/AppContext';
import RunIntervalBuilder, { RunInterval } from './RunIntervalBuilder';
import RideIntervalBuilder, { RideInterval } from './RideIntervalBuilder';
import StrengthExerciseBuilder, { StrengthExercise } from './StrengthExerciseBuilder';

export interface WorkoutInterval {
  id: string;
  name: string;
  duration: number;
  durationType: 'time' | 'distance';
  intensityType: 'heartRate' | 'power' | 'pace' | 'rpe';
  intensityMin: number;
  intensityMax: number;
  description?: string;
}

interface WorkoutIntervalsProps {
  intervals: WorkoutInterval[];
  onChange: (intervals: WorkoutInterval[]) => void;
  workoutType?: 'run' | 'ride' | 'strength' | 'swim';
}

const WorkoutIntervals: React.FC<WorkoutIntervalsProps> = ({ intervals, onChange, workoutType = 'run' }) => {
  const { useImperial } = useAppContext();
  
  // Convert generic intervals to specific types
  const runIntervals: RunInterval[] = intervals.map(interval => ({
    id: interval.id,
    time: interval.durationType === 'time' ? `${Math.floor(interval.duration / 60)}:${(interval.duration % 60).toString().padStart(2, '0')}` : '',
    distance: interval.durationType === 'distance' ? interval.duration.toString() : '',
    paceTarget: interval.intensityType === 'pace' ? `${interval.intensityMin}-${interval.intensityMax}` : '',
    bpmTarget: interval.intensityType === 'heartRate' ? `${interval.intensityMin}-${interval.intensityMax}` : '',
    rpeTarget: interval.intensityType === 'rpe' ? `${interval.intensityMin}-${interval.intensityMax}` : '',
    duration: interval.duration
  }));
  
  const rideIntervals: RideInterval[] = intervals.map(interval => ({
    id: interval.id,
    time: interval.durationType === 'time' ? `${Math.floor(interval.duration / 60)}:${(interval.duration % 60).toString().padStart(2, '0')}` : '',
    distance: interval.durationType === 'distance' ? interval.duration.toString() : '',
    powerTarget: interval.intensityType === 'power' ? `${interval.intensityMin}-${interval.intensityMax}` : '',
    bpmTarget: interval.intensityType === 'heartRate' ? `${interval.intensityMin}-${interval.intensityMax}` : '',
    rpeTarget: interval.intensityType === 'rpe' ? `${interval.intensityMin}-${interval.intensityMax}` : '',
    cadenceTarget: '',
    duration: interval.duration
  }));
  
  const strengthExercises: StrengthExercise[] = [
    {
      id: '1',
      name: 'Squats',
      sets: 3,
      reps: 10,
      weight: useImperial ? 185 : 85,
      weightMode: 'same',
      completed_sets: Array(3).fill({ reps: 0, weight: 0, rir: 0, completed: false })
    }
  ];
  
  const handleRunIntervalsChange = (newIntervals: RunInterval[]) => {
    const converted: WorkoutInterval[] = newIntervals.map(interval => {
      const duration = interval.duration || 0;
      let intensityMin = 0, intensityMax = 0, intensityType: 'heartRate' | 'power' | 'pace' | 'rpe' = 'heartRate';
      
      if (interval.bpmTarget) {
        const [min, max] = interval.bpmTarget.split('-').map(Number);
        intensityMin = min || 0;
        intensityMax = max || min || 0;
        intensityType = 'heartRate';
      } else if (interval.paceTarget) {
        intensityType = 'pace';
      } else if (interval.rpeTarget) {
        intensityType = 'rpe';
      }
      
      return {
        id: interval.id,
        name: `Interval ${interval.id}`,
        duration,
        durationType: interval.distance ? 'distance' : 'time',
        intensityType,
        intensityMin,
        intensityMax
      };
    });
    onChange(converted);
  };
  
  const handleRideIntervalsChange = (newIntervals: RideInterval[]) => {
    const converted: WorkoutInterval[] = newIntervals.map(interval => {
      const duration = interval.duration || 0;
      let intensityMin = 0, intensityMax = 0, intensityType: 'heartRate' | 'power' | 'pace' | 'rpe' = 'power';
      
      if (interval.powerTarget) {
        const [min, max] = interval.powerTarget.split('-').map(Number);
        intensityMin = min || 0;
        intensityMax = max || min || 0;
        intensityType = 'power';
      } else if (interval.bpmTarget) {
        const [min, max] = interval.bpmTarget.split('-').map(Number);
        intensityMin = min || 0;
        intensityMax = max || min || 0;
        intensityType = 'heartRate';
      } else if (interval.rpeTarget) {
        intensityType = 'rpe';
      }
      
      return {
        id: interval.id,
        name: `Interval ${interval.id}`,
        duration,
        durationType: interval.distance ? 'distance' : 'time',
        intensityType,
        intensityMin,
        intensityMax
      };
    });
    onChange(converted);
  };
  
  const handleStrengthExercisesChange = (exercises: StrengthExercise[]) => {
    // For strength, we don't need to convert to intervals
    // This will be handled separately in the parent component
  };
  
  if (workoutType === 'run') {
    return (
      <RunIntervalBuilder 
        intervals={runIntervals} 
        onChange={handleRunIntervalsChange} 
        isMetric={!useImperial}
      />
    );
  }
  
  if (workoutType === 'ride') {
    return (
      <RideIntervalBuilder 
        intervals={rideIntervals} 
        onChange={handleRideIntervalsChange} 
        isMetric={!useImperial}
      />
    );
  }
  
  if (workoutType === 'strength') {
    return (
      <StrengthExerciseBuilder 
        exercises={strengthExercises} 
        onChange={handleStrengthExercisesChange} 
        isMetric={!useImperial}
      />
    );
  }
  
  return (
    <div className="text-center py-8 text-muted-foreground">
      Select a workout type to configure details.
    </div>
  );
};

export default WorkoutIntervals;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/WorkoutList.tsx
import React from 'react';
import { useAppContext } from '@/contexts/AppContext';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Activity, Dumbbell, Trash2 } from 'lucide-react';

interface WorkoutListProps {
  onWorkoutSelect?: (workout: any) => void;
}

const WorkoutList: React.FC<WorkoutListProps> = ({ onWorkoutSelect }) => {
  const { workouts, deleteWorkout } = useAppContext();

  const handleDelete = async (id: string, e: React.MouseEvent) => {
    e.stopPropagation();
    if (confirm('Are you sure you want to delete this workout?')) {
      await deleteWorkout(id);
    }
  };

  if (workouts.length === 0) {
    return (
      <Card>
        <CardContent className="pt-6 text-center text-muted-foreground">
          <p>No workouts yet. Create your first workout!</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-4">
      {workouts.map((workout) => (
        <Card 
          key={workout.id} 
          className="cursor-pointer hover:shadow-md transition-shadow"
          onClick={() => onWorkoutSelect?.(workout)}
        >
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center gap-2">
                {workout.type === 'endurance' ? (
                  <Activity className="h-5 w-5 text-blue-500" />
                ) : (
                  <Dumbbell className="h-5 w-5 text-green-500" />
                )}
                {workout.name}
              </CardTitle>
              <div className="flex items-center gap-2">
                <Badge variant={workout.workout_status === 'completed' ? 'default' : 'secondary'}>
                  {workout.workout_status || 'planned'}
                </Badge>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={(e) => handleDelete(workout.id, e)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between text-sm text-muted-foreground">
              <span>{new Date(workout.date).toLocaleDateString()}</span>
              <span>{workout.duration} minutes</span>
              {workout.type === 'endurance' && workout.distance && (
                <span>{workout.distance.toFixed(1)} km</span>
              )}
            </div>
            {workout.description && (
              <p className="mt-2 text-sm text-gray-600 line-clamp-2">{workout.description}</p>
            )}
          </CardContent>
        </Card>
      ))}
    </div>
  );
};

export default WorkoutList;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/WorkoutMetrics.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Activity, Clock, Zap, Heart } from 'lucide-react';

interface WorkoutMetricsProps {
  workout: {
    distance?: number;
    elapsed_time?: number;
    moving_time?: number;
    avg_speed?: number;
    max_speed?: number;
    avg_pace?: number;
    avg_heart_rate?: number;
    max_heart_rate?: number;
    hrv?: number;
    avg_power?: number;
    max_power?: number;
    normalized_power?: number;
    avg_cadence?: number;
    max_cadence?: number;
    elevation_gain?: number;
    elevation_loss?: number;
    calories?: number;
    tss?: number;
    intensity_factor?: number;
  };
}

const WorkoutMetrics: React.FC<WorkoutMetricsProps> = ({ workout }) => {
  const formatTime = (seconds?: number) => {
    if (!seconds) return 'N/A';
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return `${hours}:${minutes.toString().padStart(2, '0')}`;
  };

  const formatPace = (pace?: number) => {
    if (!pace) return 'N/A';
    const minutes = Math.floor(pace);
    const seconds = Math.floor((pace - minutes) * 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Distance</CardTitle>
          <Activity className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{workout.distance?.toFixed(2) || 'N/A'}</div>
          <p className="text-xs text-muted-foreground">km</p>
        </CardContent>
      </Card>

      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Duration</CardTitle>
          <Clock className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{formatTime(workout.elapsed_time)}</div>
          <p className="text-xs text-muted-foreground">Moving: {formatTime(workout.moving_time)}</p>
        </CardContent>
      </Card>

      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Heart Rate</CardTitle>
          <Heart className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{workout.avg_heart_rate || 'N/A'}</div>
          <p className="text-xs text-muted-foreground">Max: {workout.max_heart_rate || 'N/A'} bpm</p>
        </CardContent>
      </Card>

      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Power</CardTitle>
          <Zap className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{workout.avg_power || 'N/A'}</div>
          <p className="text-xs text-muted-foreground">Max: {workout.max_power || 'N/A'} W</p>
        </CardContent>
      </Card>
    </div>
  );
};

export default WorkoutMetrics;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/WorkoutSummary.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useAppContext } from '@/contexts/AppContext';

interface WorkoutSummaryProps {
  workout: any;
  onClose: () => void;
}

export default function WorkoutSummary({ workout, onClose }: WorkoutSummaryProps) {
  const { useImperial } = useAppContext();

  if (!workout) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Workout Summary</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8 text-muted-foreground">
            No workout selected
          </div>
          <Button onClick={onClose} className="w-full mt-4 bg-black text-white hover:bg-gray-800">
            Close
          </Button>
        </CardContent>
      </Card>
    );
  }

  const formatDate = (dateStr: string) => {
    const date = new Date(dateStr);
    return date.toLocaleDateString('en-US', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
  };

  const getWorkoutTypeColor = (type: string) => {
    switch (type) {
      case 'run': return 'text-green-600';
      case 'ride': return 'text-blue-600';
      case 'strength': return 'text-orange-600';
      case 'swim': return 'text-cyan-600';
      default: return 'text-gray-600';
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>Workout Summary</span>
          <Button onClick={onClose} variant="outline" className="border-black hover:bg-gray-100">
            Close
          </Button>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div>
          <h2 className="text-2xl font-bold mb-2">{workout.name || 'Untitled Workout'}</h2>
          <p className="text-muted-foreground">{formatDate(workout.date)}</p>
          <p className={`text-lg font-medium capitalize ${getWorkoutTypeColor(workout.type)}`}>
            {workout.type} Workout
          </p>
        </div>

        {workout.description && (
          <div>
            <h3 className="font-semibold mb-2">Description</h3>
            <p className="text-muted-foreground">{workout.description}</p>
          </div>
        )}

        {workout.intervals && workout.intervals.length > 0 && (
          <div>
            <h3 className="font-semibold mb-3">Intervals</h3>
            <div className="space-y-3">
              {workout.intervals.map((interval: any, index: number) => (
                <Card key={interval.id || index} className="p-3">
                  <div className="flex justify-between items-start">
                    <div>
                      <h4 className="font-medium">Segment {index + 1}</h4>
                      <div className="text-sm text-muted-foreground space-y-1">
                        {interval.time && <p>Time: {interval.time}</p>}
                        {interval.distance && <p>Distance: {interval.distance} {useImperial ? 'mi' : 'km'}</p>}
                        {interval.paceTarget && <p>Pace Target: {interval.paceTarget}</p>}
                        {interval.powerTarget && <p>Power Target: {interval.powerTarget}</p>}
                        {interval.bpmTarget && <p>Heart Rate: {interval.bpmTarget} BPM</p>}
                        {interval.rpeTarget && <p>RPE Target: {interval.rpeTarget}</p>}
                        {interval.cadenceTarget && <p>Cadence: {interval.cadenceTarget} RPM</p>}
                      </div>
                    </div>
                  </div>
                </Card>
              ))}
            </div>
          </div>
        )}

        {workout.strength_exercises && workout.strength_exercises.length > 0 && (
          <div>
            <h3 className="font-semibold mb-3">Exercises</h3>
            <div className="space-y-3">
              {workout.strength_exercises.map((exercise: any, index: number) => (
                <Card key={exercise.id || index} className="p-3">
                  <h4 className="font-medium">{exercise.name}</h4>
                  <p className="text-sm text-muted-foreground">
                    {exercise.sets} sets × {exercise.reps} reps @ {exercise.weight} {useImperial ? 'lbs' : 'kg'}
                  </p>
                  {exercise.notes && (
                    <p className="text-sm text-muted-foreground mt-1">{exercise.notes}</p>
                  )}
                </Card>
              ))}
            </div>
          </div>
        )}

        {workout.comments && (
          <div>
            <h3 className="font-semibold mb-2">Comments</h3>
            <Card className="p-3">
              <p className="text-muted-foreground">{workout.comments}</p>
            </Card>
          </div>
        )}

        <div className="pt-4">
          <Button onClick={onClose} className="w-full bg-black text-white hover:bg-gray-800">
            Close
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/WorkoutSummaryChart.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';

interface Interval {
  duration?: string;
  distance?: string;
  recovery?: string;
  recoveryTime?: string;
  recoveryDistance?: string;
  repeats?: number;
}

interface WorkoutSummaryChartProps {
  intervals: Interval[];
  workoutType: string;
}

function parseTimeToSeconds(timeStr: string): number {
  if (!timeStr) return 0;
  const parts = timeStr.split(':');
  if (parts.length === 2) {
    return parseInt(parts[0]) * 60 + parseInt(parts[1]);
  }
  return parseInt(timeStr) || 0;
}

function formatTime(seconds: number): string {
  const mins = Math.floor(seconds / 60);
  const secs = seconds % 60;
  return `${mins}:${secs.toString().padStart(2, '0')}`;
}

export default function WorkoutSummaryChart({ intervals, workoutType }: WorkoutSummaryChartProps) {
  if (!intervals.length) return null;

  const chartData = intervals.map((interval, index) => {
    const workDuration = parseTimeToSeconds(interval.duration || '0');
    const recoveryDuration = parseTimeToSeconds(interval.recovery || interval.recoveryTime || '0');
    const repeats = interval.repeats || 1;
    
    return {
      index,
      workDuration,
      recoveryDuration,
      repeats,
      totalDuration: (workDuration + recoveryDuration) * repeats
    };
  });

  const totalWorkoutTime = chartData.reduce((sum, item) => sum + item.totalDuration, 0);
  const maxDuration = Math.max(...chartData.map(item => item.totalDuration));

  return (
    <Card className="mb-6">
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>Workout Timeline</span>
          <Badge variant="outline">
            Total: {formatTime(totalWorkoutTime)}
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          {chartData.map((item, index) => {
            const workWidth = maxDuration > 0 ? (item.workDuration * item.repeats / maxDuration) * 100 : 0;
            const recoveryWidth = maxDuration > 0 ? (item.recoveryDuration * item.repeats / maxDuration) * 100 : 0;
            
            return (
              <div key={index} className="space-y-1">
                <div className="flex items-center justify-between text-sm">
                  <span>Interval {index + 1}</span>
                  <span className="text-muted-foreground">
                    {formatTime(item.totalDuration)}
                    {item.repeats > 1 && ` (${item.repeats}x)`}
                  </span>
                </div>
                <div className="flex h-6 bg-muted rounded overflow-hidden">
                  {/* Work portion */}
                  <div 
                    className="bg-blue-500 flex items-center justify-center text-xs text-white font-medium"
                    style={{ width: `${workWidth}%` }}
                  >
                    {workWidth > 15 && 'Work'}
                  </div>
                  {/* Recovery portion */}
                  {recoveryWidth > 0 && (
                    <div 
                      className="bg-green-400 flex items-center justify-center text-xs text-white font-medium"
                      style={{ width: `${recoveryWidth}%` }}
                    >
                      {recoveryWidth > 15 && 'Recovery'}
                    </div>
                  )}
                </div>
              </div>
            );
          })}
        </div>
        
        <div className="mt-4 flex items-center gap-4 text-sm">
          <div className="flex items-center gap-2">
            <div className="w-3 h-3 bg-blue-500 rounded"></div>
            <span>Work Intervals</span>
          </div>
          <div className="flex items-center gap-2">
            <div className="w-3 h-3 bg-green-400 rounded"></div>
            <span>Recovery</span>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/WorkoutTypeFilter.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Activity, Dumbbell, Calendar, Filter, Waves, Bike } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

interface WorkoutTypeFilterProps {
  selectedType: 'all' | 'run' | 'ride' | 'strength' | 'swim';
  onTypeChange: (type: 'all' | 'run' | 'ride' | 'strength' | 'swim') => void;
  workoutCounts: {
    all: number;
    run: number;
    ride: number;
    strength: number;
    swim: number;
  };
}

const WorkoutTypeFilter: React.FC<WorkoutTypeFilterProps> = ({
  selectedType,
  onTypeChange,
  workoutCounts
}) => {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Filter className="h-5 w-5" />
          Training Session Type
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          <Select value={selectedType} onValueChange={onTypeChange}>
            <SelectTrigger>
              <SelectValue placeholder="Select training type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">
                <div className="flex items-center gap-2">
                  <Calendar className="h-4 w-4" />
                  All Sessions
                </div>
              </SelectItem>
              <SelectItem value="run">
                <div className="flex items-center gap-2">
                  <Activity className="h-4 w-4 text-blue-500" />
                  Running
                </div>
              </SelectItem>
              <SelectItem value="ride">
                <div className="flex items-center gap-2">
                  <Bike className="h-4 w-4 text-orange-500" />
                  Riding
                </div>
              </SelectItem>
              <SelectItem value="strength">
                <div className="flex items-center gap-2">
                  <Dumbbell className="h-4 w-4 text-green-500" />
                  Strength Training
                </div>
              </SelectItem>
              <SelectItem value="swim">
                <div className="flex items-center gap-2">
                  <Waves className="h-4 w-4 text-cyan-500" />
                  Swimming
                </div>
              </SelectItem>
            </SelectContent>
          </Select>
          
          <div className="grid grid-cols-5 gap-2">
            <Button
              variant={selectedType === 'all' ? 'default' : 'outline'}
              size="sm"
              onClick={() => onTypeChange('all')}
              className="flex flex-col gap-1 h-auto py-2"
            >
              <Calendar className="h-4 w-4" />
              <span className="text-xs">All</span>
              <Badge variant="secondary" className="text-xs">
                {workoutCounts.all}
              </Badge>
            </Button>
            
            <Button
              variant={selectedType === 'run' ? 'default' : 'outline'}
              size="sm"
              onClick={() => onTypeChange('run')}
              className="flex flex-col gap-1 h-auto py-2"
            >
              <Activity className="h-4 w-4 text-blue-500" />
              <span className="text-xs">Run</span>
              <Badge variant="secondary" className="text-xs">
                {workoutCounts.run}
              </Badge>
            </Button>
            
            <Button
              variant={selectedType === 'ride' ? 'default' : 'outline'}
              size="sm"
              onClick={() => onTypeChange('ride')}
              className="flex flex-col gap-1 h-auto py-2"
            >
              <Bike className="h-4 w-4 text-orange-500" />
              <span className="text-xs">Ride</span>
              <Badge variant="secondary" className="text-xs">
                {workoutCounts.ride}
              </Badge>
            </Button>
            
            <Button
              variant={selectedType === 'strength' ? 'default' : 'outline'}
              size="sm"
              onClick={() => onTypeChange('strength')}
              className="flex flex-col gap-1 h-auto py-2"
            >
              <Dumbbell className="h-4 w-4 text-green-500" />
              <span className="text-xs">Strength</span>
              <Badge variant="secondary" className="text-xs">
                {workoutCounts.strength}
              </Badge>
            </Button>
            
            <Button
              variant={selectedType === 'swim' ? 'default' : 'outline'}
              size="sm"
              onClick={() => onTypeChange('swim')}
              className="flex flex-col gap-1 h-auto py-2"
            >
              <Waves className="h-4 w-4 text-cyan-500" />
              <span className="text-xs">Swim</span>
              <Badge variant="secondary" className="text-xs">
                {workoutCounts.swim}
              </Badge>
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default WorkoutTypeFilter;

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/theme-provider.tsx
"use client"

import * as React from "react"
import { createContext, useContext, useEffect, useState } from "react"
import { ThemeProviderProps } from "next-themes/dist/types"

type Theme = "dark" | "light" | "system"

type ThemeContextType = {
  theme: Theme
  setTheme: (theme: Theme) => void
}

const ThemeContext = createContext<ThemeContextType | null>(null)

export function ThemeProvider({
  children,
  defaultTheme = "system",
  value: _value,
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(() => {
    if (typeof window !== "undefined") {
      const savedTheme = localStorage.getItem("theme")
      return (savedTheme && (savedTheme === "dark" || savedTheme === "light" || savedTheme === "system")
        ? savedTheme
        : defaultTheme) as Theme
    }
    return defaultTheme as Theme
  })

  useEffect(() => {
    const root = window.document.documentElement
    root.classList.remove("light", "dark")

    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)")
        .matches
        ? "dark"
        : "light"
      root.classList.add(systemTheme)
      return
    }

    root.classList.add(theme)
  }, [theme])

  const value: ThemeContextType = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem("theme", theme)
      setTheme(theme)
    },
  }

  return (
    <ThemeContext.Provider value={value} {...props}>
      {children}
    </ThemeContext.Provider>
  )
}

export const useTheme = (): ThemeContextType => {
  const context = useContext(ThemeContext)
  if (!context) {
    throw new Error("useTheme must be used within a ThemeProvider")
  }
  return context
}


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/accordion.tsx
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b border-border/50", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:text-primary [&[data-state=open]>svg]:rotate-180 [&[data-state=open]]:text-primary",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-300 ease-in-out text-muted-foreground" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm text-muted-foreground transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/alert-dialog.tsx
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-card p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 mt-4",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-primary/90", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground mt-2", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/alert.tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground shadow-sm",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
        success:
          "border-green-500/50 text-green-600 dark:text-green-400 [&>svg]:text-green-600 dark:[&>svg]:text-green-400 bg-green-50 dark:bg-green-950/20",
        warning:
          "border-yellow-500/50 text-yellow-600 dark:text-yellow-400 [&>svg]:text-yellow-600 dark:[&>svg]:text-yellow-400 bg-yellow-50 dark:bg-yellow-950/20",
        info:
          "border-primary/50 text-primary dark:text-primary-foreground [&>svg]:text-primary bg-primary/10 dark:bg-primary/20",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed opacity-90", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/aspect-ratio.tsx
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/avatar.tsx
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root> & {
    size?: "sm" | "md" | "lg" | "xl"
  }
>(({ className, size = "md", ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex shrink-0 overflow-hidden rounded-full border border-border/30 ring-offset-background",
      size === "sm" && "h-8 w-8",
      size === "md" && "h-10 w-10",
      size === "lg" && "h-12 w-12",
      size === "xl" && "h-16 w-16",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full object-cover", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted text-muted-foreground",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/badge.tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-all focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground border-border",
        success:
          "border-transparent bg-green-500/20 text-green-700 dark:text-green-300 border-green-500/30",
        warning:
          "border-transparent bg-yellow-500/20 text-yellow-700 dark:text-yellow-300 border-yellow-500/30",
        info:
          "border-transparent bg-primary/10 text-primary border-primary/30",
      },
      size: {
        default: "px-2.5 py-0.5 text-xs",
        sm: "px-2 py-0.5 text-[10px]",
        lg: "px-3 py-0.5 text-sm",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, size, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant, size }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/breadcrumb.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-primary focus-visible:text-primary", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-medium text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5 text-muted-foreground/50", className)}
    {...props}
  >
    {children ?? <ChevronRight className="h-3.5 w-3.5" />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center text-muted-foreground", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-black text-white hover:bg-black border-none",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-black bg-white text-black hover:bg-black hover:text-white",
        secondary:
          "bg-white text-black border border-black hover:bg-black hover:text-white",
        ghost: "bg-white text-black hover:bg-black hover:text-white",
        link: "text-black underline-offset-4 hover:underline",
        toggle: "bg-white text-black border border-black hover:bg-black hover:text-white",
        "toggle-active": "bg-black text-white border border-black",
      },
      size: {
        default: "px-6 py-3",
        sm: "px-3 py-2 text-xs",
        lg: "px-8 py-4",
        icon: "h-9 w-9",
        effort: "px-6 py-3",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        style={{ 
          borderRadius: 0, 
          boxShadow: 'none', 
          fontFamily: 'Inter, sans-serif', 
          fontWeight: 500,
          letterSpacing: '0.02em',
          padding: size === 'effort' ? '12px 24px' : undefined
        }}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/calendar.tsx
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium text-foreground",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline", size: "sm" }),
          "h-7 w-7 bg-transparent p-0 opacity-70 hover:opacity-100 transition-opacity"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost", size: "sm" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100 hover:text-accent-foreground"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground rounded-md transition-colors",
        day_today: "bg-accent/50 text-accent-foreground rounded-md",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/30 aria-selected:text-muted-foreground aria-selected:opacity-40",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent/60 aria-selected:text-accent-foreground rounded-none",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/card.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "bg-white text-black border border-[#E5E5E5]",
      className
    )}
    style={{ borderRadius: 0, boxShadow: 'none' }}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex flex-col space-y-1.5 p-6", className)} {...props} />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight text-black", className)}
    style={{ fontFamily: 'Inter, sans-serif' }}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-[#666666]", className)}
    style={{ fontFamily: 'Inter, sans-serif', letterSpacing: '0.02em' }}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center p-6 pt-0", className)} {...props} />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/carousel.tsx
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full border border-border/40 opacity-80 hover:opacity-100 transition-opacity",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full border border-border/40 opacity-80 hover:opacity-100 transition-opacity",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/chart.tsx
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/40 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border/60 [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border/40 [&_.recharts-radial-bar-background-sector]:fill-muted/50 [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted/80 [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border/40 [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background/95 backdrop-blur-sm px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/checkbox.tsx
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary/60 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground transition-colors duration-200",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-3.5 w-3.5 transition-transform duration-200" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/collapsible.tsx
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/command.tsx
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b border-border/40 px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground/60 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm text-muted-foreground"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border/60", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent/60 data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 transition-colors",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground/70",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/context-menu.tsx
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[state=open]:bg-accent/60 data-[state=open]:text-accent-foreground transition-colors",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border border-border/40 bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border border-border/40 bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-colors",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-colors",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4 text-primary" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-colors",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current text-primary" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-medium text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border/60", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground/70",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/dialog.tsx
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border border-border/40 bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight text-foreground",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/drawer.tsx
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-background/80 backdrop-blur-sm", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border border-border bg-card shadow-lg",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted/50" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight text-primary/90",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground mt-2", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/dropdown-menu.tsx
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[state=open]:bg-accent/60 data-[state=open]:text-accent-foreground transition-colors",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border border-border/40 bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border border-border/40 bg-popover/95 backdrop-blur-sm p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4 text-primary" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current text-primary" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-medium text-foreground/80",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border/60", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest text-muted-foreground/70", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/form.tsx
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2 mb-4", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", "text-sm font-medium mb-1", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground/80 mt-1", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive mt-1", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/hover-card.tsx
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border border-border/40 bg-popover/95 backdrop-blur-sm p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/input-otp.tsx
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input bg-background/50 text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-1 ring-primary ring-offset-background border-primary/50",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-primary duration-700" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props} className="text-muted-foreground">
    <Dot className="h-4 w-4" />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/input.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full border border-[#E5E5E5] bg-white px-4 py-3 text-sm text-black placeholder:text-[#999999] focus:border-black focus:outline-none disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        style={{ 
          borderRadius: 0, 
          boxShadow: 'none', 
          fontFamily: 'Inter, sans-serif', 
          letterSpacing: '0.02em' 
        }}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/label.tsx
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
  {
    variants: {
      variant: {
        default: "text-foreground",
        muted: "text-muted-foreground",
        accent: "text-primary",
      },
      size: {
        default: "text-sm",
        xs: "text-xs",
        sm: "text-sm",
        lg: "text-base",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, variant, size, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants({ variant, size }), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/menubar.tsx
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border border-border/50 bg-background/50 p-1 shadow-sm",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent/60 focus:text-accent-foreground data-[state=open]:bg-accent/60 data-[state=open]:text-accent-foreground transition-colors",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[state=open]:bg-accent/60 data-[state=open]:text-accent-foreground transition-colors",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border border-border/40 bg-popover/95 backdrop-blur-sm p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border border-border/40 bg-popover/95 backdrop-blur-sm p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-colors",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-colors",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4 text-primary" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-colors",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current text-primary" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-medium text-foreground/80",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border/60", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground/70",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/navigation-menu.tsx
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background/50 px-4 py-2 text-sm font-medium transition-all hover:bg-accent/50 hover:text-accent-foreground focus:bg-accent/50 focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/60 data-[state=open]:bg-accent/60"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 ease-in-out group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 duration-200 md:absolute md:w-auto",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border border-border/40 bg-popover/95 backdrop-blur-sm text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-primary/20 shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/pagination.tsx
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      isActive && "border-primary/50 bg-primary/5 text-primary hover:bg-primary/10",
      "transition-colors",
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5 hover:text-primary", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5 hover:text-primary", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center text-muted-foreground", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/popover.tsx
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border border-border/40 bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/progress.tsx
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

interface ProgressProps extends
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> {
  variant?: "default" | "success" | "warning" | "error"
}

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  ProgressProps
>(({ className, value, variant = "default", ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-secondary/40",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className={cn(
        "h-full w-full flex-1 transition-all duration-300 ease-in-out",
        variant === "default" && "bg-primary",
        variant === "success" && "bg-green-500",
        variant === "warning" && "bg-yellow-500",
        variant === "error" && "bg-destructive",
      )}
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/radio-group.tsx
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary/60 text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 transition-all duration-200",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current animate-in scale-in-0 duration-200" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/resizable.tsx
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border/50 after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-primary focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border border-border/50 bg-border/30 hover:bg-border/50 transition-colors">
        <GripVertical className="h-2.5 w-2.5 text-primary/40" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/scroll-area.tsx
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root> & {
    hideScrollbar?: boolean
  }
>(({ className, children, hideScrollbar = false, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    {!hideScrollbar && <ScrollBar />}
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors duration-300",
      orientation === "vertical" &&
        "h-full w-2 border-l border-l-transparent p-[1px] hover:w-2.5",
      orientation === "horizontal" &&
        "h-2 flex-col border-t border-t-transparent p-[1px] hover:h-2.5",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border/50 hover:bg-border/80 transition-colors" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/select.tsx
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground/60 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-primary focus-visible:border-primary/50 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 transition-colors",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50 transition-transform duration-200 ease-in-out group-data-[state=open]:rotate-180" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1 text-muted-foreground",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1 text-muted-foreground",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-border/40 bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-medium text-muted-foreground", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent/50 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-colors",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4 text-primary" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/separator.tsx
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

interface SeparatorProps extends
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root> {
  variant?: "default" | "muted" | "accent"
}

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  SeparatorProps
>(
  (
    { className, orientation = "horizontal", decorative = true, variant = "default", ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0",
        variant === "default" && "bg-border",
        variant === "muted" && "bg-muted",
        variant === "accent" && "bg-primary/30",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/sheet.tsx
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-card border shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b rounded-b-xl data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t rounded-t-xl data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 hover:text-primary focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 disabled:pointer-events-none">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 mt-4",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-primary/90", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground mt-2", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}



// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/sidebar.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const sidebarVariants = cva(
  "h-full bg-background/80 backdrop-blur-sm border-r border-border/40 shadow-sm",
  {
    variants: {
      size: {
        sm: "w-16",
        md: "w-64",
        lg: "w-80",
      },
      collapsible: {
        true: "transition-all duration-300 ease-in-out",
      },
    },
    defaultVariants: {
      size: "md",
    },
  }
)

interface SidebarProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof sidebarVariants> {
  collapsed?: boolean
}

const Sidebar = React.forwardRef<HTMLDivElement, SidebarProps>(
  (
    { className, size, collapsible, collapsed = false, children, ...props },
    ref
  ) => {
    const actualSize = collapsed ? "sm" : size
    return (
      <div
        ref={ref}
        className={cn(sidebarVariants({ size: actualSize, collapsible }), className)}
        {...props}
      >
        {children}
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("p-4 border-b border-border/40", className)}
    {...props}
  />
))
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("p-4 border-t border-border/40 mt-auto", className)}
    {...props}
  />
))
SidebarFooter.displayName = "SidebarFooter"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex flex-col flex-1 p-2", className)} {...props} />
))
SidebarContent.displayName = "SidebarContent"

const SidebarNav = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <nav
    ref={ref}
    className={cn("flex flex-col gap-1", className)}
    {...props}
  />
))
SidebarNav.displayName = "SidebarNav"

const SidebarNavItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & { active?: boolean }
>(({ className, active, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "flex items-center px-3 py-2 rounded-md text-sm text-foreground/80 hover:text-foreground hover:bg-accent/50 transition-colors cursor-pointer",
      active && "bg-accent/60 text-primary font-medium",
      className
    )}
    {...props}
  />
))
SidebarNavItem.displayName = "SidebarNavItem"

const SidebarSection = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("mb-2", className)} {...props} />
))
SidebarSection.displayName = "SidebarSection"

const SidebarSectionTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-xs uppercase font-medium text-muted-foreground/70 tracking-wider px-3 py-1", className)}
    {...props}
  />
))
SidebarSectionTitle.displayName = "SidebarSectionTitle"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
  SidebarNav,
  SidebarNavItem,
  SidebarSection,
  SidebarSectionTitle
}


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/skeleton.tsx
import * as React from "react"
import { cn } from "@/lib/utils"

interface SkeletonProps extends React.HTMLAttributes<HTMLDivElement> {
  animated?: boolean
}

function Skeleton({
  className,
  animated = true,
  ...props
}: SkeletonProps) {
  return (
    <div
      className={cn(
        "rounded-md bg-muted/70",
        animated && "animate-pulse",
        className
      )}
      {...props}
    />
  )
}

export { Skeleton }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/slider.tsx
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-1.5 w-full grow overflow-hidden rounded-full bg-secondary/50">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-4 w-4 rounded-full border border-primary/50 bg-background shadow-sm ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:border-primary hover:scale-110" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/sonner.tsx

import React from "react"
import { Toaster as Sonner, toast } from "sonner"
import { useTheme } from "@/components/theme-provider"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster, toast }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/switch.tsx
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-10 shrink-0 cursor-pointer items-center rounded-full border border-transparent transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-md ring-0 transition-transform duration-200 ease-in-out data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0.5 data-[state=checked]:bg-white"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/table.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/tabs.tsx
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center bg-white text-[#666666] border-b border-[#E5E5E5]",
      className
    )}
    style={{ borderRadius: 0 }}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap px-6 py-3 text-sm font-medium transition-all focus-visible:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-black data-[state=active]:text-white data-[state=active]:shadow-none hover:bg-[#F5F5F5]",
      className
    )}
    style={{ borderRadius: 0, boxShadow: 'none', fontFamily: 'Inter, sans-serif', letterSpacing: '0.02em' }}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-8 focus-visible:outline-none",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/textarea.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[60px] w-full border border-[#E5E5E5] bg-white px-4 py-3 text-sm text-black placeholder:text-[#999999] focus:border-black focus:outline-none disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        style={{ 
          borderRadius: 0, 
          boxShadow: 'none', 
          fontFamily: 'Inter, sans-serif', 
          letterSpacing: '0.02em' 
        }}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/toast.tsx
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/toaster.tsx
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/toggle-group.tsx
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants> & {
      orientation?: "horizontal" | "vertical"
    }
>(({ className, variant, size, orientation = "horizontal", children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn(
      "flex items-center gap-1",
      orientation === "vertical" ? "flex-col" : "flex-row",
      variant === "outline" && "bg-background rounded-md border border-input p-1",
      className
    )}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        context.variant === "outline" && "data-[state=on]:bg-background data-[state=on]:text-foreground",
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/toggle.tsx
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent/60 data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent hover:bg-muted/60 hover:text-foreground",
        outline:
          "border border-input bg-transparent hover:bg-accent/20 hover:text-accent-foreground data-[state=on]:border-accent",
        soft:
          "bg-transparent hover:bg-primary/10 data-[state=on]:bg-primary/20 data-[state=on]:text-primary",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-8 px-2.5 text-xs",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/tooltip.tsx
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border border-border/40 bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-lg animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/components/ui/use-toast.ts
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/contexts/AppContext.tsx
import React, { createContext, useContext, useState } from 'react';
import { useWorkouts } from '@/hooks/useWorkouts';

export interface WorkoutInterval {
  id: string;
  name: string;
  duration: number;
  durationType: 'time' | 'distance';
  intensityType: 'heartRate' | 'power' | 'pace' | 'rpe';
  intensityMin: number;
  intensityMax: number;
  description?: string;
}

export interface SwimWorkoutData {
  totalDistance: number;
  targetPacePer100: string;
  strokeType: 'Freestyle' | 'Backstroke' | 'Breaststroke' | 'Butterfly' | 'Kick-Only';
  equipmentUsed: string[];
}

interface Workout {
  id: string;
  name: string;
  type: 'run' | 'ride' | 'strength' | 'swim';
  duration: number;
  date: string;
  description: string;
  intervals?: WorkoutInterval[];
  swimData?: SwimWorkoutData;
}

interface AppContextType {
  sidebarOpen: boolean;
  toggleSidebar: () => void;
  workouts: Workout[];
  loading: boolean;
  addWorkout: (workout: Omit<Workout, 'id'>) => Promise<any>;
  updateWorkout: (id: string, updates: Partial<Workout>) => Promise<any>; // ADD THIS
  deleteWorkout: (id: string) => Promise<void>;
  useImperial: boolean;
  toggleUnits: () => void;
}

const defaultAppContext: AppContextType = {
  sidebarOpen: false,
  toggleSidebar: () => {},
  workouts: [],
  loading: false,
  addWorkout: async () => {},
  updateWorkout: async () => {}, // ADD THIS
  deleteWorkout: async () => {},
  useImperial: true,
  toggleUnits: () => {},
};

const AppContext = createContext<AppContextType>(defaultAppContext);

export const useAppContext = () => useContext(AppContext);

export const AppProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [useImperial, setUseImperial] = useState(true);
  const { workouts, loading, addWorkout, updateWorkout, deleteWorkout } = useWorkouts(); // ADD updateWorkout

  const toggleSidebar = () => {
    setSidebarOpen(prev => !prev);
  };

  const toggleUnits = () => {
    setUseImperial(prev => !prev);
  };

  return (
    <AppContext.Provider
      value={{
        sidebarOpen,
        toggleSidebar,
        workouts,
        loading,
        addWorkout,
        updateWorkout, // ADD THIS
        deleteWorkout,
        useImperial,
        toggleUnits,
      }}
    >
      {children}
    </AppContext.Provider>
  );
};

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/hooks/use-mobile.tsx
import * as React from "react"

const MOBILE_BREAKPOINT = 768;

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined);

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);

    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    };

    mql.addEventListener("change", onChange);
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    return () => mql.removeEventListener("change", onChange);
  }, []);

  return !!isMobile;
}


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/hooks/use-toast.ts
import * as React from "react";

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast";

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType["ADD_TOAST"];
      toast: ToasterToast;
    }
  | {
      type: ActionType["UPDATE_TOAST"];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType["DISMISS_TOAST"];
      toastId?: ToasterToast["id"];
    }
  | {
      type: ActionType["REMOVE_TOAST"];
      toastId?: ToasterToast["id"];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action;

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, "id">;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) =>
      dispatch({ type: "DISMISS_TOAST", toastId }),
  };
}

export { useToast, toast };


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/hooks/useWorkouts.ts
import { useState, useEffect } from "react";
import { supabase } from "@/lib/supabase";

// Interval Interfaces
export interface RunInterval {
  id: string;
  time?: string;
  distance?: string;
  paceTarget?: string;
  effortLabel?: string;
  bpmTarget?: string;
  rpeTarget?: string;
  repeat?: boolean;
  repeatCount?: number;
  duration?: number;
  selected?: boolean;
  isRepeatBlock?: boolean;
  originalSegments?: RunInterval[];
}

export interface RideInterval {
  id: string;
  time?: string;
  distance?: string;
  speedTarget?: string;
  powerTarget?: string;
  bpmTarget?: string;
  rpeTarget?: string;
  cadenceTarget?: string;
  repeat?: boolean;
  repeatCount?: number;
  duration?: number;
  selected?: boolean;
  isRepeatBlock?: boolean;
}

export interface SwimInterval {
  id: string;
  distance: string;
  targetRPE?: number;
  equipment: string;
  recoveryType: "time" | "distance";
  recovery: string;
  repeatCount: number;
  duration?: number;
}

export interface StrengthExercise {
  id: string;
  name: string;
  sets: number;
  reps: number;
  weight?: number;
  notes?: string;
  weightMode: "same" | "individual";
  individualWeights?: number[];
  completed_sets?: Array<{
    reps: number;
    weight: number;
    rir?: number;
    completed: boolean;
  }>;
}

// Workout Interface
export interface Workout {
  id: string;
  name: string;
  type: "run" | "ride" | "swim" | "strength";
  duration: number;
  date: string;
  description?: string;
  userComments?: string;
  completedManually?: boolean;
  intervals?: RunInterval[] | RideInterval[] | SwimInterval[];
  strength_exercises?: StrengthExercise[];
  workout_status?: "planned" | "completed" | "skipped" | "in_progress";
  created_at?: string;
  updated_at?: string;
}

export const useWorkouts = () => {
  const [workouts, setWorkouts] = useState<Workout[]>([]);
  const [loading, setLoading] = useState(true);

  // Fetch - ONLY use loading for initial fetch
  const fetchWorkouts = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from("workouts")
        .select("*")
        .order("date", { ascending: false });
      if (error) throw error;

      const mapped = data.map((w) => ({
        id: w.id,
        name: w.name,
        type: w.type,
        duration: w.duration,
        date: w.date,
        description: w.description,
        userComments: w.usercomments ?? "",
        completedManually: w.completedmanually ?? false,
        workout_status: w.workout_status ?? "planned",
        created_at: w.created_at,
        updated_at: w.updated_at,
        intervals: w.intervals ? JSON.parse(w.intervals) : [],
        strength_exercises: w.strength_exercises ? JSON.parse(w.strength_exercises) : [],
      }));
      setWorkouts(mapped);
    } catch (err) {
      console.error("Error in fetchWorkouts:", err);
    } finally {
      setLoading(false);
    }
  };

  // Add - NO LOADING STATES
  const addWorkout = async (workoutData: Omit<Workout, "id">) => {
    try {
      // 🔥 REMOVED: setLoading(true);
      const toSave = {
        name: workoutData.name,
        type: workoutData.type,
        date: workoutData.date,
        duration: workoutData.duration,
        description: workoutData.description ?? "",
        usercomments: workoutData.userComments ?? "",
        completedmanually: workoutData.completedManually ?? false,
        workout_status: workoutData.workout_status ?? "planned",
        intervals: workoutData.intervals ? JSON.stringify(workoutData.intervals) : JSON.stringify([]),
        strength_exercises: workoutData.strength_exercises ? JSON.stringify(workoutData.strength_exercises) : JSON.stringify([]),
      };
      const { data, error } = await supabase
        .from("workouts")
        .insert([toSave])
        .select()
        .single();
      if (error) throw error;

      const newWorkout: Workout = {
        id: data.id,
        name: data.name,
        type: data.type,
        duration: data.duration,
        date: data.date,
        description: data.description,
        userComments: data.usercomments ?? "",
        completedManually: data.completedmanually ?? false,
        workout_status: data.workout_status ?? "planned",
        created_at: data.created_at,
        updated_at: data.updated_at,
        intervals: data.intervals ? JSON.parse(data.intervals) : [],
        strength_exercises: data.strength_exercises ? JSON.parse(data.strength_exercises) : [],
      };
      setWorkouts((prev) => [newWorkout, ...prev]);
      return newWorkout;
    } catch (err) {
      console.error("Error in addWorkout:", err);
      throw err;
    }
    // 🔥 REMOVED: finally { setLoading(false); }
  };

  // Update - NO LOADING STATES
  const updateWorkout = async (id: string, updates: Partial<Workout>) => {
    try {
      // 🔥 REMOVED: setLoading(true);
      const updateObject: any = {};
      if (updates.name !== undefined) updateObject.name = updates.name;
      if (updates.type !== undefined) updateObject.type = updates.type;
      if (updates.date !== undefined) updateObject.date = updates.date;
      if (updates.duration !== undefined) updateObject.duration = updates.duration;
      if (updates.description !== undefined) updateObject.description = updates.description;
      if (updates.userComments !== undefined) updateObject.usercomments = updates.userComments;
      if (updates.completedManually !== undefined) updateObject.completedmanually = updates.completedManually;
      if (updates.workout_status !== undefined) updateObject.workout_status = updates.workout_status;
      if (updates.intervals !== undefined) updateObject.intervals = JSON.stringify(updates.intervals);
      if (updates.strength_exercises !== undefined) updateObject.strength_exercises = JSON.stringify(updates.strength_exercises);

      const { data, error } = await supabase
        .from("workouts")
        .update(updateObject)
        .eq("id", id)
        .select()
        .single();
      if (error) throw error;

      const updated: Workout = {
        id: data.id,
        name: data.name,
        type: data.type,
        duration: data.duration,
        date: data.date,
        description: data.description,
        userComments: data.usercomments ?? "",
        completedManually: data.completedmanually ?? false,
        workout_status: data.workout_status ?? "planned",
        created_at: data.created_at,
        updated_at: data.updated_at,
        intervals: data.intervals ? JSON.parse(data.intervals) : [],
        strength_exercises: data.strength_exercises ? JSON.parse(data.strength_exercises) : [],
      };
      setWorkouts((prev) => prev.map((w) => (w.id === id ? updated : w)));
      return updated;
    } catch (err) {
      console.error("Error in updateWorkout:", err);
      throw err;
    }
    // 🔥 REMOVED: finally { setLoading(false); }
  };

  // Delete - NO LOADING STATES  
  const deleteWorkout = async (id: string) => {
    try {
      // 🔥 REMOVED: setLoading(true);
      const { error } = await supabase.from("workouts").delete().eq("id", id);
      if (error) throw error;
      setWorkouts((prev) => prev.filter((w) => w.id !== id));
    } catch (err) {
      console.error("Error in deleteWorkout:", err);
      throw err;
    }
    // 🔥 REMOVED: finally { setLoading(false); }
  };

  const getWorkoutsForDate = (date: string) => workouts.filter((w) => w.date === date);
  const getWorkoutsByType = (type: Workout["type"]) => workouts.filter((w) => w.type === type);

  useEffect(() => {
    fetchWorkouts();
  }, []);

  return {
    workouts,
    loading, // Only true during initial fetch
    addWorkout,
    updateWorkout,
    deleteWorkout,
    getWorkoutsForDate,
    getWorkoutsByType,
    refetch: fetchWorkouts,
  };
};

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/index.css
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 0%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 0%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 0%;
    --primary: 0 0% 0%;
    --primary-foreground: 0 0% 100%;
    --secondary: 0 0% 96%;
    --secondary-foreground: 0 0% 0%;
    --muted: 0 0% 96%;
    --muted-foreground: 0 0% 40%;
    --accent: 0 0% 0%;
    --accent-foreground: 0 0% 100%;
    --destructive: 0 84% 60%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 90%;
    --input: 0 0% 90%;
    --ring: 0 0% 0%;
    --radius: 0rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-family: 'Inter', sans-serif;
    letter-spacing: 0.02em;
  }
  h1, h2, h3, h4, h5, h6 {
    font-family: 'Inter', sans-serif;
    font-weight: 600;
  }
}

@layer components {
  .font-mono {
    font-variant-numeric: tabular-nums;
  }
}

/* Remove all border radius */
* {
  border-radius: 0 !important;
}

/* Remove all shadows */
* {
  box-shadow: none !important;
}

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/lib/supabase.ts
import { createClient } from '@supabase/supabase-js';


// Initialize Supabase client
// Using direct values from project configuration
const supabaseUrl = 'https://yyriamwvtvzlkumqrvpm.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inl5cmlhbXd2dHZ6bGt1bXFydnBtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA2OTIxNTgsImV4cCI6MjA2NjI2ODE1OH0.yltCi8CzSejByblpVC9aMzFhi3EOvRacRf6NR0cFJNY';
const supabase = createClient(supabaseUrl, supabaseKey);


export { supabase };

// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/lib/utils.ts
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/main.tsx

import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

// Remove dark mode class addition
createRoot(document.getElementById("root")!).render(<App />);


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/pages/Index.tsx

import React from 'react';
import AppLayout from '@/components/AppLayout';
import { AppProvider } from '@/contexts/AppContext';

const Index: React.FC = () => {
  return (
    <AppProvider>
      <AppLayout />
    </AppProvider>
  );
};

export default Index;


// File: /Users/michaelambp/Documents/efforts_App/Efforts/src/pages/NotFound.tsx
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error(
      "404 Error: User attempted to access non-existent route:",
      location.pathname
    );
  }, [location.pathname]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-background">
      <div className="text-center p-8 rounded-lg border border-border bg-card shadow-md animate-slide-in">
        <h1 className="text-5xl font-bold mb-6 text-primary">404</h1>
        <p className="text-xl text-card-foreground mb-6">Page not found</p>
        <a href="/" className="text-primary hover:text-primary/80 underline transition-colors">
          Return to Home
        </a>
      </div>
    </div>
  );
};

export default NotFound;


